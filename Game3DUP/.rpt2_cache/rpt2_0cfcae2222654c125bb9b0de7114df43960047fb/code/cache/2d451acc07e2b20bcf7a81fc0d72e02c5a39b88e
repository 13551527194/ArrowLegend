{
  "code": "import FlowerAI from \"./FlowerAI\";\r\nimport GameBG from \"../GameBG\";\r\nimport Game from \"../Game\";\r\nimport GameHitBox from \"../GameHitBox\";\r\nimport BoomEffect from \"../effect/BoomEffect\";\r\nimport AttackType from \"./AttackType\";\r\nimport { GameAI } from \"./GameAI\";\r\nexport default class TreeAI extends FlowerAI {\r\n    constructor(pro) {\r\n        super(pro);\r\n        this.pro.rotation(Math.PI * 0.5);\r\n    }\r\n    exeAI(pro) {\r\n        if (!this.run_)\r\n            return;\r\n        super.exeAI(pro);\r\n        return false;\r\n    }\r\n    onExe() {\r\n        if (this.pro.isDie) {\r\n            return;\r\n        }\r\n        this.checkHeroCollision();\r\n        this.jump();\r\n    }\r\n    jump() {\r\n        if (this.status == 0 && this.now >= this.nextTime) {\r\n            this.onJump();\r\n            this.status = 1;\r\n        }\r\n        if (this.status == 1) {\r\n            let isTo = this.pro.move2D(this.pro.face2d);\r\n            if (isTo) {\r\n                if (this.status == 1) {\r\n                    if (this.skillISbs.length > 0) {\r\n                        let sys = this.skillISbs[Math.floor(this.skillISbs.length * Math.random())];\r\n                        if (sys && sys.bulletType == AttackType.AOE) {\r\n                            if (this.now >= this.nextTime) {\r\n                                this.onAoe(sys);\r\n                                this.nextTime = this.now + this.sysEnemy.enemySpeed;\r\n                                this.status = 0;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.now >= this.nextTime) {\r\n                                this.startAttack();\r\n                                this.shootAc();\r\n                                this.pro.play(GameAI.NormalAttack);\r\n                                this.nextTime = this.now + this.shooting.shootCd;\r\n                                this.status = 0;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.now >= this.nextTime) {\r\n                            this.startAttack();\r\n                            this.shootAc();\r\n                            this.pro.play(GameAI.NormalAttack);\r\n                            this.nextTime = this.now + this.shooting.shootCd;\r\n                            this.status = 0;\r\n                        }\r\n                    }\r\n                }\r\n                this.status = 0;\r\n            }\r\n        }\r\n    }\r\n    startAttack() {\r\n        if (this.pro.isDie) {\r\n            return;\r\n        }\r\n        this.shooting._sysBullet = null;\r\n        if (this.normalSb) {\r\n            if (this.normalSb.bulletType == AttackType.NORMAL_BULLET || this.normalSb.bulletType == AttackType.RANDOM_BULLET) {\r\n                this.shooting._sysBullet = this.normalSb;\r\n            }\r\n        }\r\n        if (!this.shooting._sysBullet) {\r\n            if (this.skillISbs.length > 0) {\r\n                let rand = Math.floor(this.skillISbs.length * Math.random());\r\n                let skillBullet = this.skillISbs[rand];\r\n                if (skillBullet.bulletType == AttackType.NORMAL_BULLET || skillBullet.bulletType == AttackType.RANDOM_BULLET) {\r\n                    this.shooting._sysBullet = skillBullet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onAoe(bullet) {\r\n        BoomEffect.getEffect(this.pro, bullet.boomEffect);\r\n        if (GameHitBox.faceToLenth(this.pro.hbox, Game.hero.hbox) <= bullet.attackAngle) {\r\n            this.pro.hurtValue = this.pro.sysEnemy.enemyAttack;\r\n            Game.hero.hbox.linkPro_.event(Game.Event_Hit, this.pro);\r\n        }\r\n    }\r\n    onJump() {\r\n        this.pro.sp3d.transform.localPositionY = 0;\r\n        let toArr = Game.getRandPos(this.pro);\r\n        if (toArr.length == 2) {\r\n            let toX = toArr[0] * GameBG.ww;\r\n            let toY = toArr[1] * GameBG.ww;\r\n            if (toX && toY) {\r\n                this.pro.curLen = 0;\r\n                this.pro.moveLen = Math.sqrt((this.pro.hbox.y - toY) * (this.pro.hbox.y - toY) + (this.pro.hbox.x - toX) * (this.pro.hbox.x - toX));\r\n                this.pro.setSpeed(Math.ceil(this.pro.moveLen / GameBG.ww));\r\n                var xx = toX - this.pro.hbox.x;\r\n                var yy = this.pro.hbox.y - toY;\r\n                this.pro.rotation(Math.atan2(yy, xx));\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "D:/game01/Layabox/Game3DUP/src/game/ai/FlowerAI.ts",
    "D:/game01/Layabox/Game3DUP/src/game/player/Monster.ts",
    "D:/game01/Layabox/Game3DUP/src/game/GamePro.ts",
    "D:/game01/Layabox/Game3DUP/src/game/GameBG.ts",
    "D:/game01/Layabox/Game3DUP/src/game/Game.ts",
    "D:/game01/Layabox/Game3DUP/src/game/GameHitBox.ts",
    "D:/game01/Layabox/Game3DUP/src/game/effect/BoomEffect.ts",
    "D:/game01/Layabox/Game3DUP/src/main/sys/SysBullet.ts",
    "D:/game01/Layabox/Game3DUP/src/game/ai/AttackType.ts",
    "D:/game01/Layabox/Game3DUP/src/game/ai/GameAI.ts"
  ]
}
