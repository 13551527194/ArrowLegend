GameX1ApplicationTests.java
package com.maoxiaolu.gamex1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class GameX1ApplicationTests {
	
	
	@Test
	public void contextLoads() {
		
	}

}
ServerInit.java
package com.maoxiaolu.gamex1.init;

import java.net.InetAddress;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.BaseExeAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.SysCardMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysComposeMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysDrawMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysEnemyMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysEverydayMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysFactorybaseMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysIteamMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysPlantMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysRobotMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysRolelevelMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysSkillMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysSoilMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysStagemapMapper;
import com.maoxiaolu.gamex1.dao.mapper.SysStarinfoMapper;
import com.maoxiaolu.gamex1.dao.mapper.TWandaMapper;
import com.maoxiaolu.gamex1.dao.tables.SysCompose;
import com.maoxiaolu.gamex1.dao.tables.SysDraw;
import com.maoxiaolu.gamex1.dao.tables.SysEnemy;
import com.maoxiaolu.gamex1.dao.tables.SysEveryday;
import com.maoxiaolu.gamex1.dao.tables.SysFactorybase;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.SysPlant;
import com.maoxiaolu.gamex1.dao.tables.SysRobot;
import com.maoxiaolu.gamex1.dao.tables.SysRolelevel;
import com.maoxiaolu.gamex1.dao.tables.SysSkill;
import com.maoxiaolu.gamex1.dao.tables.SysSoil;
import com.maoxiaolu.gamex1.dao.tables.SysStagemap;
import com.maoxiaolu.gamex1.dao.tables.SysStarinfo;
import com.maoxiaolu.gamex1.dao.tables.TWanda;
import com.maoxiaolu.gamex1.dao.tables.sub.DrawItem;
import com.maoxiaolu.gamex1.dao.tables.sub.StarInfoArr;
import com.maoxiaolu.utils.maoutils.MyUtil;
import com.maoxiaolu.utils.maoutils.game01.SysCard;

@Component
public class ServerInit implements CommandLineRunner {
	
	Logger log = LoggerFactory.getLogger(ServerInit.class.getName());
	
	@Autowired
	BaseExeAction bea;
	
	@Autowired
	SysSoilMapper sysSoilMapper;
	@Autowired
	SysIteamMapper sysIteamMapper;
	@Autowired
	SysRolelevelMapper sysRolelevelMapper;
	@Autowired
	SysPlantMapper sysPlantMapper;
	@Autowired
	SysFactorybaseMapper sysFactorybaseMapper;
	@Autowired
	SysComposeMapper sysComposeMapper;
	@Autowired
	SysStagemapMapper sysStagemapMapper;
	@Autowired
	SysRobotMapper sysRobotMapper;
	@Autowired
	SysEnemyMapper sysEnemyMapper;
	@Autowired
	SysStarinfoMapper sysStarinfoMapper;
	@Autowired
	SysCardMapper sysCardMapper;
	@Autowired
	SysEverydayMapper sysEverydayMapper;
	@Autowired
	SysDrawMapper sysDrawMapper;
	@Autowired
	TWandaMapper tWandaMapper;
	@Autowired
	SysSkillMapper sysSkillMapper;
	
	@Autowired
	GameDatas gameDatas;

	public List<SysSoil> sysSoilList(){
		return sysSoilMapper.selectList();
	}
	
	@Override
	public void run(String... args) throws Exception {
		showIP();
		MyUtil.Version();
		HashMap<Integer,SysRolelevel> sysRolelevelMap = new HashMap<>();
		List<SysRolelevel> sysRolelevellist = sysRolelevelMapper.selectList();//sysRolelevelList
		int allExp = 0;
		for (int i = 0; i < sysRolelevellist.size(); i++) {
			SysRolelevel level = sysRolelevellist.get(i);
			sysRolelevelMap.put(level.getId(), level);
			allExp += level.getRoleExp();
			level.setAllExp(allExp);
			gameDatas.setMaxlv(level.getId());
		}
		gameDatas.setSysRolelevellist(sysRolelevellist);
		gameDatas.setSysRolelevelMap(sysRolelevelMap);

		Map<Integer, SysSoil> sysSoilMap = new HashMap<Integer, SysSoil>();
		List<SysSoil> sysSoilList = sysSoilMapper.selectList();
		for (SysSoil sysSoil : sysSoilList) {
			sysSoilMap.put(sysSoil.getId(), sysSoil);
			if(sysSoil.getRoleLevel()>0) {
				sysRolelevelMap.get(sysSoil.getRoleLevel()).setUnlockSoil(sysSoil);
			}
		}
		gameDatas.setSysSoilList(sysSoilList);
		gameDatas.setSysSoilMap(sysSoilMap);
		
		HashMap<Integer,SysIteam> sysIteamMap = new HashMap<>();
		List<SysIteam> sysIteamList = sysIteamMapper.selectList();
		for (SysIteam sysIteam : sysIteamList) {
			sysIteamMap.put(sysIteam.getId(), sysIteam);
		}
		gameDatas.setSysIteamList(sysIteamList);
		gameDatas.setSysIteamMap(sysIteamMap);
		
		HashMap<Integer,SysPlant> sysPlantMap = new HashMap<>();
		List<SysPlant> sysPlantlist = sysPlantMapper.selectList();
		for (SysPlant sysPlant : sysPlantlist) {
			sysPlantMap.put(sysPlant.getId(), sysPlant);
		}
		gameDatas.setSysPlantlist(sysPlantlist);
		gameDatas.setSysPlantMap(sysPlantMap);
		
		HashMap<Integer,SysFactorybase> sysFactorybaseMap = new HashMap<>();
		List<SysFactorybase> sysFactorybaseList = sysFactorybaseMapper.selectList();
		for (SysFactorybase sysFactorybase : sysFactorybaseList) {
			sysFactorybaseMap.put(sysFactorybase.getId(), sysFactorybase);
		}
		gameDatas.setSysFactorybaseList(sysFactorybaseList);
		gameDatas.setSysFactorybaseMap(sysFactorybaseMap);
		
		HashMap<Integer, SysCompose> sysComposeMap = new HashMap<>();
		List<SysCompose> sysComposeList = sysComposeMapper.selectList();
		for (SysCompose sysCompose : sysComposeList) {
			sysCompose.init();
			sysComposeMap.put(sysCompose.getItem2(), sysCompose);
		}
		gameDatas.setSysComposeList(sysComposeList);
		gameDatas.setSysComposeMap(sysComposeMap);
		
		HashMap<Integer, SysStagemap> sysStagemapMap = new HashMap<>();
		List<SysStagemap> sysStagemapList = sysStagemapMapper.selectList();
		for (SysStagemap sysStagemap : sysStagemapList) {
			sysStagemapMap.put(sysStagemap.getId(), sysStagemap);
		}
		gameDatas.setSysStagemapList(sysStagemapList);
		gameDatas.setSysStagemapMap(sysStagemapMap);
		
		
		HashMap<Integer,StarInfoArr> sysStarInfoArr = new HashMap<>();
		HashMap<String, SysStarinfo> sysStarinfoMap = new HashMap<>();
		HashMap<Integer, SysStarinfo> sysStarinfoMapMax = new HashMap<>();
		List<SysStarinfo> sysStarinfoList = sysStarinfoMapper.selectList();
		for (SysStarinfo sysStarinfo : sysStarinfoList) {
			String key = sysStarinfo.getStarID() + "_" + sysStarinfo.getRoleLevel();
			sysStarinfoMap.put(key, sysStarinfo);
			sysStarinfo.init();
			
			if (sysStarinfoMapMax.containsKey(sysStarinfo.getStarID())) {
				if (sysStarinfoMapMax.get(sysStarinfo.getStarID()).getRoleLevel() < sysStarinfo.getRoleLevel())
					sysStarinfoMapMax.put(sysStarinfo.getStarID(), sysStarinfo);
			} else {
				sysStarinfoMapMax.put(sysStarinfo.getStarID(), sysStarinfo);
			}
			
			if( !sysStarInfoArr.containsKey(sysStarinfo.getStarID()) ) {
				sysStarInfoArr.put(sysStarinfo.getStarID(), new StarInfoArr(sysStarinfo.getId()));
			}
			sysStarInfoArr.get(sysStarinfo.getStarID()).getList().add(sysStarinfo);
			
			
		}
		gameDatas.setSysStarinfoList(sysStarinfoList);
		gameDatas.setSysStarinfoMap(sysStarinfoMap);
		gameDatas.setSysStarinfoMapMax(sysStarinfoMapMax);
		gameDatas.setSysStarInfoArr(sysStarInfoArr);
		
		
		HashMap<Integer, SysRobot> sysRobotMap = new HashMap<>();
		List<SysRobot> sysRobotList = sysRobotMapper.selectList();
		for (SysRobot sysRobot : sysRobotList) {
			sysRobotMap.put(sysRobot.getId(), sysRobot);
		}
		gameDatas.setSysRobotList(sysRobotList);
		gameDatas.setSysRobotMap(sysRobotMap);
		
		HashMap<Integer, SysEnemy> sysEnemyMap = new HashMap<>();
		List<SysEnemy> sysEnemyList = sysEnemyMapper.selectList();
		for (SysEnemy sysEnemy : sysEnemyList) {
			sysEnemyMap.put(sysEnemy.getId(), sysEnemy);
		}
		gameDatas.setSysEnemyList(sysEnemyList);
		gameDatas.setSysEnemyMap(sysEnemyMap);
		
		
		
		HashMap<Integer, SysCard> sysCardMap = new HashMap<>();
		List<SysCard> sysCardList = sysCardMapper.selectList();
		for (SysCard sysCard : sysCardList) {
			sysCardMap.put(sysCard.getId(), sysCard);
		}
		gameDatas.setSysCardList(sysCardList);
		gameDatas.setSysCardMap(sysCardMap);
		
		HashMap<Integer, SysEveryday> sysEverydayMap = new HashMap<>();
		List<SysEveryday> sysEverydayList = sysEverydayMapper.selectList();
		for (SysEveryday sysEveryday : sysEverydayList) {
			sysEverydayMap.put(sysEveryday.getId(), sysEveryday);
		}
		gameDatas.setSysEverydayList(sysEverydayList);
		gameDatas.setSysEverydayMap(sysEverydayMap);
		
		HashMap<Integer, SysDraw> sysDrawMap = new HashMap<>();
		List<SysDraw> sysDrawList = sysDrawMapper.selectList();
		
		int allRate = 0;
		DrawItem [] drawItemArr = new DrawItem[sysDrawList.size()];
		int i = 0;
		for (SysDraw sysDraw : sysDrawList) {
			sysDrawMap.put(sysDraw.getId(), sysDraw);
			
			DrawItem di = new DrawItem();
			
			di.setMin(allRate);
			allRate += sysDraw.getDrawRate();
			di.setDrawRate(sysDraw.getDrawRate());
			di.setMax(allRate);
			di.setRateLv(allRate);
			di.setO(sysDraw);
			drawItemArr[i++] = di;
			
		}
		gameDatas.setSysDrawList(sysDrawList);
		gameDatas.setSysDrawMap(sysDrawMap);
		
		gameDatas.setAllRate_0(allRate);
		gameDatas.setDrawItemArr_0(drawItemArr);
		
		allRate = 0;
		drawItemArr = new DrawItem[sysDrawList.size()];
		i = 0;
		for (SysDraw sysDraw : sysDrawList) {
			//sysDrawMap.put(sysDraw.getId(), sysDraw);
			
			DrawItem di = new DrawItem();
			
			di.setMin(allRate);
			//allRate += sysDraw.getDrawRate();
			allRate += sysDraw.getDrawCount();
			//di.setDrawRate(sysDraw.getDrawRate());
			di.setDrawRate(sysDraw.getDrawCount());
			di.setMax(allRate);
			di.setRateLv(allRate);
			di.setO(sysDraw);
			drawItemArr[i++] = di;
			
		}
		gameDatas.setAllRate_1(allRate);
		gameDatas.setDrawItemArr_1(drawItemArr);
		
		List<TWanda> twandalist = tWandaMapper.selectList();
		gameDatas.setTwandalist(twandalist);
				
		HashMap<Integer, SysSkill> sysSkillMap = new HashMap<>();
		List<SysSkill> sysSkillList = sysSkillMapper.selectList();
		for (SysSkill sysSkill : sysSkillList) {
			sysSkillMap.put(sysSkill.getId(), sysSkill);
		}
		gameDatas.setSysSkillList(sysSkillList);
		gameDatas.setSysSkillMap(sysSkillMap);

		bea.initActions();
	}
	
	private  void showIP() {
		InetAddress ia = null;
		try {
			ia = InetAddress.getLocalHost();
			String localname = ia.getHostName();
			String localip = ia.getHostAddress();
			log.info("local name: " + localname);
			log.info("local ip: "   + localip  );
		} catch (Exception e) {			
			e.printStackTrace();
		}
	}

}
LockedUID.java
package com.maoxiaolu.gamex1.util;

public class LockedUID {
	
	private static final int num = 512;
	
	private static final Object[] locks = new Object[num];
	
	static {
		for (int i = 0; i < locks.length; i++) {
			locks[i] = new Object();
		}
	}
	
	public static Object getLocked(int uid) {
		if(uid<0)uid=uid*-1;
		return locks[uid%locks.length];
	}
}
StaticValues.java
package com.maoxiaolu.gamex1.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.maoxiaolu.gamex1.dao.tables.sub.NumItem;
import com.maoxiaolu.utils.maoutils.MyUtil;

public class StaticValues {
	
	public static int getGameNow() {
		return  ((int)(System.currentTimeMillis()/1000)) - SST;
	}
	
	public static int getGameTomorrow() {
		return  ((int)(MyUtil.Tomorrow(System.currentTimeMillis())/1000)) - SST;
	}
	
	public static long getGameNowL() {
		return  (System.currentTimeMillis()) - ST;
	}
	
	public static final long ST = 1553595816676l;
	
	public static final int SST = 1553595816;
	
	/**停止运转 cooldown*/
	public static final int F_Shutdown_Factory = -1;
	/**正常运作*/
	public static final int F_Running_Factory  =  0;
	/**没材料暂停*/
	public static final int F_Pause_1_Factory  =  1;
	/**仓库满暂停*/
	public static final int F_Pause_2_Factory  =  2;
	/**升级*/
	public static final int F_Running_Levelup  =  3;
	
	public static NumItem[] getNumItems(String str) {
		try {
			String[] arr0 = str.split("\\|");
			NumItem[] rs = new NumItem[arr0.length];
			int k = 0;
			for (String string : arr0) {
				// System.out.println(string);
				String[] arr2 = string.split(",");
				for (int i = 0; i < arr2.length; i += 2) {
					// System.out.print(arr2[i]);
					// System.out.print(" , ");
					NumItem item = new NumItem();
					item.setItemid(Integer.parseInt(arr2[0]));
					item.setNum(Integer.parseInt(arr2[1]));
					rs[k++] = item;
				}
				// System.out.println("");
			}
			return rs;
		} catch (Exception e) {
			Logger log = LoggerFactory.getLogger(StaticValues.class.getName());
			log.warn("error str :: \""+str+"\"",e);
			return new NumItem[0];
		}
	}
}
HttpServerHandler.java
package com.maoxiaolu.gamex1.config;

import java.sql.Timestamp;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.Actions.GameSign30Action;
import com.maoxiaolu.gamex1.dao.mapper.TAddcardsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TCardsMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;
import com.maoxiaolu.utils.maoutils.game01.AddCardService;
import com.maoxiaolu.utils.maoutils.game01.Game01Exuter;
import com.maoxiaolu.utils.maoutils.game01.SysCard;
import com.maoxiaolu.utils.maoutils.game01.TAddcards;
import com.maoxiaolu.utils.maoutils.game01.TCards;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpObject;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import io.netty.handler.codec.http.multipart.Attribute;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
import io.netty.handler.codec.http.multipart.InterfaceHttpData;
import io.netty.util.CharsetUtil;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class HttpServerHandler extends SimpleChannelInboundHandler<HttpObject> implements AddCardService {
	Logger log = LoggerFactory.getLogger(HttpServerHandler.class.getName());
	
	//private Game01Exuter ge = new Game01Exuter();
	
	@Autowired
	MyConfig config;
	@Autowired
	TAddcardsMapper tAddcardsMapper;
	@Autowired
	GameSign30Action action;
	@Autowired
	UWxuserMapper uWxuserMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TCardsMapper tCardsMapper;
	
	@Override
	public void cardStatus(String cardcode) {
		TCards card = tCardsMapper.selectByCardcode(cardcode);
		card.setStatus(1);
		tCardsMapper.updateOne(card);
	}
	
	@Override
	public TAddcards addCard(TAddcards card, int fromid) {
		card.setProid(fromid);
		TAddcards c = tAddcardsMapper.selectCard(card.getUsercode());
		if(c==null)
		tAddcardsMapper.insertOne(card);
		return card;
	}
	
	@Override
	protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {
//		System.out.println(msg instanceof HttpRequest);
//		System.out.println(msg instanceof HttpContent);
		
		if (msg instanceof HttpRequest) {
			HttpRequest httpRequest = (HttpRequest) msg;
			String method = httpRequest.method().name();
			if ("/favicon.ico".equals(httpRequest.uri())) {
				send(ctx, "", "text/html");
				return;
			}
			
			if (method == "POST" && "/addcard.action".equals(httpRequest.uri())) {
				//this.GetValue(httpRequest, "");
				//httpRequest.
				String ss = "";
				if(msg instanceof HttpContent) {
					HttpContent HttpContent = (HttpContent) msg;
					byte dst[] = new byte[HttpContent.content().readableBytes()];
					HttpContent.content().readBytes(dst);
					String strXML = new String(dst) ;
					//ge.addCard(strXML, addCardService, appid)
					ss = Game01Exuter.AddCard(strXML, this, config.getWappId());
				}
				send(ctx, ss, "text/html");	
				return;
			}
			
			if (method == "POST" && "/cardStatus.action".equals(httpRequest.uri())) {
				//this.GetValue(httpRequest, "");
				//httpRequest.
				String ss = "";
				if(msg instanceof HttpContent) {
					HttpContent HttpContent = (HttpContent) msg;
					byte dst[] = new byte[HttpContent.content().readableBytes()];
					HttpContent.content().readBytes(dst);
					String strXML = new String(dst) ;
					//ge.addCard(strXML, addCardService, appid)
					//ss = Game01Exuter.AddCard(strXML, this, config.getWappId());
					ss = Game01Exuter.cardStatus(strXML, this, config.getWappId());
				}
				send(ctx, ss, "text/html");	
				return;
			}
			
			

			log.info("请求方法名称:" + method);
			String ss = "<h1>Hello World!</h1>";
			if (method == "POST") {
//				+--------+-----------------------+------------+------------+---------+---------+-------+-----------------------+
//				| id     | name                  | begin      | end        | useType | cardNum | price | iteamTxt              |
//				+--------+-----------------------+------------+------------+---------+---------+-------+-----------------------+
//				| 700001 | 百果园优惠券          | 2018-09-10 | 2018-09-11 |       1 |       0 |    10 |                       |
//				| 700002 | 万达电影优惠券        | 2018-09-10 | 2018-09-11 |       1 |       0 |    10 |                       |
//				| 700003 | 领种折扣券            | 2018-09-10 | 2068-09-11 |       1 |       0 |    20 | 销售季可以使用        |
//				| 700004 | 沃柑 10斤折扣券       | 2018-09-10 | 2068-09-11 |       1 |       0 |     5 | 销售季可以使用        |
//				| 700005 | 钻石兑换券            | 2018-09-10 | 2068-09-11 |       2 |     100 |     0 | 包含100钻石           |
//				| 700006 | 沃柑20斤折扣券        | 2018-09-10 | 2068-09-11 |       1 |       0 |    10 | 销售季可以使用        |
//				+--------+-----------------------+------------+------------+---------+---------+-18-09-10 | 2018-09-11 |       2 |     100 |    10 |
				//int itemid = 700006;
				int uid = 0;
				
				ss += "<a href=\"/test\" >back</a> ";
				HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(httpRequest);
				List<InterfaceHttpData> list = decoder.getBodyHttpDatas();
				for (int i = 0; i < list.size(); i++) {
					InterfaceHttpData d = list.get(i);
					Attribute attribute = (Attribute) d;
					String question = attribute.getValue();

					//System.out.println(d.getName() + ":" +question);
					if(d.getName().equals("v2") && !question.equals("198126")) {
						send(ctx, ss + "<br/>\n error password !", "text/html");
						return;
					}
					
					if(d.getName().equals("v1")) {
						try {
						uid = Integer.parseInt(question);
						}catch(Exception e) {
							//e.printStackTrace();
							send(ctx, ss + "<br/>\n error uid !", "text/html");
							return;
						}
					}
				}
				
				
				
				// GameX1Application.cox.close();
//				addCard(700003, uid);
//				addCard(700004, uid);
				addCard(700005, uid);
//				addCard(700006, uid);
				
				
				
				
			} else if (method == "GET") {
				// System.out.println("请求来自:"+ctx.channel().remoteAddress());
				// log.info(httpRequest.uri());
				ss += "<form action=\"/gameinter\" method=\"post\"> ";
				ss += "<input name=\"v1\" id=\"v1\" value=\"\"></input><br/>";
				ss += "<input name=\"v2\" id=\"v2\" type=\"password\"></input>";
				ss += "<input type=\"submit\" value=\"submit\"></input>";
				ss += "</form> ";
			}
			this.send(ctx, ss, "text/html");
		}

	}

	private void send(ChannelHandlerContext ctx, String ss, Object value) {
		ByteBuf content = Unpooled.copiedBuffer(ss, CharsetUtil.UTF_8);
		DefaultFullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK,
				content);
		response.headers().set(HttpHeaderNames.CONTENT_TYPE, value);
		response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());
		ctx.writeAndFlush(response);
		ctx.channel().close();
	}
	
	private void addCard(int itemid, int uid, int... num) {
		if (itemid == 0)
			return;

		UWxuser uwx = uWxuserMapper.selectOne(uid);
		if(uwx==null)return;
		
		SysCard sysc = gameDatas.getSysCardMap().get(itemid);
		if (sysc != null) {
			try {
				TCards c = new TCards();
				c.setAid(0);
				c.setUid(uid);
				c.setCtime(new Timestamp(System.currentTimeMillis()));
				c.setStime(sysc.getBegin());
				c.setEtime(sysc.getEnd());
				c.setItemid(sysc.getId());
				if (num != null && num.length > 0) {
					c.setNum(num[0]);
				} else {
					if(sysc.getCardNum()==0) {
						c.setNum(sysc.getPrice());
					}else {
						c.setNum(sysc.getCardNum());
					}
				}
				tCardsMapper.insertOne(c);
				action.postTo(uid);
			} catch (Exception e) {
				 e.printStackTrace();
			}
		}
	}



	

}
ServerApplication.java
package com.maoxiaolu.gamex1.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.Channel;

@Component
public class ServerApplication {
	
	Logger debug = LoggerFactory.getLogger("com.tx.xml.mao");
	
	Logger info  = LoggerFactory.getLogger(ServerApplication.class.getName());
	
	@Autowired
	@Qualifier("bootstrap")
	ServerBootstrap serverBootstrap;
	
	@Autowired
	@Qualifier("bootstrapHttp")
	ServerBootstrap serverBootstraphttp;
	
	@Autowired
	MySSLServer ssl;
	
	private Channel channel;
	
	
	public void start() throws InterruptedException {
		
		channel = serverBootstraphttp.bind(8889).sync().channel();
		new MyShutDownServer(channel).start();
		
		info.info(" netty start !! ");
		channel = serverBootstrap.bind(ssl.getPort()).sync().channel();
		//new MyShutDownServer(channel);
		channel.closeFuture().sync();
		info.info(" nio websocket !");

	}

/*
	@PreDestroy
	public void close() {
		channel.close();
//		channel.parent().close();
		debug.debug("close...");
	}
*/
}
GameServer.java
package com.maoxiaolu.gamex1.config;

import io.netty.handler.ssl.SslHandler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
import io.netty.handler.stream.ChunkedWriteHandler;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

@Configuration
public class GameServer {
	
	@Autowired
	ApplicationContext applicationContext;
	
	@Autowired
	BFrameHandler bFrameHandler;
	@Autowired
	MyChatHandler myChatHandler;
	
	@Autowired
	MySSLServer sslc;
	
	Logger info = LoggerFactory.getLogger(GameServer.class.getName());
	
//	@Bean//(name = "debug")
//	public Logger getDebug() {
//		Logger debug = LoggerFactory.getLogger("com.tx.xml.mao");
//		return debug;
//	}
	
	@Bean(destroyMethod = "shutdownGracefully")
	public NioEventLoopGroup bossGroup() {
		
//		NioEventLoopGroup bossGroup = new NioEventLoopGroup();
//		//info.info(" bossGroup.hashCode() = " + bossGroup.hashCode());
//		io.netty.channel.DefaultChannelPipeline;
//		io.netty.channel.DefaultChannelPipeline;
		//return  new NioEventLoopGroup(1);
		return new MyLoop(" bossGroup  ");
	}
	
	@Bean(destroyMethod = "shutdownGracefully")
	public NioEventLoopGroup workerGroup() {
		//return new NioEventLoopGroup();
		return new MyLoop(" workerGroup  ");
	}
	
	@Bean(name = "bootstrap")
	public ServerBootstrap bootstrap() throws Exception{
		
		String[] ss= applicationContext.getEnvironment().getActiveProfiles();
		final String  active0 = ss[0];
		info.info(active0 + " :: profiles :: start !");
		
		ServerBootstrap serverBootstrap =  new ServerBootstrap();
		serverBootstrap.group(bossGroup(), workerGroup());
		serverBootstrap.channel(NioServerSocketChannel.class);
		
		serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
			@Override
			protected void initChannel(SocketChannel ch) throws Exception {
				if( "dev".equals(active0) || "st".equals(active0)) {
					info.info(active0 + " :: set ssl engine !");
					SSLContext ssl = sslc.createSSLContext();
					SSLEngine engine = ssl.createSSLEngine();
					engine.setUseClientMode(false);
					ch.pipeline().addLast(new SslHandler(engine));
				}else {
					info.info(active0 + " :: no use ssl !");
				}
				
				ch.pipeline().addLast(new HttpServerCodec());
				ch.pipeline().addLast(new ChunkedWriteHandler());
				ch.pipeline().addLast(new HttpObjectAggregator(65535));
				//ch.pipeline().addLast(myhandler);
				ch.pipeline().addLast(new WebSocketServerProtocolHandler("/websocket"));
//				ch.pipeline().addLast(myChatHandler);
				ch.pipeline().addLast(bFrameHandler);
				//NioSocketChannel
			}
		});
		
		serverBootstrap.option(ChannelOption.SO_BACKLOG, 100);
		serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
		
		return serverBootstrap;
	}
	
	@Bean(destroyMethod = "shutdownGracefully")
	public NioEventLoopGroup bossGroupHttp() {
		return new MyLoop(" bossGroupHttp  ",1);
	}
	
	@Bean(destroyMethod = "shutdownGracefully")
	public NioEventLoopGroup workerGroupHttp() {
		return new MyLoop(" workerGroupHttp  ",1);
	}
	
	@Bean(name = "bootstrapHttp")
	public ServerBootstrap bootstrapHttp() throws Exception {

		String[] ss = applicationContext.getEnvironment().getActiveProfiles();
		final String active0 = ss[0];
		info.info(active0 + " :: profiles :: http :: start !");

		ServerBootstrap serverBootstrap = new ServerBootstrap();
		serverBootstrap.group(bossGroupHttp(), workerGroupHttp());
		serverBootstrap.channel(NioServerSocketChannel.class);

		serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
			@Override
			protected void initChannel(SocketChannel ch) throws Exception {
				if ("dev".equals(active0)) {
					info.info(active0 + " :: set ssl engine !");
					SSLContext ssl = sslc.createSSLContext();
					SSLEngine engine = ssl.createSSLEngine();
					engine.setUseClientMode(false);
					ch.pipeline().addLast(new SslHandler(engine));
				} else {
					info.info(active0 + " :: no use ssl !");
				}

				ch.pipeline().addLast(new HttpServerCodec());
				ch.pipeline().addLast(new HttpObjectAggregator(512*8));
				ch.pipeline().addLast(applicationContext.getBean(HttpServerHandler.class));
				
//				ch.pipeline().addLast(new HttpRequestDecoder());
//				ch.pipeline().addLast(new HttpResponseDecoder());
				
			}
		});

		serverBootstrap.option(ChannelOption.SO_BACKLOG, 100);
		serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
		return serverBootstrap;
	}
	
}
MyChatHandler.java
package com.maoxiaolu.gamex1.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.channel.group.ChannelGroup;
import io.netty.channel.group.DefaultChannelGroup;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.util.concurrent.GlobalEventExecutor;

@Component
@Sharable
public class MyChatHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> {
	
	private static ChannelGroup channels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);
	
	Logger debug = LoggerFactory.getLogger("com.tx.xml.mao");

	
	@Override
	protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {
		String content = msg.text();
		debug.debug(" TextWebSocketFrame :: " + content);		
		Channel myc = ctx.channel();
		for (Channel channel : channels) {
			if(channel != myc) {
				channel.writeAndFlush(new TextWebSocketFrame(ctx.channel().remoteAddress() + " : " + content));
			}else {
				channel.writeAndFlush(new TextWebSocketFrame("me : " + content));
			}
		}
	}

	@Override
	public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
		for (Channel channel : channels) {
			channel.writeAndFlush(new TextWebSocketFrame(ctx.channel().remoteAddress() + " enter !"));
		}
		channels.add(ctx.channel());
		
	}

	@Override
	public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
		channels.remove(ctx.channel());
		for (Channel channel : channels) {
			channel.writeAndFlush(new TextWebSocketFrame(ctx.channel().remoteAddress() + " exit !"));
		}
		
	}
	
	



}
MyConfig.java
package com.maoxiaolu.gamex1.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import lombok.Data;

@Data
@ConfigurationProperties(prefix="myconfig")
@Configuration
public class MyConfig {
	private String wappId;
	private String gappId;
	private String wurl;
	private String wurls;
}
MyLoop.java
package com.maoxiaolu.gamex1.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.Future;

public class MyLoop extends NioEventLoopGroup {
	
	private String loop_name;
	
	Logger log = LoggerFactory.getLogger(MyLoop.class.getName());
	
	public MyLoop(String loop_name) {
		this(loop_name,0);
	}
	
	public MyLoop(String loop_name,int nThreads) {
		super(nThreads);
		this.loop_name = loop_name;
		log.info(" new MyLoop "+this.loop_name);
	}
	
	@Override
	public Future<?> shutdownGracefully() {
		log.info(" shutdownGracefully "+this.loop_name);
		return super.shutdownGracefully();
	}
}
MyShutDownServer.java
package com.maoxiaolu.gamex1.config;

import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.maoxiaolu.gamex1.GameX1Application;

import io.netty.channel.Channel;


public class MyShutDownServer extends Thread {
	
	//private NioServerSocketChannel server;
	
	Logger log = LoggerFactory.getLogger(MyShutDownServer.class.getName());
	
	private Channel serverChannel;
	

	public MyShutDownServer(Channel channel) {
		this.serverChannel = channel;
		//this.start();
		
	}
	
	public void run() {
		log.info(" netty http start !! ");
		try {
			serverChannel.closeFuture().sync();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		log.info(" nio http !");
	}
	
	//@Override
	public void run0() {
		log.info(" MyShutDownServer run ...");
		Scanner s = new Scanner(System.in);
		while(true) {
			try {
				String ss = s.nextLine();
				log.info(" MyShutDownServer :: " + ss);
				if(ss.trim().toLowerCase().equals("exit")) {
					log.info(" 关服流程1:先发关服公告...");
					//...
					Thread.sleep(1000*1);
					
					log.info(" 关服流程2:关闭服务器连接...");
					serverChannel.close();
					Thread.sleep(1000*1);
					
					log.info(" 关服流程3:处理关服逻辑...");
					//...
					Thread.sleep(1000*3);
					
					log.info(" 关服流程4:关闭和回收所资源。。。");
					GameX1Application.cox.close();
					break;
				}
			}catch(Exception e) {e.printStackTrace();}
		}
		s.close();
		log.info(" MyShutDownServer close ...\n\n\n");
	}
}
GameDatas.java
package com.maoxiaolu.gamex1.config;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.dao.tables.SysCompose;
import com.maoxiaolu.gamex1.dao.tables.SysDraw;
import com.maoxiaolu.gamex1.dao.tables.SysEnemy;
import com.maoxiaolu.gamex1.dao.tables.SysEveryday;
import com.maoxiaolu.gamex1.dao.tables.SysFactorybase;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.SysPlant;
import com.maoxiaolu.gamex1.dao.tables.SysRobot;
import com.maoxiaolu.gamex1.dao.tables.SysRolelevel;
import com.maoxiaolu.gamex1.dao.tables.SysSkill;
import com.maoxiaolu.gamex1.dao.tables.SysSoil;
import com.maoxiaolu.gamex1.dao.tables.SysStagemap;
import com.maoxiaolu.gamex1.dao.tables.SysStarinfo;
import com.maoxiaolu.gamex1.dao.tables.TWanda;
import com.maoxiaolu.gamex1.dao.tables.sub.DrawItem;
import com.maoxiaolu.gamex1.dao.tables.sub.StarInfoArr;
import com.maoxiaolu.utils.maoutils.game01.SysCard;

import lombok.Data;

@Component
@Data
public class GameDatas {
	/** 最大等级 */
	int maxlv;
	
	Map<Integer, SysSoil> sysSoilMap;
	List<SysSoil> sysSoilList;
	
	HashMap<Integer,SysIteam> sysIteamMap;
	List<SysIteam> sysIteamList;
	
	HashMap<Integer,SysRolelevel> sysRolelevelMap;
	List<SysRolelevel> sysRolelevellist;
	
	HashMap<Integer,SysPlant> sysPlantMap;
	List<SysPlant> sysPlantlist;
	
	HashMap<Integer,SysFactorybase> sysFactorybaseMap;
	List<SysFactorybase> sysFactorybaseList;
	
	HashMap<Integer,SysCompose> sysComposeMap;
	List<SysCompose> sysComposeList;
	
	HashMap<Integer,SysStagemap> sysStagemapMap;
	List<SysStagemap> sysStagemapList;
	
	
	
	
	HashMap<Integer,SysEnemy> sysEnemyMap;
	List<SysEnemy> sysEnemyList;
	
	HashMap<String,SysStarinfo> sysStarinfoMap;
	HashMap<Integer,SysStarinfo> sysStarinfoMapMax;
	List<SysStarinfo> sysStarinfoList;
	HashMap<Integer,StarInfoArr> sysStarInfoArr;
	
	HashMap<Integer,SysCard> sysCardMap;
	List<SysCard> sysCardList;
	
	HashMap<Integer,SysEveryday> sysEverydayMap;
	List<SysEveryday> sysEverydayList;
	
	HashMap<Integer,SysDraw> sysDrawMap;
	List<SysDraw> sysDrawList;
	
	int allRate_0 = 0;
	DrawItem[] drawItemArr_0;
	
	int allRate_1 = 0;
	DrawItem[] drawItemArr_1;
	
	List<TWanda> twandalist; 
	
//	HashMap<Integer,RobotData> sysRobotMap;
//	List<SysRobot> sysRobotList;
//	
//	public SysRobot	getSysRobot(int rid,int lv) {
//		return sysRobotMap.get(rid).getSysRobotMap().get(lv);
//	}
	
	HashMap<Integer,SysRobot> sysRobotMap;
	List<SysRobot> sysRobotList;
	
	HashMap<Integer,SysSkill> sysSkillMap;
	List<SysSkill> sysSkillList;
}
BFrameHandler.java
package com.maoxiaolu.gamex1.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.BaseExeAction;
import com.maoxiaolu.gamex1.abteam.MesSession;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.channel.group.ChannelGroup;
import io.netty.channel.group.DefaultChannelGroup;
import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
import io.netty.util.concurrent.GlobalEventExecutor;

@Component
@Sharable
public class BFrameHandler  extends SimpleChannelInboundHandler<BinaryWebSocketFrame> implements ApplicationContextAware{
	
	public static ChannelGroup channels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);
	//Logger debug = LoggerFactory.getLogger("com.tx.xml.mao");
	Logger info = LoggerFactory.getLogger(BFrameHandler.class.getName());
	
	@Override
	public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
		//debug.debug("handlerAdded -- ");
		Channel c = ctx.channel();
		//MesSession session = new MesSession();
		MesSession session = applicationContext.getBean(MesSession.class);
		session.init();
		MesSession.addChannelSession(c, session );
	}
	@Autowired
	BaseExeAction bea;
	

	private ApplicationContext applicationContext;
	
	@Override
	public void channelRead0(ChannelHandlerContext ctx, BinaryWebSocketFrame msg) throws Exception {
		Channel c = ctx.channel();
		ByteBuf bf = msg.content();
		while(bf.isReadable()) {
			int wiri = bf.readableBytes();
			MesSession session = MesSession.getSessionBy(c);
			if(session.getStatus()==0 && wiri>=4) {//等待数据长度
				session.setIntlen(bf.readInt());
				session.setStatus(1);
			}
			else if(session.getStatus()==1 && wiri>=session.getIntlen()) {
				//this.writerIndex - this.readerIndex
				ByteBuf nbf = bf.readBytes(session.getIntlen());
				int k =nbf.readInt();
				if(k!=0)
				//System.out.println(" action id :: " + k);
				try {
					bea.exeAndSend(k, nbf, c);
				}catch(Exception e) { 
					//e.printStackTrace();
					info.warn("Action.exeAndSend action id: "+k+"\n",e);
				}
				
				nbf.release();
				session.setStatus(0);
				session.setIntlen(0);
			}
			else {
				break;
			}
		}
	}
	
	@Override
	public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
		//debug.debug("handlerRemoved -- ");
		MesSession.removeSessionBy(ctx.channel());
	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		//infodebug.debug(" get applicationContext ");
		this.applicationContext = applicationContext;
	}
}
MySSLServer.java
package com.maoxiaolu.gamex1.config;

import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;
import org.springframework.util.ResourceUtils;

@Component
@Configuration
@ConfigurationProperties("netty")
public class MySSLServer {
	
	private String keyStore;
	private String keyStoreType;
	private String keyStorePassword;
	private String keyAlias;
	private int port;
	
	public String getKeyStore() {
		return keyStore;
	}
	public void setKeyStore(String keyStore) {
		this.keyStore = keyStore;
	}
	public String getKeyStoreType() {
		return keyStoreType;
	}
	public void setKeyStoreType(String keyStoreType) {
		this.keyStoreType = keyStoreType;
	}
	public String getKeyStorePassword() {
		return keyStorePassword;
	}
	public void setKeyStorePassword(String keyStorePassword) {
		this.keyStorePassword = keyStorePassword;
	}
	public String getKeyAlias() {
		return keyAlias;
	}
	public void setKeyAlias(String keyAlias) {
		this.keyAlias = keyAlias;
	}
	public int getPort() {
		return port;
	}
	public void setPort(int port) {
		this.port = port;
	}
	
	public SSLContext createSSLContext() {
		try {
			File file = ResourceUtils.getFile(this.keyStore);
			KeyStore ks = KeyStore.getInstance(this.keyStoreType);
			ks.load(new FileInputStream(file), this.keyStorePassword.toCharArray());
			KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
			keyManagerFactory.init(ks, this.keyStorePassword.toCharArray());
			SSLContext sslContext = SSLContext.getInstance("TLS");
			sslContext.init(keyManagerFactory.getKeyManagers(), null, null);
			return sslContext;
			
		} catch (Exception e) {			
			e.printStackTrace();
		}
		
		return null;
	}
	
}
SysCompose.java
package com.maoxiaolu.gamex1.dao.tables;

import java.util.HashMap;

import com.maoxiaolu.gamex1.dao.tables.sub.NumItem;

import lombok.Data;

@Data
public class SysCompose {
	
	private int id ;
	private String meterial1 ;
	private int item2 ;
	private int meterialID ;
	
	private HashMap<Integer, NumItem> map;
	
	public void init() {
		map = new HashMap<>();
		//System.out.println("meterial1 " + meterial1);
		String[] arr0 = meterial1.split("\\|");
		//System.out.println(arr0.length);
		for (String string : arr0) {
			//System.out.println(string);
			String[] arr2 = string.split(",");
			for (int i = 0; i < arr2.length; i+=2) {
				//System.out.print(arr2[i]);
				//System.out.print(" , ");
				NumItem item = new NumItem();
				item.setItemid(Integer.parseInt(arr2[0]));
				item.setNum(Integer.parseInt(arr2[1]));
				map.put(item.getItemid(), item);				
			}
			//System.out.println("");
		}
	}
}
/*
sys_compose
private int id ;
private String meterial1 ;
private int item2 ;
private int meterialID ;
this.writeInt(send,sysCompose.getId());
this.writeUTF(send,sysCompose.getMeterial1());
this.writeInt(send,sysCompose.getItem2());
this.writeInt(send,sysCompose.getMeterialID());
sysCompose
SysCompose
SysComposeMapper
select * from sys_compose
insert into  sys_compose set 
update sys_compose set where 
delete from sys_compose where 
id=#{id},meterial1=#{meterial1},item2=#{item2},meterialID=#{meterialID},
public List<SysCompose> selectList();
public int insertOne(SysCompose sysCompose);
public int updateOne(SysCompose sysCompose);
---
HashMap<Integer,SysCompose> sysComposeMap = new HashMap<>();
List<SysCompose> sysComposeList = sysComposeMapper.selectList();
for (SysCompose sysCompose : sysComposeList) {
  sysComposeMap.put(sysCompose.getId(), sysCompose);}
HashMap<Integer,SysCompose> sysComposeMap;
List<SysCompose> sysComposeList;
gameDatas.setSysComposeList(sysComposeList);
gameDatas.setSysComposeMap(sysComposeMap);
SysComposeMapper sysComposeMapper;
*/
SysStarinfo.java
package com.maoxiaolu.gamex1.dao.tables;

import com.maoxiaolu.gamex1.dao.tables.sub.NumItem;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyUtil;

import lombok.Data;

@Data
public class SysStarinfo {
	private int id ;
	private int starID ;
	private int roleLevel ;
	
	private String dropSeed ;
	private String dropmenu ;
	
	private String collect ;
	private String monsterGroups ;
	private String dropItem ;
	
	private NumItem[] dropSeeds;
	private NumItem[] dropmenus;
	private NumItem[] dropItems;
	private NumItem[] drops;
	
	private NumItem[] collects;
	private int[] monsters;
	
	public void init() {
		
		this.dropSeeds = StaticValues.getNumItems(dropSeed);
		this.dropmenus = StaticValues.getNumItems(dropmenu);
		this.dropItems  = StaticValues.getNumItems(this.dropItem);
		
		this.collects = StaticValues.getNumItems(this.collect);
		this.monsters = MyUtil.Str2Ints(this.monsterGroups);
		
		this.drops = new NumItem[dropSeeds.length + dropmenus.length +dropItems.length];
		int k = 0;
		for (int i = 0; i < dropSeeds.length; i++) {
			drops[k++] = dropSeeds[i];
		}
		for (int i = 0; i < dropmenus.length; i++) {
			drops[k++] = dropmenus[i];
		}
		for (int i = 0; i < dropItems.length; i++) {
			drops[k++] = dropItems[i];
		}
	}
}
/*
sys_starinfo
private int id ;
private int starID ;
private int roleLevel ;
private String dropSeed ;
private String dropmenu ;
private String collect ;
private String monsterGroups ;
private String dropItem ;
this.writeInt(send,sysStarinfo.getId());
this.writeInt(send,sysStarinfo.getStarID());
this.writeInt(send,sysStarinfo.getRoleLevel());
this.writeUTF(send,sysStarinfo.getDropSeed());
this.writeUTF(send,sysStarinfo.getDropmenu());
this.writeUTF(send,sysStarinfo.getCollect());
this.writeUTF(send,sysStarinfo.getMonsterGroups());
this.writeUTF(send,sysStarinfo.getDropItem());
sysStarinfo
SysStarinfo
SysStarinfoMapper
select * from sys_starinfo
insert into  sys_starinfo set 
update sys_starinfo set where 
delete from sys_starinfo where 
id=#{id},starID=#{starID},roleLevel=#{roleLevel},dropSeed=#{dropSeed},dropmenu=#{dropmenu},collect=#{collect},monsterGroups=#{monsterGroups},dropItem=#{dropItem},
public List<SysStarinfo> selectList();
public int insertOne(SysStarinfo sysStarinfo);
public int updateOne(SysStarinfo sysStarinfo);
---
HashMap<Integer,SysStarinfo> sysStarinfoMap = new HashMap<>();
List<SysStarinfo> sysStarinfoList = sysStarinfoMapper.selectList();
for (SysStarinfo sysStarinfo : sysStarinfoList) {
  sysStarinfoMap.put(sysStarinfo.getId(), sysStarinfo);}
HashMap<Integer,SysStarinfo> sysStarinfoMap;
List<SysStarinfo> sysStarinfoList;
gameDatas.setSysStarinfoList(sysStarinfoList);
gameDatas.setSysStarinfoMap(sysStarinfoMap);
SysStarinfoMapper sysStarinfoMapper;
*/
TTransport.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TTransport {
	private int uid ;
	private int gold ;
	private int exp ;
	private int cd ;
	private int bid ;
	private int num ;
	private int aid ;
	private int addgold ;
	private String nickName ;
	private String avatarUrl ;
	private int gender ;
	private int lv ;
	private int rid ;
	private int procd ;
	private int scount ;
}
/*
t_transport
private int uid ;
private int gold ;
private int exp ;
private int cd ;
private int bid ;
private int num ;
private int aid ;
private int addgold ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
private int rid ;
private int procd ;
private int scount ;
this.writeInt(send,tTransport.getUid());
this.writeInt(send,tTransport.getGold());
this.writeInt(send,tTransport.getExp());
this.writeInt(send,tTransport.getCd());
this.writeInt(send,tTransport.getBid());
this.writeInt(send,tTransport.getNum());
this.writeInt(send,tTransport.getAid());
this.writeInt(send,tTransport.getAddgold());
this.writeUTF(send,tTransport.getNickName());
this.writeUTF(send,tTransport.getAvatarUrl());
this.writeInt(send,tTransport.getGender());
this.writeInt(send,tTransport.getLv());
this.writeInt(send,tTransport.getRid());
this.writeInt(send,tTransport.getProcd());
this.writeInt(send,tTransport.getScount());
tTransport
TTransport
TTransportMapper
select * from t_transport
insert into  t_transport set 
update t_transport set where 
delete from t_transport where 
uid=#{uid},gold=#{gold},exp=#{exp},cd=#{cd},bid=#{bid},num=#{num},aid=#{aid},addgold=#{addgold},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},rid=#{rid},procd=#{procd},scount=#{scount},
public List<TTransport> selectList();
public int insertOne(TTransport tTransport);
public int updateOne(TTransport tTransport);
*/
TFactory.java
package com.maoxiaolu.gamex1.dao.tables;

import com.maoxiaolu.utils.maoutils.MyBinaryTreeIf;

import lombok.Data;

@Data
public class TFactory implements MyBinaryTreeIf{
	
	private int uid ;
	private int fid ;
	private int itemId ;
	private int cd ;
	private int et ;
	private int stept ;
	private int stopt ;
	private int lv ;
	private int status ;
	private int stopInt ;
	private int itemCd ;
	private int itemEt ;
	private int speedId ;
	private int itemSt ;
	
	

	@Override
	public boolean sort(Object o1, Object o2) {	
		return ((TFactory)(o1)).stept > ((TFactory)(o2)).stept;
	}
	
	private int index;
	
	
}
/*
t_factory
private int uid ;
private int fid ;
private int itemId ;
private int cd ;
private int et ;
private int stept ;
private int stopt ;
private int lv ;
private int status ;
private int stopInt ;
private int itemCd ;
private int itemEt ;
private int speedId ;
private int itemSt ;
this.writeInt(send,tFactory.getUid());
this.writeInt(send,tFactory.getFid());
this.writeInt(send,tFactory.getItemId());
this.writeInt(send,tFactory.getCd());
this.writeInt(send,tFactory.getEt());
this.writeInt(send,tFactory.getStept());
this.writeInt(send,tFactory.getStopt());
this.writeInt(send,tFactory.getLv());
this.writeInt(send,tFactory.getStatus());
this.writeInt(send,tFactory.getStopInt());
this.writeInt(send,tFactory.getItemCd());
this.writeInt(send,tFactory.getItemEt());
this.writeInt(send,tFactory.getSpeedId());
this.writeInt(send,tFactory.getItemSt());
tFactory
TFactory
TFactoryMapper
select * from t_factory
insert into  t_factory set 
update t_factory set where 
delete from t_factory where 
uid=#{uid},fid=#{fid},itemId=#{itemId},cd=#{cd},et=#{et},stept=#{stept},stopt=#{stopt},lv=#{lv},status=#{status},stopInt=#{stopInt},itemCd=#{itemCd},itemEt=#{itemEt},speedId=#{speedId},itemSt=#{itemSt},
public List<TFactory> selectList();
public int insertOne(TFactory tFactory);
public int updateOne(TFactory tFactory);
*/
TWanda.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TWanda {
	private int uid ;
	private int cid ;
	private String wandaType ;
	private String wandaNumber ;
}
/*
t_wanda
private int uid ;
private int cid ;
private String wandaType ;
private int wandaNumber ;
this.writeInt(send,tWanda.getUid());
this.writeInt(send,tWanda.getCid());
this.writeUTF(send,tWanda.getWandaType());
this.writeInt(send,tWanda.getWandaNumber());
tWanda
TWanda
TWandaMapper
select * from t_wanda
insert into  t_wanda set 
update t_wanda set where 
delete from t_wanda where 
uid=#{uid},cid=#{cid},wandaType=#{wandaType},wandaNumber=#{wandaNumber},
public List<TWanda> selectList();
public int insertOne(TWanda tWanda);
public int updateOne(TWanda tWanda);
*/
TRlog.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TRlog {
	private int id ;
	private int uid ;
	private int itemid ;
	private int num ;
	private String logtime ;
}
/*
t_rlog
private int id ;
private int uid ;
private int itemid ;
private int num ;
private String logtime ;
this.writeInt(send,tRlog.getId());
this.writeInt(send,tRlog.getUid());
this.writeInt(send,tRlog.getItemid());
this.writeInt(send,tRlog.getNum());
this.writeUTF(send,tRlog.getLogtime());
tRlog
TRlog
TRlogMapper
select * from t_rlog
insert into  t_rlog set 
update t_rlog set where 
delete from t_rlog where 
id=#{id},uid=#{uid},itemid=#{itemid},num=#{num},logtime=#{logtime},
public List<TRlog> selectList();
public int insertOne(TRlog tRlog);
public int updateOne(TRlog tRlog);
*/
SysStagemap.java
package com.maoxiaolu.gamex1.dao.tables;


import lombok.Data;

@Data
public class SysStagemap {
	private int id ;
	private String name ;
	private String image ;
	private String sceneImage ;
	private int status ;
	private int times ;
	private int vitality ;
	private int mapType ;
	private int winCondition ;
	private int beforeId ;
	private int stageGold ;
	private int stageExp ;
	private String collect ;
	private String monsterGroups ;
	private String dropItem ;
	private int bgMusic ;
	private int firstAward ;
	private int battleInWinstory ;
	private int npcDamagescale ;
	private int npcHealthscale ;
	private String description ;
	

}
/*
sys_stagemap
private int id ;
private String name ;
private String image ;
private String sceneImage ;
private int status ;
private int times ;
private int vitality ;
private int mapType ;
private int winCondition ;
private int beforeId ;
private int stageGold ;
private int stageExp ;
private String collect ;
private String monsterGroups ;
private String dropItem ;
private int bgMusic ;
private int firstAward ;
private int battleInWinstory ;
private int npcDamagescale ;
private int npcHealthscale ;
private String description ;
this.writeInt(send,sysStagemap.getId());
this.writeUTF(send,sysStagemap.getName());
this.writeUTF(send,sysStagemap.getImage());
this.writeUTF(send,sysStagemap.getSceneImage());
this.writeInt(send,sysStagemap.getStatus());
this.writeInt(send,sysStagemap.getTimes());
this.writeInt(send,sysStagemap.getVitality());
this.writeInt(send,sysStagemap.getMapType());
this.writeInt(send,sysStagemap.getWinCondition());
this.writeInt(send,sysStagemap.getBeforeId());
this.writeInt(send,sysStagemap.getStageGold());
this.writeInt(send,sysStagemap.getStageExp());
this.writeUTF(send,sysStagemap.getCollect());
this.writeUTF(send,sysStagemap.getMonsterGroups());
this.writeUTF(send,sysStagemap.getDropItem());
this.writeInt(send,sysStagemap.getBgMusic());
this.writeInt(send,sysStagemap.getFirstAward());
this.writeInt(send,sysStagemap.getBattleInWinstory());
this.writeInt(send,sysStagemap.getNpcDamagescale());
this.writeInt(send,sysStagemap.getNpcHealthscale());
this.writeUTF(send,sysStagemap.getDescription());
sysStagemap
SysStagemap
SysStagemapMapper
select * from sys_stagemap
insert into  sys_stagemap set 
update sys_stagemap set where 
delete from sys_stagemap where 
id=#{id},name=#{name},image=#{image},sceneImage=#{sceneImage},status=#{status},times=#{times},vitality=#{vitality},mapType=#{mapType},winCondition=#{winCondition},beforeId=#{beforeId},stageGold=#{stageGold},stageExp=#{stageExp},collect=#{collect},monsterGroups=#{monsterGroups},dropItem=#{dropItem},bgMusic=#{bgMusic},firstAward=#{firstAward},battleInWinstory=#{battleInWinstory},npcDamagescale=#{npcDamagescale},npcHealthscale=#{npcHealthscale},description=#{description},
public List<SysStagemap> selectList();
public int insertOne(SysStagemap sysStagemap);
public int updateOne(SysStagemap sysStagemap);
---
HashMap<Integer,SysStagemap> sysStagemapMap = new HashMap<>();
List<SysStagemap> sysStagemapList = sysStagemapMapper.selectList();
for (SysStagemap sysStagemap : sysStagemapList) {
  sysStagemapMap.put(sysStagemap.getId(), sysStagemap);}
HashMap<Integer,SysStagemap> sysStagemapMap;
List<SysStagemap> sysStagemapList;
gameDatas.setSysStagemapList(sysStagemapList);
gameDatas.setSysStagemapMap(sysStagemapMap);
SysStagemapMapper sysStagemapMapper;
*/
TItems.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TItems {
	private int uid ;
	private int itemId ;
	private int num ;
	private int type ;
	private int itemType;
}
/*
t_items
private int uid ;
private int itemId ;
private int num ;
private int type ;
this.writeInt(send,tItems.getUid());
this.writeInt(send,tItems.getItemId());
this.writeInt(send,tItems.getNum());
this.writeInt(send,tItems.getType());
tItems
TItems
TItemsMapper
select * from t_items
insert into  t_items set 
update t_items set where 
delete from t_items where 
uid=#{uid},itemId=#{itemId},num=#{num},type=#{type},
public List<TItems> selectList();
public int insertOne(TItems tItems);
public int updateOne(TItems tItems);
>>> 
 */
TSeedandmet.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TSeedandmet {
	private int uid ;
	private int itemId ;
	private int type ;
	private int status ;
	private int lv =1;
	private int num ;
	private int cd ;
}

/*
t_seedandmet
private int uid ;
private int itemId ;
private int type ;
private int status ;
private int lv ;
private int num ;
private int cd ;
this.writeInt(send,tSeedandmet.getUid());
this.writeInt(send,tSeedandmet.getItemId());
this.writeInt(send,tSeedandmet.getType());
this.writeInt(send,tSeedandmet.getStatus());
this.writeInt(send,tSeedandmet.getLv());
this.writeInt(send,tSeedandmet.getNum());
this.writeInt(send,tSeedandmet.getCd());
tSeedandmet
TSeedandmet
TSeedandmetMapper
select * from t_seedandmet
insert into  t_seedandmet set 
update t_seedandmet set where 
delete from t_seedandmet where 
uid=#{uid},itemId=#{itemId},type=#{type},status=#{status},lv=#{lv},num=#{num},cd=#{cd},
public List<TSeedandmet> selectList();
public int insertOne(TSeedandmet tSeedandmet);
public int updateOne(TSeedandmet tSeedandmet);
*/
SysDraw.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysDraw {
	private int id ;
	private int drawType ;
	private int drawNumber ;
	private int drawRate ;
	private int drawCount ;
	private String drawTxt ;
}
/*
sys_draw
private int id ;
private int drawType ;
private int drawNumber ;
private int drawRate ;
private int drawCount ;
private String drawTxt ;
this.writeInt(send,sysDraw.getId());
this.writeInt(send,sysDraw.getDrawType());
this.writeInt(send,sysDraw.getDrawNumber());
this.writeInt(send,sysDraw.getDrawRate());
this.writeInt(send,sysDraw.getDrawCount());
this.writeUTF(send,sysDraw.getDrawTxt());
sysDraw
SysDraw
SysDrawMapper
select * from sys_draw
insert into  sys_draw set 
update sys_draw set where 
delete from sys_draw where 
id=#{id},drawType=#{drawType},drawNumber=#{drawNumber},drawRate=#{drawRate},drawCount=#{drawCount},drawTxt=#{drawTxt},
public List<SysDraw> selectList();
public int insertOne(SysDraw sysDraw);
public int updateOne(SysDraw sysDraw);
---
HashMap<Integer,SysDraw> sysDrawMap = new HashMap<>();
List<SysDraw> sysDrawList = sysDrawMapper.selectList();
for (SysDraw sysDraw : sysDrawList) {
  sysDrawMap.put(sysDraw.getId(), sysDraw);}
HashMap<Integer,SysDraw> sysDrawMap;
List<SysDraw> sysDrawList;
gameDatas.setSysDrawList(sysDrawList);
gameDatas.setSysDrawMap(sysDrawMap);
SysDrawMapper sysDrawMapper;
*/
TAction.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TAction {
	private int uid ;
	private int rollcd ;
	private int ulogin ;
	private int ulogout ;
	private int uplayt ;
	private int uplayg ;
	private int useed ;
	private int udmet ;
	private java.sql.Timestamp stime ;
	private int Item0 ;
	private int Item1 ;
	private int Item2 ;
	private int rcd0 ;
	private int rcd1 ;
	private int rcd2 ;
}
/*
t_action
private int uid ;
private int rollcd ;
private int ulogin ;
private int ulogout ;
private int uplayt ;
private int uplayg ;
private int useed ;
private int udmet ;
private int stime ;
private int Item0 ;
private int Item1 ;
private int Item2 ;
private int rcd0 ;
private int rcd1 ;
this.writeInt(send,tAction.getUid());
this.writeInt(send,tAction.getRollcd());
this.writeInt(send,tAction.getUlogin());
this.writeInt(send,tAction.getUlogout());
this.writeInt(send,tAction.getUplayt());
this.writeInt(send,tAction.getUplayg());
this.writeInt(send,tAction.getUseed());
this.writeInt(send,tAction.getUdmet());
this.writeInt(send,tAction.getStime());
this.writeInt(send,tAction.getItem0());
this.writeInt(send,tAction.getItem1());
this.writeInt(send,tAction.getItem2());
this.writeInt(send,tAction.getRcd0());
this.writeInt(send,tAction.getRcd1());
tAction
TAction
TActionMapper
select * from t_action
insert into  t_action set 
update t_action set where 
delete from t_action where 
uid=#{uid},rollcd=#{rollcd},ulogin=#{ulogin},ulogout=#{ulogout},uplayt=#{uplayt},uplayg=#{uplayg},useed=#{useed},udmet=#{udmet},stime=#{stime},Item0=#{Item0},Item1=#{Item1},Item2=#{Item2},rcd0=#{rcd0},rcd1=#{rcd1},
public List<TAction> selectList();
public int insertOne(TAction tAction);
public int updateOne(TAction tAction);
*/
SysRolelevel.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysRolelevel {
    private int id ;
    private int roleExp ;
    private int allExp;
    private SysSoil unlockSoil = null;
}
/*
sys_rolelevel
private int id ;
private int roleExp ;
sysRolelevel
SysRolelevel
SysRolelevelMapper
select * from sys_rolelevel
insert into  sys_rolelevel set
update sys_rolelevel set where
delete from sys_rolelevel where
id=#{id},roleExp=#{roleExp},
public List<SysRolelevel> selectList();
public int insertOne(SysRolelevel sysRolelevel);
public int updateOne(SysRolelevel sysRolelevel);
 */
TStagelog.java
package com.maoxiaolu.gamex1.dao.tables;

import java.util.HashSet;
import java.util.Set;

public class TStagelog {
	
	private int uid =0;
	private int mid =0;
	private String monsterLogs = "";
	private String itemsLogs = "";
	
	private  Set<String> mset_;// = new HashSet<>();
	private  Set<String> iset_;// = new HashSet<>();
	
	public int getUid() {
		return uid;
	}
	public void setUid(int uid) {
		this.uid = uid;
	}
	public int getMid() {
		return mid;
	}
	public void setMid(int mid) {
		this.mid = mid;
	}
	public String getMonsterLogs() {
		return monsterLogs;
	}
	public void setMonsterLogs(String monsterLogs) {
		this.monsterLogs = monsterLogs;
	}
	public String getItemsLogs() {
		return itemsLogs;
	}
	public void setItemsLogs(String itemsLogs) {
		this.itemsLogs = itemsLogs;
	}
	
	public void addMonster(int monsterid) {
		
		if(mset_==null) mset_ = new HashSet<>();
		
		if(!"".equals(this.monsterLogs)) {
			String[] arr = this.monsterLogs.split(",");
			for (int i = 0; i < arr.length; i++) {
				mset_.add(arr[i]);
			}
		}
		
		this.mset_.add(monsterid+"");
		this.monsterLogs = "";
		for (String string : mset_) {
			monsterLogs += string + ",";
		}
		
		if(monsterLogs.length()>0) {
			monsterLogs = monsterLogs.substring(0,monsterLogs.length()-1);
		}
	}
	
	public void addItemid(int itemid) {
		
		if(iset_==null) iset_ = new HashSet<>();
		
		if(!"".equals(this.itemsLogs)) {
			String[] arr = this.itemsLogs.split(",");
			for (int i = 0; i < arr.length; i++) {
				iset_.add(arr[i]);
			}
		}
		
		this.iset_.add(itemid+"");
		
		this.itemsLogs = "";
		for (String string : iset_) {
			itemsLogs += string + ",";
		}
		
		if(itemsLogs.length()>0) {
			itemsLogs = itemsLogs.substring(0,itemsLogs.length()-1);
		}
	}
	
	public Set<String> getMset() {
		return mset_;
	}

	public Set<String> getIset() {
		return iset_;
	}

	
}
/*
t_stagelog
private int uid ;
private int mid ;
private String monsterLogs ;
private String itemsLogs ;
this.writeInt(send,tStagelog.getUid());
this.writeInt(send,tStagelog.getMid());
this.writeUTF(send,tStagelog.getMonsterLogs());
this.writeUTF(send,tStagelog.getItemsLogs());
tStagelog
TStagelog
TStagelogMapper
select * from t_stagelog
insert into  t_stagelog set 
update t_stagelog set where 
delete from t_stagelog where 
uid=#{uid},mid=#{mid},monsterLogs=#{monsterLogs},itemsLogs=#{itemsLogs},
public List<TStagelog> selectList();
public int insertOne(TStagelog tStagelog);
public int updateOne(TStagelog tStagelog);
*/
UWxuser.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class UWxuser {
	private int id ;
	private String openid ;
	private String skey ;
	private String nickName ;
	private String avatarUrl ;
	private int gender ;
	private int lv ;
}
/*
u_wxuser
private int id ;
private String openid ;
private String skey ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
this.writeInt(send,uWxuser.getId());
this.writeUTF(send,uWxuser.getOpenid());
this.writeUTF(send,uWxuser.getSkey());
this.writeUTF(send,uWxuser.getNickName());
this.writeUTF(send,uWxuser.getAvatarUrl());
this.writeInt(send,uWxuser.getGender());
this.writeInt(send,uWxuser.getLv());
uWxuser
UWxuser
UWxuserMapper
select * from u_wxuser
insert into  u_wxuser set 
update u_wxuser set where 
delete from u_wxuser where 
id=#{id},openid=#{openid},skey=#{skey},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},
public List<UWxuser> selectList();
public int insertOne(UWxuser uWxuser);
public int updateOne(UWxuser uWxuser);
*/
TSoil.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TSoil {
	private int id ;
	private int uid ;
	private int endSecond ;
	private int itemid ;
	private int type =0;
	private int collect ;
}

/*
t_soil
private int id ;
private int uid ;
private int endSecond ;
private int itemid ;
private int type ;
private int collect ;
this.writeInt(send,tSoil.getId());
this.writeInt(send,tSoil.getUid());
this.writeInt(send,tSoil.getEndSecond());
this.writeInt(send,tSoil.getItemid());
this.writeInt(send,tSoil.getType());
this.writeInt(send,tSoil.getCollect());
tSoil
TSoil
TSoilMapper
select * from t_soil
insert into  t_soil set 
update t_soil set where 
delete from t_soil where 
id=#{id},uid=#{uid},endSecond=#{endSecond},itemid=#{itemid},type=#{type},collect=#{collect},
public List<TSoil> selectList();
public int insertOne(TSoil tSoil);
public int updateOne(TSoil tSoil);
*/
SysPlant.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysPlant {
	private int id ;
	private int plantId ;
}
/*
sys_plant
private int id ;
private int plantId ;
this.writeInt(send,sysPlant.getId());
this.writeInt(send,sysPlant.getPlantId());
sysPlant
SysPlant
SysPlantMapper
select * from sys_plant
insert into  sys_plant set 
update sys_plant set where 
delete from sys_plant where 
id=#{id},plantId=#{plantId},
public List<SysPlant> selectList();
public int insertOne(SysPlant sysPlant);
public int updateOne(SysPlant sysPlant);
>>> 
 */
DrawItem.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import lombok.Data;

@Data
public class DrawItem {
	
	private int rateLv;
	private int min;
	private int max;
	private int drawRate;
	
	private Object o;
}
RobotData.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import java.util.HashMap;

import com.maoxiaolu.gamex1.dao.tables.SysRobot;

import lombok.Data;

@Data
public class RobotData {
	HashMap<Integer,SysRobot> sysRobotMap = new HashMap<>();
	int robotid;
}
WeCat.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import lombok.Data;

@Data
public class WeCat {
	private String name  ;
	private String avata ;
	private int sex ;
	private String chat  ;
	private String time;
	private int uid;
}
NumItem.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import lombok.Data;

@Data
public class NumItem {
	private int itemid;
	private int num;
	
	/*
	public static void main(String args[]) throws Exception {
		String path = "/Users/hukun/Documents/gameGIT/GameX1/src/main/java/com/maoxiaolu/gamex1";
		//String path = "/D:/game01/GameX1/src/main/java/com/maoxiaolu/gamex1";
		//String path = "/C:/Users/hukun/Desktop/src";
		System.out.println("path " + path);
		File file = new File(path);
		show(file);
		
	}
	
	public static void show(File file) throws Exception {
		if( file.isDirectory() ) {
			File[] list = file.listFiles();
			for (File file2 : list) {
				show(file2);
			}
		}else {
			read(file);
		}
	}
	
	private static int k = 0 ;
	
	private static void read(File file) throws Exception {
		//System.out.println(file.getName());
		//
		int len = file.getName().length();
		if(len<4)return;
		String sname = file.getName().substring(len-3);
		//System.out.println(sname);
		//if(1>=0)return;
		if(!sname.toLowerCase().equals(".ts"))return;

		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		while(br.ready()) {
			String ss = br.readLine();
			if( ss.indexOf("import")<0 )
			System.out.println(k++ + " " + ss);
		}
		br.close();
	}
	*/
}
StageItem.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import lombok.Data;

@Data
public class StageItem {
	private int id;
	private int itemid;
	private int num;
	private int status;
}
PkRobot.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import lombok.Data;

@lombok.AllArgsConstructor
@Data
public class PkRobot {
	private int uid;
	private int atk;
	private int hp;
}
StarInfoArr.java
package com.maoxiaolu.gamex1.dao.tables.sub;

import java.util.ArrayList;
import java.util.List;
import com.maoxiaolu.gamex1.dao.tables.SysStarinfo;

import lombok.Data;

@Data
public class StarInfoArr {
	public StarInfoArr() {}
	public StarInfoArr(int mid) {this.mid=mid;}
	private int mid;
	private List<SysStarinfo> list = new ArrayList<>();
}
SysRobot.java
package com.maoxiaolu.gamex1.dao.tables;

import com.maoxiaolu.utils.maoutils.MyUtil;

public class SysRobot {
	
	private int id ;
	private String robotName ;
	private int robotLevel ;
	private int robotHp ;
	private int robotAttk ;
	private int attkCoefficient ;
	private int hpCoefficient ;
	private int robotUnlock ;
	private int robotGold ;
	private int robotDiamond ;
	private int levelCost ;
	private int levelCoefficient ;
	private String skillId ;
	
	private int[] skillIdArr;
	
	public int [] getSkillArr() {
		if(skillIdArr==null) {
			skillIdArr = MyUtil.Str2Ints(skillId);
		}
		return skillIdArr;
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getRobotName() {
		return robotName;
	}

	public void setRobotName(String robotName) {
		this.robotName = robotName;
	}

	public int getRobotLevel() {
		return robotLevel;
	}

	public void setRobotLevel(int robotLevel) {
		this.robotLevel = robotLevel;
	}

	public int getRobotHp() {
		return robotHp;
	}

	public void setRobotHp(int robotHp) {
		this.robotHp = robotHp;
	}

	public int getRobotAttk() {
		return robotAttk;
	}

	public void setRobotAttk(int robotAttk) {
		this.robotAttk = robotAttk;
	}

	public int getAttkCoefficient() {
		return attkCoefficient;
	}

	public void setAttkCoefficient(int attkCoefficient) {
		this.attkCoefficient = attkCoefficient;
	}

	public int getHpCoefficient() {
		return hpCoefficient;
	}

	public void setHpCoefficient(int hpCoefficient) {
		this.hpCoefficient = hpCoefficient;
	}

	public int getRobotUnlock() {
		return robotUnlock;
	}

	public void setRobotUnlock(int robotUnlock) {
		this.robotUnlock = robotUnlock;
	}

	public int getRobotGold() {
		return robotGold;
	}

	public void setRobotGold(int robotGold) {
		this.robotGold = robotGold;
	}

	public int getRobotDiamond() {
		return robotDiamond;
	}

	public void setRobotDiamond(int robotDiamond) {
		this.robotDiamond = robotDiamond;
	}

	public int getLevelCost() {
		return levelCost;
	}

	public void setLevelCost(int levelCost) {
		this.levelCost = levelCost;
	}

	public int getLevelCoefficient() {
		return levelCoefficient;
	}

	public void setLevelCoefficient(int levelCoefficient) {
		this.levelCoefficient = levelCoefficient;
	}

	public String getSkillId() {
		return skillId;
	}

	public void setSkillId(String skillId) {
		this.skillId = skillId;
		skillIdArr = MyUtil.Str2Ints(skillId);
	}
}
/*
sys_robot
private int id ;
private String robotName ;
private int robotLevel ;
private int robotHp ;
private int robotAttk ;
private int attkCoefficient ;
private int hpCoefficient ;
private int robotUnlock ;
private int robotGold ;
private int robotDiamond ;
private int levelCost ;
private int levelCoefficient ;
private String skillId ;
this.writeInt(send,sysRobot.getId());
this.writeUTF(send,sysRobot.getRobotName());
this.writeInt(send,sysRobot.getRobotLevel());
this.writeInt(send,sysRobot.getRobotHp());
this.writeInt(send,sysRobot.getRobotAttk());
this.writeInt(send,sysRobot.getAttkCoefficient());
this.writeInt(send,sysRobot.getHpCoefficient());
this.writeInt(send,sysRobot.getRobotUnlock());
this.writeInt(send,sysRobot.getRobotGold());
this.writeInt(send,sysRobot.getRobotDiamond());
this.writeInt(send,sysRobot.getLevelCost());
this.writeInt(send,sysRobot.getLevelCoefficient());
this.writeUTF(send,sysRobot.getSkillId());
sysRobot
SysRobot
SysRobotMapper
select * from sys_robot
insert into  sys_robot set 
update sys_robot set where 
delete from sys_robot where 
id=#{id},robotName=#{robotName},robotLevel=#{robotLevel},robotHp=#{robotHp},robotAttk=#{robotAttk},attkCoefficient=#{attkCoefficient},hpCoefficient=#{hpCoefficient},robotUnlock=#{robotUnlock},robotGold=#{robotGold},robotDiamond=#{robotDiamond},levelCost=#{levelCost},levelCoefficient=#{levelCoefficient},skillId=#{skillId},
public List<SysRobot> selectList();
public int insertOne(SysRobot sysRobot);
public int updateOne(SysRobot sysRobot);
---
HashMap<Integer,SysRobot> sysRobotMap = new HashMap<>();
List<SysRobot> sysRobotList = sysRobotMapper.selectList();
for (SysRobot sysRobot : sysRobotList) {
  sysRobotMap.put(sysRobot.getId(), sysRobot);}
HashMap<Integer,SysRobot> sysRobotMap;
List<SysRobot> sysRobotList;
gameDatas.setSysRobotList(sysRobotList);
gameDatas.setSysRobotMap(sysRobotMap);
SysRobotMapper sysRobotMapper;
*/
TRobot.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TRobot {
	private int uid ;
	private int rid ;
	private int lv ;
	private int isAc ;
	private String nikeName = "" ;
}
/*
t_robot
private int uid ;
private int rid ;
private int lv ;
private int isAc ;
private String nikeName ;
this.writeInt(send,tRobot.getUid());
this.writeInt(send,tRobot.getRid());
this.writeInt(send,tRobot.getLv());
this.writeInt(send,tRobot.getIsAc());
this.writeUTF(send,tRobot.getNikeName());
tRobot
TRobot
TRobotMapper
select * from t_robot
insert into  t_robot set 
update t_robot set where 
delete from t_robot where 
uid=#{uid},rid=#{rid},lv=#{lv},isAc=#{isAc},nikeName=#{nikeName},
public List<TRobot> selectList();
public int insertOne(TRobot tRobot);
public int updateOne(TRobot tRobot);
*/
TUser.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TUser {
	private int id ;
	private String skey ;
	private String nickName ;
	private String avatarUrl ;
	private int gender ;
	private int lv ;
	private int exp ;
	private int gold ;
	private int diamonds ;
	private int vip ;
}
/*
Android  12:10:18
t_user
private int id ;
private String skey ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
private int exp ;
private int gold ;
private int diamonds ;
private int vip ;
tUser
TUser
TUserMapper
select * from t_user
insert into  t_user set 
update t_user set where 
delete from t_user where 
id=#{id},skey=#{skey},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},exp=#{exp},gold=#{gold},diamonds=#{diamonds},vip=#{vip},
public List<TUser> selectList();
public int insertOne(TUser tUser);
public int updateOne(TUser tUser);
*/
SysIteam.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysIteam {
	private int id ;
	private String name ;
	private int type ;
	private String subType ;
	private int iteamUnlock ;
	private int useLevel ;
	private int iteamList ;
	private int iteamCd ;
	private int collectExp ;
	private int collectGold ;
	private int collectNum ;
	private int buyGod ;
	private int buyDiamond ;
	private int sellPrice ;
	private String iteamTxt ;
	private int levelDiamond ;
	private int growDiamond ;
	private int seedType ;
	private int dnaNum ;
	private int dnaTime ;
	private int dnaNumadd ;
	private int dnaTimeadd ;
	private int collectNumadd ;
	private int dnaCost ;
	private int dnaCostadd ;
}
/*
sys_iteam
private int id ;
private String name ;
private int type ;
private String subType ;
private int iteamUnlock ;
private int useLevel ;
private int iteamList ;
private int iteamCd ;
private int collectExp ;
private int collectGold ;
private int collectNum ;
private int buyGod ;
private int buyDiamond ;
private int sellPrice ;
private String iteamTxt ;
private int levelDiamond ;
private int growDiamond ;
private int seedType ;
private int dnaNum ;
private int dnaTime ;
private int dnaNumadd ;
private int dnaTimeadd ;
private int collectNumadd ;
private int dnaCost ;
private int dnaCostadd ;
this.writeInt(send,sysIteam.getId());
this.writeUTF(send,sysIteam.getName());
this.writeInt(send,sysIteam.getType());
this.writeUTF(send,sysIteam.getSubType());
this.writeInt(send,sysIteam.getIteamUnlock());
this.writeInt(send,sysIteam.getUseLevel());
this.writeInt(send,sysIteam.getIteamList());
this.writeInt(send,sysIteam.getIteamCd());
this.writeInt(send,sysIteam.getCollectExp());
this.writeInt(send,sysIteam.getCollectGold());
this.writeInt(send,sysIteam.getCollectNum());
this.writeInt(send,sysIteam.getBuyGod());
this.writeInt(send,sysIteam.getBuyDiamond());
this.writeInt(send,sysIteam.getSellPrice());
this.writeUTF(send,sysIteam.getIteamTxt());
this.writeInt(send,sysIteam.getLevelDiamond());
this.writeInt(send,sysIteam.getGrowDiamond());
this.writeInt(send,sysIteam.getSeedType());
this.writeInt(send,sysIteam.getDnaNum());
this.writeInt(send,sysIteam.getDnaTime());
this.writeInt(send,sysIteam.getDnaNumadd());
this.writeInt(send,sysIteam.getDnaTimeadd());
this.writeInt(send,sysIteam.getCollectNumadd());
this.writeInt(send,sysIteam.getDnaCost());
this.writeInt(send,sysIteam.getDnaCostadd());
sysIteam
SysIteam
SysIteamMapper
select * from sys_iteam
insert into  sys_iteam set 
update sys_iteam set where 
delete from sys_iteam where 
id=#{id},name=#{name},type=#{type},subType=#{subType},iteamUnlock=#{iteamUnlock},useLevel=#{useLevel},iteamList=#{iteamList},iteamCd=#{iteamCd},collectExp=#{collectExp},collectGold=#{collectGold},collectNum=#{collectNum},buyGod=#{buyGod},buyDiamond=#{buyDiamond},sellPrice=#{sellPrice},iteamTxt=#{iteamTxt},levelDiamond=#{levelDiamond},growDiamond=#{growDiamond},seedType=#{seedType},dnaNum=#{dnaNum},dnaTime=#{dnaTime},dnaNumadd=#{dnaNumadd},dnaTimeadd=#{dnaTimeadd},collectNumadd=#{collectNumadd},dnaCost=#{dnaCost},dnaCostadd=#{dnaCostadd},
public List<SysIteam> selectList();
public int insertOne(SysIteam sysIteam);
public int updateOne(SysIteam sysIteam);
---
HashMap<Integer,SysIteam> sysIteamMap = new HashMap<>();
List<SysIteam> sysIteamList = sysIteamMapper.selectList();
for (SysIteam sysIteam : sysIteamList) {
  sysIteamMap.put(sysIteam.getId(), sysIteam);}
HashMap<Integer,SysIteam> sysIteamMap;
List<SysIteam> sysIteamList;
gameDatas.setSysIteamList(sysIteamList);
gameDatas.setSysIteamMap(sysIteamMap);
SysIteamMapper sysIteamMapper;
*/
TStagemap.java
package com.maoxiaolu.gamex1.dao.tables;

import com.maoxiaolu.gamex1.dao.tables.sub.StageItem;

public class TStagemap {
	
	private int uid ;
	private int mid ;
	private int status ;
	private String mapvalue ;
	
	public int getUid() {
		return uid;
	}
	public void setUid(int uid) {
		this.uid = uid;
	}
	public int getMid() {
		return mid;
	}
	public void setMid(int mid) {
		this.mid = mid;
	}
	public int getStatus() {
		return status;
	}
	public void setStatus(int status) {
		this.status = status;
	}
	public String getMapvalue() {
		return mapvalue;
	}
	public void setMapvalue(String mapvalue) {
		this.mapvalue = mapvalue;
		if("0".equals(this.mapvalue))return;
		this.str2arr();
	}
	
	public boolean setStatus(int index ,int value) {
		if(value<0 || items==null || value>=items.length) return false;
		items[index].setStatus(value);
		this.mapvalue = "";
		for (int i = 0; i < items.length; i++) {
			StageItem item = items[i];
			mapvalue += item.getId() + ",";
			mapvalue += item.getItemid()+ ",";
			mapvalue += item.getNum() + ",";
			mapvalue += item.getStatus() + ",";
		}
		mapvalue = mapvalue.substring(0,mapvalue.length()-1);
		return true;
	}
	
	private StageItem[] items;
	
	public StageItem[] getItems() {
		return this.items;
	}
	
	public void str2arr() {
		String[] arr = this.mapvalue.split(",");
		if(items==null || items.length!=arr.length/4) {
			items = new StageItem[arr.length/4];
			for (int i = 0; i < items.length; i++) {
				items[i] = new StageItem();
			}
		}
		
		int k = 0;
		for (int i = 0; i < items.length; i++) {
			StageItem item = items[i];
			item.setId(Integer.parseInt(arr[k++]));//0 采集物 / monsterid 怪物ID
			item.setItemid(Integer.parseInt(arr[k++]));//采集/掉落 物品ID
			item.setNum(Integer.parseInt(arr[k++]));//物品数量
			item.setStatus(Integer.parseInt(arr[k++]));//0正常 1已经收集
		}
	}
}
/*
t_stagemap
private int uid ;
private int mid ;
private int status ;
private String mapvalue ;
this.writeInt(send,tStagemap.getUid());
this.writeInt(send,tStagemap.getMid());
this.writeInt(send,tStagemap.getStatus());
this.writeUTF(send,tStagemap.getMapvalue());
tStagemap
TStagemap
TStagemapMapper
select * from t_stagemap
insert into  t_stagemap set 
update t_stagemap set where 
delete from t_stagemap where 
uid=#{uid},mid=#{mid},status=#{status},mapvalue=#{mapvalue},
public List<TStagemap> selectList();
public int insertOne(TStagemap tStagemap);
public int updateOne(TStagemap tStagemap);
*/
SysEnemy.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysEnemy {
	private int id ;
	private int enemyLevel ;
	private String enemyName ;
	private int enemyHp ;
	private int enemyAttk ;
}
/*
sys_enemy
private int id ;
private int enemyLevel ;
private String enemyName ;
private int enemyHp ;
private int enemyAttk ;
this.writeInt(send,sysEnemy.getId());
this.writeInt(send,sysEnemy.getEnemyLevel());
this.writeUTF(send,sysEnemy.getEnemyName());
this.writeInt(send,sysEnemy.getEnemyHp());
this.writeInt(send,sysEnemy.getEnemyAttk());
sysEnemy
SysEnemy
SysEnemyMapper
select * from sys_enemy
insert into  sys_enemy set 
update sys_enemy set where 
delete from sys_enemy where 
id=#{id},enemyLevel=#{enemyLevel},enemyName=#{enemyName},enemyHp=#{enemyHp},enemyAttk=#{enemyAttk},
public List<SysEnemy> selectList();
public int insertOne(SysEnemy sysEnemy);
public int updateOne(SysEnemy sysEnemy);
---
HashMap<Integer,SysEnemy> sysEnemyMap = new HashMap<>();
List<SysEnemy> sysEnemyList = sysEnemyMapper.selectList();
for (SysEnemy sysEnemy : sysEnemyList) {
  sysEnemyMap.put(sysEnemy.getId(), sysEnemy);}
HashMap<Integer,SysEnemy> sysEnemyMap;
List<SysEnemy> sysEnemyList;
gameDatas.setSysEnemyList(sysEnemyList);
gameDatas.setSysEnemyMap(sysEnemyMap);
SysEnemyMapper sysEnemyMapper;
*/
TFriends.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TFriends {
	private int uid ;
	private int fid ;
	private int num ;
//	private Timestamp etime ;
//	private Timestamp ctime ;
	private String nickName ;
	private String avatarUrl ;
	private int gender ;
}
/*
t_friends
private int uid ;
private int fid ;
private int num ;
private int etime ;
private int ctime ;
private String nickName ;
private String avatarUrl ;
private int gender ;
this.writeInt(send,tFriends.getUid());
this.writeInt(send,tFriends.getFid());
this.writeInt(send,tFriends.getNum());
this.writeInt(send,tFriends.getEtime());
this.writeInt(send,tFriends.getCtime());
this.writeUTF(send,tFriends.getNickName());
this.writeUTF(send,tFriends.getAvatarUrl());
this.writeInt(send,tFriends.getGender());
tFriends
TFriends
TFriendsMapper
select * from t_friends
insert into  t_friends set 
update t_friends set where 
delete from t_friends where 
uid=#{uid},fid=#{fid},num=#{num},etime=#{etime},ctime=#{ctime},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},
public List<TFriends> selectList();
public int insertOne(TFriends tFriends);
public int updateOne(TFriends tFriends);
*/
SysEveryday.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysEveryday {
	private int id ;
	private int iteamList ;
	private String dropID ;
}
/*
sys_everyday
private int id ;
private int iteamList ;
private String dropID ;
this.writeInt(send,sysEveryday.getId());
this.writeInt(send,sysEveryday.getIteamList());
this.writeUTF(send,sysEveryday.getDropID());
sysEveryday
SysEveryday
SysEverydayMapper
select * from sys_everyday
insert into  sys_everyday set 
update sys_everyday set where 
delete from sys_everyday where 
id=#{id},iteamList=#{iteamList},dropID=#{dropID},
public List<SysEveryday> selectList();
public int insertOne(SysEveryday sysEveryday);
public int updateOne(SysEveryday sysEveryday);
---
HashMap<Integer,SysEveryday> sysEverydayMap = new HashMap<>();
List<SysEveryday> sysEverydayList = sysEverydayMapper.selectList();
for (SysEveryday sysEveryday : sysEverydayList) {
  sysEverydayMap.put(sysEveryday.getId(), sysEveryday);}
HashMap<Integer,SysEveryday> sysEverydayMap;
List<SysEveryday> sysEverydayList;
gameDatas.setSysEverydayList(sysEverydayList);
gameDatas.setSysEverydayMap(sysEverydayMap);
SysEverydayMapper sysEverydayMapper;
*/
TGuide.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TGuide {
	private int uid ;
	private int type ;
	private String gameText ;
}
/*
t_guide
private int uid ;
private int type ;
private String gameText ;
this.writeInt(send,tGuide.getUid());
this.writeInt(send,tGuide.getType());
this.writeUTF(send,tGuide.getGameText());
tGuide
TGuide
TGuideMapper
select * from t_guide
insert into  t_guide set 
update t_guide set where 
delete from t_guide where 
uid=#{uid},type=#{type},gameText=#{gameText},
public List<TGuide> selectList();
public int insertOne(TGuide tGuide);
public int updateOne(TGuide tGuide);
*/
SysSoil.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysSoil {
    private int id ;
    private int soilType ;
    private int unlockType ;
    private int roleLevel ;
    private int gold ;
    private int diamond ;
}
/*
sys_soil
private int id ;
private int soilType ;
private int unlockType ;
private int roleLevel ;
private int gold ;
private int diamond ;
sysSoil
SysSoil
SysSoilMapper
select * from sys_soil
insert into  sys_soil set
update sys_soil set where
delete from sys_soil where
id=#{id},soilType=#{soilType},unlockType=#{unlockType},roleLevel=#{roleLevel},gold=#{gold},diamond=#{diamond},
public List<SysSoil> selectList();
public int insertOne(SysSoil sysSoil);
public int updateOne(SysSoil sysSoil);
 */
TBattle.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class TBattle {
	private int id ;
	private int uid ;
	private int eid ;
	private String battle ;
	private int goldEx ;
	private java.sql.Timestamp ctime ;
	private String unickName ;
	private String uavatarUrl ;
	private int ugender ;
	private int ulv ;
	private String enickName ;
	private String eavatarUrl ;
	private int egender ;
	private int elv ;
	private int showid ;
}
/*
t_battle
private int id ;
private int uid ;
private int eid ;
private String battle ;
private int goldEx ;
private int ctime ;
private String unickName ;
private String uavatarUrl ;
private int ugender ;
private int ulv ;
private String enickName ;
private String eavatarUrl ;
private int egender ;
private int elv ;
private int showid ;
this.writeInt(send,tBattle.getId());
this.writeInt(send,tBattle.getUid());
this.writeInt(send,tBattle.getEid());
this.writeUTF(send,tBattle.getBattle());
this.writeInt(send,tBattle.getGoldEx());
this.writeInt(send,tBattle.getCtime());
this.writeUTF(send,tBattle.getUnickName());
this.writeUTF(send,tBattle.getUavatarUrl());
this.writeInt(send,tBattle.getUgender());
this.writeInt(send,tBattle.getUlv());
this.writeUTF(send,tBattle.getEnickName());
this.writeUTF(send,tBattle.getEavatarUrl());
this.writeInt(send,tBattle.getEgender());
this.writeInt(send,tBattle.getElv());
this.writeInt(send,tBattle.getShowid());
tBattle
TBattle
TBattleMapper
select * from t_battle
insert into  t_battle set 
update t_battle set where 
delete from t_battle where 
id=#{id},uid=#{uid},eid=#{eid},battle=#{battle},goldEx=#{goldEx},ctime=#{ctime},unickName=#{unickName},uavatarUrl=#{uavatarUrl},ugender=#{ugender},ulv=#{ulv},enickName=#{enickName},eavatarUrl=#{eavatarUrl},egender=#{egender},elv=#{elv},showid=#{showid},
public List<TBattle> selectList();
public int insertOne(TBattle tBattle);
public int updateOne(TBattle tBattle);
*/
SysFactorybase.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysFactorybase {
	private int id ;
	private int unlocklevel ;
	private int factoryTime ;
	private int growFactory ;
	private int levelTime ;
	private int growTime ;
	private int levelGold ;
	private int growGold ;
	private int levelDiamond ;
	private int growDiamond ;
}
/*
sys_factoryBase

this.writeInt(send,sysFactorybase.getId());
this.writeInt(send,sysFactorybase.getUnlocklevel());
this.writeInt(send,sysFactorybase.getFactoryTime());
this.writeInt(send,sysFactorybase.getGrowFactory());
this.writeInt(send,sysFactorybase.getLevelTime());
this.writeInt(send,sysFactorybase.getGrowTime());
this.writeInt(send,sysFactorybase.getLevelGold());
this.writeInt(send,sysFactorybase.getGrowGold());
this.writeInt(send,sysFactorybase.getLevelDiamond());
this.writeInt(send,sysFactorybase.getGrowDiamond());
sysFactorybase
SysFactorybase
SysFactorybaseMapper
select * from sys_factoryBase
insert into  sys_factoryBase set 
update sys_factoryBase set where 
delete from sys_factoryBase where 
id=#{id},unlocklevel=#{unlocklevel},factoryTime=#{factoryTime},growFactory=#{growFactory},levelTime=#{levelTime},growTime=#{growTime},levelGold=#{levelGold},growGold=#{growGold},levelDiamond=#{levelDiamond},growDiamond=#{growDiamond},
public List<SysFactorybase> selectList();
public int insertOne(SysFactorybase sysFactorybase);
public int updateOne(SysFactorybase sysFactorybase);
---
HashMap<Integer,SysFactorybase> sysFactorybaseMap = new HashMap<>();
List<SysFactorybase> sysFactorybaseList = sysFactorybaseMapper.selectList();
for (SysFactorybase sysFactorybase : sysFactorybaseList) {
  sysFactorybaseMap.put(sysFactorybase.getId(), sysFactorybase);}
HashMap<Integer,SysFactorybase> sysFactorybaseMap;
List<SysFactorybase> sysFactorybaseList;
gameDatas.setSysFactorybaseList(sysFactorybaseList);
gameDatas.setSysFactorybaseMap(sysFactorybaseMap);
SysFactorybaseMapper sysFactorybaseMapper;
*/
SysSkill.java
package com.maoxiaolu.gamex1.dao.tables;

import lombok.Data;

@Data
public class SysSkill {
	private int id ;
	private String skillName ;
	private String skillDescription ;
	private int skillStatus ;
	private int skillCoefficient ;
}
/*
sys_skill
private int id ;
private String skillName ;
private String skillDescription ;
private int skillStatus ;
private int skillCoefficient ;
this.writeInt(send,sysSkill.getId());
this.writeUTF(send,sysSkill.getSkillName());
this.writeUTF(send,sysSkill.getSkillDescription());
this.writeInt(send,sysSkill.getSkillStatus());
this.writeInt(send,sysSkill.getSkillCoefficient());
sysSkill
SysSkill
SysSkillMapper
select * from sys_skill
insert into  sys_skill set 
update sys_skill set where 
delete from sys_skill where 
id=#{id},skillName=#{skillName},skillDescription=#{skillDescription},skillStatus=#{skillStatus},skillCoefficient=#{skillCoefficient},
public List<SysSkill> selectList();
public int insertOne(SysSkill sysSkill);
public int updateOne(SysSkill sysSkill);
---
HashMap<Integer,SysSkill> sysSkillMap = new HashMap<>();
List<SysSkill> sysSkillList = sysSkillMapper.selectList();
for (SysSkill sysSkill : sysSkillList) {
  sysSkillMap.put(sysSkill.getId(), sysSkill);}
HashMap<Integer,SysSkill> sysSkillMap;
List<SysSkill> sysSkillList;
gameDatas.setSysSkillList(sysSkillList);
gameDatas.setSysSkillMap(sysSkillMap);
SysSkillMapper sysSkillMapper;
*/
TUserMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TUser;

public interface TUserMapper {
	
	@Select("select * from t_user where id=#{id}")
	public TUser selectOne_(int id);
	
	@Insert("insert into  t_user set id=#{id},skey=#{skey},lv=1")
	public int insertOne(int id , String skey);
	
	@Update("update t_user set nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},exp=#{exp},gold=#{gold},diamonds=#{diamonds},vip=#{vip} where id=#{id}")
	public int updateOne(TUser tUser);
	
}
/*
Android  12:10:18
t_user
private int id ;
private String skey ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
private int exp ;
private int gold ;
private int diamonds ;
private int vip ;
tUser
TUser
TUserMapper
select * from t_user
insert into  t_user set 
update t_user set where 
delete from t_user where 
id=#{id},skey=#{skey},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},exp=#{exp},gold=#{gold},diamonds=#{diamonds},vip=#{vip},
public List<TUser> selectList();
public int insertOne(TUser tUser);
public int updateOne(TUser tUser);
*/
SysCardMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.utils.maoutils.game01.SysCard;

public interface SysCardMapper {
	@Select("select * from sys_card")
	public List<SysCard> selectList();
}
/*
sys_card
private int id ;
private String name ;
private String begin ;
private String end ;
private int useType ;
private int cardNum ;
private int price ;
this.writeInt(send,sysCard.getId());
this.writeUTF(send,sysCard.getName());
this.writeUTF(send,sysCard.getBegin());
this.writeUTF(send,sysCard.getEnd());
this.writeInt(send,sysCard.getUseType());
this.writeInt(send,sysCard.getCardNum());
this.writeInt(send,sysCard.getPrice());
sysCard
SysCard
SysCardMapper
select * from sys_card
insert into  sys_card set 
update sys_card set where 
delete from sys_card where 
id=#{id},name=#{name},begin=#{begin},end=#{end},useType=#{useType},cardNum=#{cardNum},price=#{price},
public List<SysCard> selectList();
public int insertOne(SysCard sysCard);
public int updateOne(SysCard sysCard);
---
HashMap<Integer,SysCard> sysCardMap = new HashMap<>();
List<SysCard> sysCardList = sysCardMapper.selectList();
for (SysCard sysCard : sysCardList) {
  sysCardMap.put(sysCard.getId(), sysCard);}
HashMap<Integer,SysCard> sysCardMap;
List<SysCard> sysCardList;
gameDatas.setSysCardList(sysCardList);
gameDatas.setSysCardMap(sysCardMap);
SysCardMapper sysCardMapper;
*/
SysFactorybaseMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysFactorybase;

public interface SysFactorybaseMapper {
	@Select("select * from sys_factoryBase")
	public List<SysFactorybase> selectList();
}
/*
sys_factoryBase

this.writeInt(send,sysFactorybase.getId());
this.writeInt(send,sysFactorybase.getUnlocklevel());
this.writeInt(send,sysFactorybase.getFactoryTime());
this.writeInt(send,sysFactorybase.getGrowFactory());
this.writeInt(send,sysFactorybase.getLevelTime());
this.writeInt(send,sysFactorybase.getGrowTime());
this.writeInt(send,sysFactorybase.getLevelGold());
this.writeInt(send,sysFactorybase.getGrowGold());
this.writeInt(send,sysFactorybase.getLevelDiamond());
this.writeInt(send,sysFactorybase.getGrowDiamond());
sysFactorybase
SysFactorybase
SysFactorybaseMapper
select * from sys_factoryBase
insert into  sys_factoryBase set 
update sys_factoryBase set where 
delete from sys_factoryBase where 
id=#{id},unlocklevel=#{unlocklevel},factoryTime=#{factoryTime},growFactory=#{growFactory},levelTime=#{levelTime},growTime=#{growTime},levelGold=#{levelGold},growGold=#{growGold},levelDiamond=#{levelDiamond},growDiamond=#{growDiamond},
public List<SysFactorybase> selectList();
public int insertOne(SysFactorybase sysFactorybase);
public int updateOne(SysFactorybase sysFactorybase);
---
HashMap<Integer,SysFactorybase> sysFactorybaseMap = new HashMap<>();
List<SysFactorybase> sysFactorybaseList = sysFactorybaseMapper.selectList();
for (SysFactorybase sysFactorybase : sysFactorybaseList) {
  sysFactorybaseMap.put(sysFactorybase.getId(), sysFactorybase);}
HashMap<Integer,SysFactorybase> sysFactorybaseMap;
List<SysFactorybase> sysFactorybaseList;
gameDatas.setSysFactorybaseList(sysFactorybaseList);
gameDatas.setSysFactorybaseMap(sysFactorybaseMap);
SysFactorybaseMapper sysFactorybaseMapper;
*/
TAddcardsMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.utils.maoutils.game01.TAddcards;

public interface TAddcardsMapper {
	@Insert("insert into  t_addcards set "
			+ "usercode=#{usercode},itemid=#{itemid},"
			+ "num=#{num},proid=#{proid}")
	public int insertOne(TAddcards tAddcards);
	
	@Select("select * from t_addcards where usercode=#{usercode} and gameid='0' ")
	public TAddcards selectByUsercode(String usercode);
	
	@Select("select * from t_addcards where usercode=#{usercode}")
	public TAddcards selectCard(String usercode);
	
	@Update("update t_addcards set gameid=#{gameid} where id=#{id}")
	public int updateGameid(TAddcards tAddcards);
}
/*
t_addcards
private String usercode ;
private int id ;
private int itemid ;
private int num ;
private int gameid ;
private int proid ;
this.writeUTF(send,tAddcards.getUsercode());
this.writeInt(send,tAddcards.getId());
this.writeInt(send,tAddcards.getItemid());
this.writeInt(send,tAddcards.getNum());
this.writeInt(send,tAddcards.getGameid());
this.writeInt(send,tAddcards.getProid());
tAddcards
TAddcards
TAddcardsMapper
select * from t_addcards
insert into  t_addcards set 
update t_addcards set where 
delete from t_addcards where 
usercode=#{usercode},id=#{id},itemid=#{itemid},num=#{num},gameid=#{gameid},proid=#{proid},
public List<TAddcards> selectList();
public int insertOne(TAddcards tAddcards);
public int updateOne(TAddcards tAddcards);
*/
SysEverydayMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysEveryday;

public interface SysEverydayMapper {
	@Select("select * from sys_everyday order by id")
	public List<SysEveryday> selectList();
}
/*
sys_everyday
private int id ;
private int iteamList ;
private String dropID ;
this.writeInt(send,sysEveryday.getId());
this.writeInt(send,sysEveryday.getIteamList());
this.writeUTF(send,sysEveryday.getDropID());
sysEveryday
SysEveryday
SysEverydayMapper
select * from sys_everyday
insert into  sys_everyday set 
update sys_everyday set where 
delete from sys_everyday where 
id=#{id},iteamList=#{iteamList},dropID=#{dropID},
public List<SysEveryday> selectList();
public int insertOne(SysEveryday sysEveryday);
public int updateOne(SysEveryday sysEveryday);
---
HashMap<Integer,SysEveryday> sysEverydayMap = new HashMap<>();
List<SysEveryday> sysEverydayList = sysEverydayMapper.selectList();
for (SysEveryday sysEveryday : sysEverydayList) {
  sysEverydayMap.put(sysEveryday.getId(), sysEveryday);}
HashMap<Integer,SysEveryday> sysEverydayMap;
List<SysEveryday> sysEverydayList;
gameDatas.setSysEverydayList(sysEverydayList);
gameDatas.setSysEverydayMap(sysEverydayMap);
SysEverydayMapper sysEverydayMapper;
*/
SysSkillMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysSkill;

public interface SysSkillMapper {
	@Select("select * from sys_skill")
	public List<SysSkill> selectList();
}
/*
sys_skill
private int id ;
private String skillName ;
private String skillDescription ;
private int skillStatus ;
private int skillCoefficient ;
this.writeInt(send,sysSkill.getId());
this.writeUTF(send,sysSkill.getSkillName());
this.writeUTF(send,sysSkill.getSkillDescription());
this.writeInt(send,sysSkill.getSkillStatus());
this.writeInt(send,sysSkill.getSkillCoefficient());
sysSkill
SysSkill
SysSkillMapper
select * from sys_skill
insert into  sys_skill set 
update sys_skill set where 
delete from sys_skill where 
id=#{id},skillName=#{skillName},skillDescription=#{skillDescription},skillStatus=#{skillStatus},skillCoefficient=#{skillCoefficient},
public List<SysSkill> selectList();
public int insertOne(SysSkill sysSkill);
public int updateOne(SysSkill sysSkill);
---
HashMap<Integer,SysSkill> sysSkillMap = new HashMap<>();
List<SysSkill> sysSkillList = sysSkillMapper.selectList();
for (SysSkill sysSkill : sysSkillList) {
  sysSkillMap.put(sysSkill.getId(), sysSkill);}
HashMap<Integer,SysSkill> sysSkillMap;
List<SysSkill> sysSkillList;
gameDatas.setSysSkillList(sysSkillList);
gameDatas.setSysSkillMap(sysSkillMap);
SysSkillMapper sysSkillMapper;
*/
TSoilMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TSoil;

public interface TSoilMapper {
	@Select("select * from t_soil where uid=#{uid}")
	public List<TSoil> selectList(int uid);
	
	@Select("select * from t_soil where uid=#{uid} and id=#{id}")
	public TSoil selectOne(int uid,int id);
	
	
	@Insert("insert into  t_soil set id=#{id},uid=#{uid},endSecond=#{endSecond},itemid=#{itemid}")
	public int insertOne(TSoil tSoil);
	
	@Update("update t_soil set collect=#{collect} ,endSecond=#{endSecond},itemid=#{itemid} where uid=#{uid} and id=#{id} ")
	public int updateOne(TSoil tSoil);
}

/*
t_soil
private int id ;
private int uid ;
private int endSecond ;
private int itemid ;
private int type ;
private int collect ;
this.writeInt(send,tSoil.getId());
this.writeInt(send,tSoil.getUid());
this.writeInt(send,tSoil.getEndSecond());
this.writeInt(send,tSoil.getItemid());
this.writeInt(send,tSoil.getType());
this.writeInt(send,tSoil.getCollect());
tSoil
TSoil
TSoilMapper
select * from t_soil
insert into  t_soil set 
update t_soil set where 
delete from t_soil where 
id=#{id},uid=#{uid},endSecond=#{endSecond},itemid=#{itemid},type=#{type},collect=#{collect},
public List<TSoil> selectList();
public int insertOne(TSoil tSoil);
public int updateOne(TSoil tSoil);
*/
TGuideMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TGuide;

public interface TGuideMapper {
	@Select("select * from t_guide where uid=#{uid} and type=#{type}")
	public TGuide selectOne(int uid,int type);
	
	@Insert("insert into  t_guide set uid=#{uid},type=#{type}")
	public int insertOne(int uid,int type);
	
	@Update("update t_guide set gameText=#{gameText} where uid=#{uid} and type=#{type} ")
	public int updateOne(TGuide tGuide);
}
/*
t_guide
private int uid ;
private int type ;
private String gameText ;
this.writeInt(send,tGuide.getUid());
this.writeInt(send,tGuide.getType());
this.writeUTF(send,tGuide.getGameText());
tGuide
TGuide
TGuideMapper
select * from t_guide
insert into  t_guide set 
update t_guide set where 
delete from t_guide where 
uid=#{uid},type=#{type},gameText=#{gameText},
public List<TGuide> selectList();
public int insertOne(TGuide tGuide);
public int updateOne(TGuide tGuide);
*/
SysComposeMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysCompose;

public interface SysComposeMapper {
	@Select("select * from sys_compose")
	public List<SysCompose> selectList();
}
/*
sys_compose
private int id ;
private String meterial1 ;
private int item2 ;
private int meterialID ;
this.writeInt(send,sysCompose.getId());
this.writeUTF(send,sysCompose.getMeterial1());
this.writeInt(send,sysCompose.getItem2());
this.writeInt(send,sysCompose.getMeterialID());
sysCompose
SysCompose
SysComposeMapper
select * from sys_compose
insert into  sys_compose set 
update sys_compose set where 
delete from sys_compose where 
id=#{id},meterial1=#{meterial1},item2=#{item2},meterialID=#{meterialID},
public List<SysCompose> selectList();
public int insertOne(SysCompose sysCompose);
public int updateOne(SysCompose sysCompose);
---
HashMap<Integer,SysCompose> sysComposeMap = new HashMap<>();
List<SysCompose> sysComposeList = sysComposeMapper.selectList();
for (SysCompose sysCompose : sysComposeList) {
  sysComposeMap.put(sysCompose.getId(), sysCompose);}
HashMap<Integer,SysCompose> sysComposeMap;
List<SysCompose> sysComposeList;
gameDatas.setSysComposeList(sysComposeList);
gameDatas.setSysComposeMap(sysComposeMap);
SysComposeMapper sysComposeMapper;
*/
TSeedandmetMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TSeedandmet;

public interface TSeedandmetMapper {
	@Insert("insert into  t_seedandmet set uid=#{uid},itemId=#{itemId},type=#{type}")
	public int insertOne(TSeedandmet tSeed);
	
	@Select("select * from t_seedandmet where uid=#{uid} and (type=5 or type=6) order by itemId")
	public List<TSeedandmet> selectListByUid(int uid);
	
	@Select("select * from t_seedandmet where uid=#{uid} and itemId=#{itemId} and type=#{type}")
	public TSeedandmet selectOne(int uid , int itemId,int type);
	
	@Update("update t_seedandmet set lv=#{lv},num=#{num},cd=#{cd} where uid=#{uid} and itemId=#{itemId}")
	public int updateOne(TSeedandmet tSeed);
}

/*
t_seedandmet
private int uid ;
private int itemId ;
private int type ;
private int status ;
private int lv ;
private int num ;
private int cd ;
this.writeInt(send,tSeedandmet.getUid());
this.writeInt(send,tSeedandmet.getItemId());
this.writeInt(send,tSeedandmet.getType());
this.writeInt(send,tSeedandmet.getStatus());
this.writeInt(send,tSeedandmet.getLv());
this.writeInt(send,tSeedandmet.getNum());
this.writeInt(send,tSeedandmet.getCd());
tSeedandmet
TSeedandmet
TSeedandmetMapper
select * from t_seedandmet
insert into  t_seedandmet set 
update t_seedandmet set where 
delete from t_seedandmet where 
uid=#{uid},itemId=#{itemId},type=#{type},status=#{status},lv=#{lv},num=#{num},cd=#{cd},
public List<TSeedandmet> selectList();
public int insertOne(TSeedandmet tSeedandmet);
public int updateOne(TSeedandmet tSeedandmet);
*/
SysDrawMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysDraw;

public interface SysDrawMapper {
	@Select("select * from sys_draw")
	public List<SysDraw> selectList();
}
/*
sys_draw
private int id ;
private int drawType ;
private int drawNumber ;
private int drawRate ;
private int drawCount ;
private String drawTxt ;
this.writeInt(send,sysDraw.getId());
this.writeInt(send,sysDraw.getDrawType());
this.writeInt(send,sysDraw.getDrawNumber());
this.writeInt(send,sysDraw.getDrawRate());
this.writeInt(send,sysDraw.getDrawCount());
this.writeUTF(send,sysDraw.getDrawTxt());
sysDraw
SysDraw
SysDrawMapper
select * from sys_draw
insert into  sys_draw set 
update sys_draw set where 
delete from sys_draw where 
id=#{id},drawType=#{drawType},drawNumber=#{drawNumber},drawRate=#{drawRate},drawCount=#{drawCount},drawTxt=#{drawTxt},
public List<SysDraw> selectList();
public int insertOne(SysDraw sysDraw);
public int updateOne(SysDraw sysDraw);
---
HashMap<Integer,SysDraw> sysDrawMap = new HashMap<>();
List<SysDraw> sysDrawList = sysDrawMapper.selectList();
for (SysDraw sysDraw : sysDrawList) {
  sysDrawMap.put(sysDraw.getId(), sysDraw);}
HashMap<Integer,SysDraw> sysDrawMap;
List<SysDraw> sysDrawList;
gameDatas.setSysDrawList(sysDrawList);
gameDatas.setSysDrawMap(sysDrawMap);
SysDrawMapper sysDrawMapper;
*/
SysEnemyMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysEnemy;

public interface SysEnemyMapper {
	@Select("select * from sys_enemy")
	public List<SysEnemy> selectList();
}
/*
sys_enemy
private int id ;
private int enemyLevel ;
private String enemyName ;
private int enemyHp ;
private int enemyAttk ;
this.writeInt(send,sysEnemy.getId());
this.writeInt(send,sysEnemy.getEnemyLevel());
this.writeUTF(send,sysEnemy.getEnemyName());
this.writeInt(send,sysEnemy.getEnemyHp());
this.writeInt(send,sysEnemy.getEnemyAttk());
sysEnemy
SysEnemy
SysEnemyMapper
select * from sys_enemy
insert into  sys_enemy set 
update sys_enemy set where 
delete from sys_enemy where 
id=#{id},enemyLevel=#{enemyLevel},enemyName=#{enemyName},enemyHp=#{enemyHp},enemyAttk=#{enemyAttk},
public List<SysEnemy> selectList();
public int insertOne(SysEnemy sysEnemy);
public int updateOne(SysEnemy sysEnemy);
---
HashMap<Integer,SysEnemy> sysEnemyMap = new HashMap<>();
List<SysEnemy> sysEnemyList = sysEnemyMapper.selectList();
for (SysEnemy sysEnemy : sysEnemyList) {
  sysEnemyMap.put(sysEnemy.getId(), sysEnemy);}
HashMap<Integer,SysEnemy> sysEnemyMap;
List<SysEnemy> sysEnemyList;
gameDatas.setSysEnemyList(sysEnemyList);
gameDatas.setSysEnemyMap(sysEnemyMap);
SysEnemyMapper sysEnemyMapper;
*/
UWxuserMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.UWxuser;

public interface UWxuserMapper {
	@Select("select * from u_wxuser where id=#{uid}")
	public UWxuser selectOne(int uid);
	
	@Select("select * from u_wxuser where nickName like #{nickName} limit #{page},10 ")
	public List<UWxuser> selectFriendsLikename(String nickName,int page);
	
	@Select("select count(1) from u_wxuser where nickName like #{nickName} ")
	public int selectFriendsLikenameCount(String nickName);
	
	@Update("update u_wxuser set lv=#{lv} where  id=#{id} ")
	public int updateLv(UWxuser uWxuser);
}
/*
u_wxuser
private int id ;
private String openid ;
private String skey ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
this.writeInt(send,uWxuser.getId());
this.writeUTF(send,uWxuser.getOpenid());
this.writeUTF(send,uWxuser.getSkey());
this.writeUTF(send,uWxuser.getNickName());
this.writeUTF(send,uWxuser.getAvatarUrl());
this.writeInt(send,uWxuser.getGender());
this.writeInt(send,uWxuser.getLv());
uWxuser
UWxuser
UWxuserMapper
select * from u_wxuser
insert into  u_wxuser set 
update u_wxuser set where 
delete from u_wxuser where 
id=#{id},openid=#{openid},skey=#{skey},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},
public List<UWxuser> selectList();
public int insertOne(UWxuser uWxuser);
public int updateOne(UWxuser uWxuser);
*/
TActionMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TAction;

public interface TActionMapper {
	
	@Insert("insert into  t_action set uid=#{uid} ")
	public int insertOne(int uid);
	
	@Select("select * from t_action where uid=#{uid} ")
	public TAction selectOne(int uid);
	
	@Update("update t_action set rollcd=#{rollcd},rcd0=#{rcd0},rcd1=#{rcd1},rcd2=#{rcd2} where uid=#{uid} ")
	public int updateRollcd(TAction tAction);
	
	@Update("update t_action set ulogin=#{ulogin},ulogout=#{ulogout},uplayt=#{uplayt} where uid=#{uid} ")
	public int updateTimeLog(TAction tAction);
	
	@Update("update t_action set uplayg=#{uplayg} where uid=#{uid} ")
	public int updateTimeGold(TAction tAction);
	
	@Update("update t_action set useed=#{useed},udmet=#{udmet} where uid=#{uid} ")
	public int updateTimeSeedAndDmet(TAction tAction);
	
	@Update("update t_action set Item0=#{Item0},Item1=#{Item1},Item2=#{Item2} where uid=#{uid} ")
	public int updateBuilding(TAction tAction);
}

/*
t_action
private int uid ;
private int rollcd ;
private int ulogin ;
private int ulogout ;
private int uplayt ;
private int uplayg ;
private int useed ;
private int udmet ;
private int stime ;
private int Item0 ;
private int Item1 ;
private int Item2 ;
private int rcd0 ;
private int rcd1 ;
private int rcd2 ;
this.writeInt(send,tAction.getUid());
this.writeInt(send,tAction.getRollcd());
this.writeInt(send,tAction.getUlogin());
this.writeInt(send,tAction.getUlogout());
this.writeInt(send,tAction.getUplayt());
this.writeInt(send,tAction.getUplayg());
this.writeInt(send,tAction.getUseed());
this.writeInt(send,tAction.getUdmet());
this.writeInt(send,tAction.getStime());
this.writeInt(send,tAction.getItem0());
this.writeInt(send,tAction.getItem1());
this.writeInt(send,tAction.getItem2());
this.writeInt(send,tAction.getRcd0());
this.writeInt(send,tAction.getRcd1());
tAction
TAction
TActionMapper
select * from t_action
insert into  t_action set 
update t_action set where 
delete from t_action where 
uid=#{uid},rollcd=#{rollcd},ulogin=#{ulogin},ulogout=#{ulogout},uplayt=#{uplayt},uplayg=#{uplayg},useed=#{useed},udmet=#{udmet},stime=#{stime},Item0=#{Item0},Item1=#{Item1},Item2=#{Item2},rcd0=#{rcd0},rcd1=#{rcd1},
public List<TAction> selectList();
public int insertOne(TAction tAction);
public int updateOne(TAction tAction);
*/
SysStagemapMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysStagemap;

public interface SysStagemapMapper {
	@Select("select * from sys_stagemap")
	public List<SysStagemap> selectList();
}

/*
sys_stagemap
private int id ;
private String name ;
private String image ;
private String sceneImage ;
private int status ;
private int times ;
private int vitality ;
private int mapType ;
private int winCondition ;
private int beforeId ;
private int stageGold ;
private int stageExp ;
private String collect ;
private String monsterGroups ;
private String dropItem ;
private int bgMusic ;
private int firstAward ;
private int battleInWinstory ;
private int npcDamagescale ;
private int npcHealthscale ;
private String description ;
this.writeInt(send,sysStagemap.getId());
this.writeUTF(send,sysStagemap.getName());
this.writeUTF(send,sysStagemap.getImage());
this.writeUTF(send,sysStagemap.getSceneImage());
this.writeInt(send,sysStagemap.getStatus());
this.writeInt(send,sysStagemap.getTimes());
this.writeInt(send,sysStagemap.getVitality());
this.writeInt(send,sysStagemap.getMapType());
this.writeInt(send,sysStagemap.getWinCondition());
this.writeInt(send,sysStagemap.getBeforeId());
this.writeInt(send,sysStagemap.getStageGold());
this.writeInt(send,sysStagemap.getStageExp());
this.writeUTF(send,sysStagemap.getCollect());
this.writeUTF(send,sysStagemap.getMonsterGroups());
this.writeUTF(send,sysStagemap.getDropItem());
this.writeInt(send,sysStagemap.getBgMusic());
this.writeInt(send,sysStagemap.getFirstAward());
this.writeInt(send,sysStagemap.getBattleInWinstory());
this.writeInt(send,sysStagemap.getNpcDamagescale());
this.writeInt(send,sysStagemap.getNpcHealthscale());
this.writeUTF(send,sysStagemap.getDescription());
sysStagemap
SysStagemap
SysStagemapMapper
select * from sys_stagemap
insert into  sys_stagemap set 
update sys_stagemap set where 
delete from sys_stagemap where 
id=#{id},name=#{name},image=#{image},sceneImage=#{sceneImage},status=#{status},times=#{times},vitality=#{vitality},mapType=#{mapType},winCondition=#{winCondition},beforeId=#{beforeId},stageGold=#{stageGold},stageExp=#{stageExp},collect=#{collect},monsterGroups=#{monsterGroups},dropItem=#{dropItem},bgMusic=#{bgMusic},firstAward=#{firstAward},battleInWinstory=#{battleInWinstory},npcDamagescale=#{npcDamagescale},npcHealthscale=#{npcHealthscale},description=#{description},
public List<SysStagemap> selectList();
public int insertOne(SysStagemap sysStagemap);
public int updateOne(SysStagemap sysStagemap);
---
HashMap<Integer,SysStagemap> sysStagemapMap = new HashMap<>();
List<SysStagemap> sysStagemapList = sysStagemapMapper.selectList();
for (SysStagemap sysStagemap : sysStagemapList) {
  sysStagemapMap.put(sysStagemap.getId(), sysStagemap);}
HashMap<Integer,SysStagemap> sysStagemapMap;
List<SysStagemap> sysStagemapList;
gameDatas.setSysStagemapList(sysStagemapList);
gameDatas.setSysStagemapMap(sysStagemapMap);
SysStagemapMapper sysStagemapMapper;
*/
TCardsMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.utils.maoutils.game01.TCards;

public interface TCardsMapper {
	
	@Insert("insert into  t_cards set "
			+ "uid=#{uid},aid=#{aid},"
			+ "itemid=#{itemid},num=#{num},"
			+ "openid=#{openid},cardcode=#{cardcode},"
			+ "stime=#{stime},etime=#{etime},"
			+ "ctime=#{ctime}")
	public int insertOne(TCards tCards);
	
//	@Insert("insert into  t_cards set "
//			+ "uid=1,aid=1,"
//			+ "itemid=1,num=1,"
//			+ "openid='1',skey='1'")
//	public int insertOne1();
	
	@Select("select * from t_cards where uid=#{uid} and status=0 order by status ")
	public List<TCards> selectByUid(int uid);
	
	@Select("select * from t_cards where uid=#{uid} and id=#{id} ")
	public TCards selectOne(int uid,int id);
	
//	@Select("select * from t_cards where uid=#{uid} and itemid=#{itemid} ")
//	public TCards selectOneOnly(int uid,int itemid);
	
	@Update("update t_cards set cardcode=#{cardcode}, status=#{status},useTxt=#{useTxt} where uid=#{uid} and id=#{id}")
	public int updateOne(TCards tCards);
	
	@Select("select * from t_cards where uid=#{uid} and useTxt='' ")
	public List<TCards> selectByUidNoSend(int uid);
	
	@Select("select * from t_cards where cardcode=#{cardcode}")
	public TCards selectByCardcode(String cardcode);
}

/*
t_cards
private int uid ;
private int id ;
private int aid ;
private int itemid ;
private int num ;
private int status ;
private String openid ;
private String cardcode ;
private int stime ;
private int etime ;
private int ctime ;
private String useTxt ;
this.writeInt(send,tCards.getUid());
this.writeInt(send,tCards.getId());
this.writeInt(send,tCards.getAid());
this.writeInt(send,tCards.getItemid());
this.writeInt(send,tCards.getNum());
this.writeInt(send,tCards.getStatus());
this.writeUTF(send,tCards.getOpenid());
this.writeUTF(send,tCards.getCardcode());
this.writeInt(send,tCards.getStime());
this.writeInt(send,tCards.getEtime());
this.writeInt(send,tCards.getCtime());
this.writeUTF(send,tCards.getUseTxt());
tCards
TCards
TCardsMapper
select * from t_cards
insert into  t_cards set 
update t_cards set where 
delete from t_cards where 
uid=#{uid},id=#{id},aid=#{aid},itemid=#{itemid},num=#{num},status=#{status},openid=#{openid},cardcode=#{cardcode},stime=#{stime},etime=#{etime},ctime=#{ctime},useTxt=#{useTxt},
public List<TCards> selectList();
public int insertOne(TCards tCards);
public int updateOne(TCards tCards);
*/
TRlogMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.TRlog;

public interface TRlogMapper {
	@Insert("insert into  t_rlog set uid=#{uid},itemid=#{itemid},num=#{num},logtime=#{logtime}")
	public int insertOne(TRlog tRlog);
	
	@Select("select * from t_rlog where uid=#{uid} order by id desc limit 30 ")
	public List<TRlog> selectList(int uid);
	
	
}
/*
t_rlog
private int id ;
private int uid ;
private int itemid ;
private int num ;
private String logtime ;
this.writeInt(send,tRlog.getId());
this.writeInt(send,tRlog.getUid());
this.writeInt(send,tRlog.getItemid());
this.writeInt(send,tRlog.getNum());
this.writeUTF(send,tRlog.getLogtime());
tRlog
TRlog
TRlogMapper
select * from t_rlog
insert into  t_rlog set 
update t_rlog set where 
delete from t_rlog where 
id=#{id},uid=#{uid},itemid=#{itemid},num=#{num},logtime=#{logtime},
public List<TRlog> selectList();
public int insertOne(TRlog tRlog);
public int updateOne(TRlog tRlog);
*/
TItemsMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TItems;

public interface TItemsMapper {
	
	@Select("select * from t_items where  uid=#{uid} and type=2 order by itemId ")
	public List<TItems> selectItemsList(int uid);
	
	@Select("select * from t_items where  uid=#{uid} and type=3 order by itemId ")
	public List<TItems> selectGoodsList(int uid);
	
	@Select("select * from t_items where  uid=#{uid} and type<>2 and type<>3 order by itemId ")
	public List<TItems> selectValuesList(int uid);
	
	@Insert("insert into  t_items set uid=#{uid},itemId=#{itemId},num=#{num},type=#{type},itemType=#{itemType}")
	public int insertOne(TItems tItems);
	
	@Update("update t_items set num=#{num} where  uid=#{uid} and itemId=#{itemId}")
	public int updateOneNum(TItems tItems);
	
	@Select("select count(1) from t_items where  uid=#{uid} ")
	public int selectCount(int uid);
}
/*
t_items
private int uid ;
private int itemId ;
private int num ;
private int type ;
this.writeInt(send,tItems.getUid());
this.writeInt(send,tItems.getItemId());
this.writeInt(send,tItems.getNum());
this.writeInt(send,tItems.getType());
tItems
TItems
TItemsMapper
select * from t_items
insert into  t_items set 
update t_items set where 
delete from t_items where 
uid=#{uid},itemId=#{itemId},num=#{num},type=#{type},
public List<TItems> selectList();
public int insertOne(TItems tItems);
public int updateOne(TItems tItems);
>>> 
 */
TFriendsMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TFriends;

public interface TFriendsMapper {
	
	@Select("select * from t_friends where uid=#{uid} limit #{page},10 ")
	public List<TFriends> selectList(int uid,int page);
	
	@Select("select count(1) from t_friends where uid=#{uid}")
	public int selectCount(int uid);
	
	@Insert("insert into  t_friends set uid=#{uid},fid=#{fid}")
	public int insertOne(TFriends tFriends);
	
	@Select("select * from t_friends where uid=#{uid} and fid=#{fid} ")
	public TFriends selectOne(int uid, int fid);
	
	@Update("update t_friends set nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender} where uid=#{uid} and fid=#{fid} ")
	public int updateOne(TFriends tFriends);
	
	@Delete("delete from t_friends where  uid=#{uid} and fid=#{fid} ")
	public int delete(int uid, int fid);
}
/*
t_friends
private int uid ;
private int fid ;
private int num ;
private int etime ;
private int ctime ;
private String nickName ;
private String avatarUrl ;
private int gender ;
this.writeInt(send,tFriends.getUid());
this.writeInt(send,tFriends.getFid());
this.writeInt(send,tFriends.getNum());
this.writeInt(send,tFriends.getEtime());
this.writeInt(send,tFriends.getCtime());
this.writeUTF(send,tFriends.getNickName());
this.writeUTF(send,tFriends.getAvatarUrl());
this.writeInt(send,tFriends.getGender());
tFriends
TFriends
TFriendsMapper
select * from t_friends
insert into  t_friends set 
update t_friends set where 
delete from t_friends where 
uid=#{uid},fid=#{fid},num=#{num},etime=#{etime},ctime=#{ctime},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},
public List<TFriends> selectList();
public int insertOne(TFriends tFriends);
public int updateOne(TFriends tFriends);
*/
SysStarinfoMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysStarinfo;

public interface SysStarinfoMapper {
	@Select("select * from sys_starinfo")
	public List<SysStarinfo> selectList();
}
/*
sys_starinfo
private int id ;
private int starID ;
private int roleLevel ;
private String dropSeed ;
private String dropmenu ;
private String collect ;
private String monsterGroups ;
private String dropItem ;
this.writeInt(send,sysStarinfo.getId());
this.writeInt(send,sysStarinfo.getStarID());
this.writeInt(send,sysStarinfo.getRoleLevel());
this.writeUTF(send,sysStarinfo.getDropSeed());
this.writeUTF(send,sysStarinfo.getDropmenu());
this.writeUTF(send,sysStarinfo.getCollect());
this.writeUTF(send,sysStarinfo.getMonsterGroups());
this.writeUTF(send,sysStarinfo.getDropItem());
sysStarinfo
SysStarinfo
SysStarinfoMapper
select * from sys_starinfo
insert into  sys_starinfo set 
update sys_starinfo set where 
delete from sys_starinfo where 
id=#{id},starID=#{starID},roleLevel=#{roleLevel},dropSeed=#{dropSeed},dropmenu=#{dropmenu},collect=#{collect},monsterGroups=#{monsterGroups},dropItem=#{dropItem},
public List<SysStarinfo> selectList();
public int insertOne(SysStarinfo sysStarinfo);
public int updateOne(SysStarinfo sysStarinfo);
---
HashMap<Integer,SysStarinfo> sysStarinfoMap = new HashMap<>();
List<SysStarinfo> sysStarinfoList = sysStarinfoMapper.selectList();
for (SysStarinfo sysStarinfo : sysStarinfoList) {
  sysStarinfoMap.put(sysStarinfo.getId(), sysStarinfo);}
HashMap<Integer,SysStarinfo> sysStarinfoMap;
List<SysStarinfo> sysStarinfoList;
gameDatas.setSysStarinfoList(sysStarinfoList);
gameDatas.setSysStarinfoMap(sysStarinfoMap);
SysStarinfoMapper sysStarinfoMapper;
*/
TTransportMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TTransport;

public interface TTransportMapper {
	
	@Insert("insert into  t_transport set uid=#{uid}")
	public int insertOne(int uid);
	
	@Update("update t_transport set  scount=#{scount},cd=#{cd},gold=#{gold},exp=#{exp},bid=#{bid},num=#{num},aid=#{aid},addgold=#{addgold} where uid=#{uid} ")
	public int updateOne(TTransport tTransport);
	
	@Select("select * from t_transport where uid=#{uid} ")
	public TTransport selectOne(int uid);
	
	@Select("select * from t_transport where   aid <> 0 and cd > #{now} and uid <> #{uid} order by scount   limit 6")
	public List<TTransport> getListTran(int uid ,int now);
	
	@Update("update t_transport set nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv} where uid=#{uid} ")
	public int updateInfo(TTransport tTransport);
	
	@Update("update t_transport set procd=#{procd} where uid=#{uid} ")
	public int updateProcd(TTransport tTransport);
	
	@Update("update t_transport set scount=#{scount} where uid=#{uid} ")
	public int updateScount(TTransport tTransport);
	
	
}
/*
t_transport
private int uid ;
private int gold ;
private int exp ;
private int cd ;
private int bid ;
private int num ;
private int aid ;
private int addgold ;
private String nickName ;
private String avatarUrl ;
private int gender ;
private int lv ;
private int rid ;
private int procd ;
private int scount ;
this.writeInt(send,tTransport.getUid());
this.writeInt(send,tTransport.getGold());
this.writeInt(send,tTransport.getExp());
this.writeInt(send,tTransport.getCd());
this.writeInt(send,tTransport.getBid());
this.writeInt(send,tTransport.getNum());
this.writeInt(send,tTransport.getAid());
this.writeInt(send,tTransport.getAddgold());
this.writeUTF(send,tTransport.getNickName());
this.writeUTF(send,tTransport.getAvatarUrl());
this.writeInt(send,tTransport.getGender());
this.writeInt(send,tTransport.getLv());
this.writeInt(send,tTransport.getRid());
this.writeInt(send,tTransport.getProcd());
this.writeInt(send,tTransport.getScount());
tTransport
TTransport
TTransportMapper
select * from t_transport
insert into  t_transport set 
update t_transport set where 
delete from t_transport where 
uid=#{uid},gold=#{gold},exp=#{exp},cd=#{cd},bid=#{bid},num=#{num},aid=#{aid},addgold=#{addgold},nickName=#{nickName},avatarUrl=#{avatarUrl},gender=#{gender},lv=#{lv},rid=#{rid},procd=#{procd},scount=#{scount},
public List<TTransport> selectList();
public int insertOne(TTransport tTransport);
public int updateOne(TTransport tTransport);
*/
TRobotMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TRobot;

public interface TRobotMapper {
	@Insert("insert into  t_robot set uid=#{uid},rid=#{rid} ")
	public int insertOne(TRobot tRobot);
	@Update("update t_robot set lv=#{lv},isAc=#{isAc},nikeName=#{nikeName}  where uid=#{uid} and rid=#{rid} ")
	public int updateOne(TRobot tRobot);
	@Select("select * from t_robot where uid=#{uid} ")
	public List<TRobot> selectList(int uid);
	@Select("select * from t_robot where uid=#{uid} and rid=#{rid} ")
	public TRobot selectOne(int uid,int rid);
	
	@Select("select * from t_robot where uid=#{uid} and isAc='1' limit 1 ")
	public TRobot selectOneByUid(int uid);
}
/*
t_robot
private int uid ;
private int rid ;
private int lv ;
private int isAc ;
private String nikeName ;
this.writeInt(send,tRobot.getUid());
this.writeInt(send,tRobot.getRid());
this.writeInt(send,tRobot.getLv());
this.writeInt(send,tRobot.getIsAc());
this.writeUTF(send,tRobot.getNikeName());
tRobot
TRobot
TRobotMapper
select * from t_robot
insert into  t_robot set 
update t_robot set where 
delete from t_robot where 
uid=#{uid},rid=#{rid},lv=#{lv},isAc=#{isAc},nikeName=#{nikeName},
public List<TRobot> selectList();
public int insertOne(TRobot tRobot);
public int updateOne(TRobot tRobot);
*/
TStagemapMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TStagemap;

public interface TStagemapMapper {
	
	@Select("select * from t_stagemap where uid=#{uid}")
	public TStagemap selectOneByUid(int uid);
	
	@Insert("insert into  t_stagemap set uid=#{uid},mid=#{mid},status=#{status}")
	public int insertOne(int uid,int mid , int status);
	
	@Update("update t_stagemap set mid=#{mid},status=#{status},mapvalue=#{mapvalue} where uid=#{uid}")
	public int updateOne(TStagemap tStagemap);
	
//	public List<TStagemap> selectList();
//	public int insertOne(TStagemap tStagemap);
//	public int updateOne(TStagemap tStagemap);

}
/*
t_stagemap
private int uid ;
private int mid ;
private int status ;
private String mapvalue ;
this.writeInt(send,tStagemap.getUid());
this.writeInt(send,tStagemap.getMid());
this.writeInt(send,tStagemap.getStatus());
this.writeUTF(send,tStagemap.getMapvalue());
tStagemap
TStagemap
TStagemapMapper
select * from t_stagemap
insert into  t_stagemap set 
update t_stagemap set where 
delete from t_stagemap where 
uid=#{uid},mid=#{mid},status=#{status},mapvalue=#{mapvalue},
public List<TStagemap> selectList();
public int insertOne(TStagemap tStagemap);
public int updateOne(TStagemap tStagemap);
*/
SysIteamMapper.java
package com.maoxiaolu.gamex1.dao.mapper;
import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysIteam;

public interface SysIteamMapper {
	@Select("select * from sys_iteam ")
    public List<SysIteam> selectList();
}

/*
sys_iteam
private int id ;
private String name ;
private int type ;
private String subType ;
private int iteamUnlock ;
private int useLevel ;
private int iteamList ;
private int iteamCd ;
private int collectExp ;
private int collectGold ;
private int collectNum ;
private int buyGod ;
private int buyDiamond ;
private int sellPrice ;
private String iteamTxt ;
private int levelDiamond ;
private int growDiamond ;
private int seedType ;
private int dnaNum ;
private int dnaTime ;
private int dnaNumadd ;
private int dnaTimeadd ;
private int collectNumadd ;
private int dnaCost ;
private int dnaCostadd ;
this.writeInt(send,sysIteam.getId());
this.writeUTF(send,sysIteam.getName());
this.writeInt(send,sysIteam.getType());
this.writeUTF(send,sysIteam.getSubType());
this.writeInt(send,sysIteam.getIteamUnlock());
this.writeInt(send,sysIteam.getUseLevel());
this.writeInt(send,sysIteam.getIteamList());
this.writeInt(send,sysIteam.getIteamCd());
this.writeInt(send,sysIteam.getCollectExp());
this.writeInt(send,sysIteam.getCollectGold());
this.writeInt(send,sysIteam.getCollectNum());
this.writeInt(send,sysIteam.getBuyGod());
this.writeInt(send,sysIteam.getBuyDiamond());
this.writeInt(send,sysIteam.getSellPrice());
this.writeUTF(send,sysIteam.getIteamTxt());
this.writeInt(send,sysIteam.getLevelDiamond());
this.writeInt(send,sysIteam.getGrowDiamond());
this.writeInt(send,sysIteam.getSeedType());
this.writeInt(send,sysIteam.getDnaNum());
this.writeInt(send,sysIteam.getDnaTime());
this.writeInt(send,sysIteam.getDnaNumadd());
this.writeInt(send,sysIteam.getDnaTimeadd());
this.writeInt(send,sysIteam.getCollectNumadd());
this.writeInt(send,sysIteam.getDnaCost());
this.writeInt(send,sysIteam.getDnaCostadd());
sysIteam
SysIteam
SysIteamMapper
select * from sys_iteam
insert into  sys_iteam set 
update sys_iteam set where 
delete from sys_iteam where 
id=#{id},name=#{name},type=#{type},subType=#{subType},iteamUnlock=#{iteamUnlock},useLevel=#{useLevel},iteamList=#{iteamList},iteamCd=#{iteamCd},collectExp=#{collectExp},collectGold=#{collectGold},collectNum=#{collectNum},buyGod=#{buyGod},buyDiamond=#{buyDiamond},sellPrice=#{sellPrice},iteamTxt=#{iteamTxt},levelDiamond=#{levelDiamond},growDiamond=#{growDiamond},seedType=#{seedType},dnaNum=#{dnaNum},dnaTime=#{dnaTime},dnaNumadd=#{dnaNumadd},dnaTimeadd=#{dnaTimeadd},collectNumadd=#{collectNumadd},dnaCost=#{dnaCost},dnaCostadd=#{dnaCostadd},
public List<SysIteam> selectList();
public int insertOne(SysIteam sysIteam);
public int updateOne(SysIteam sysIteam);
---
HashMap<Integer,SysIteam> sysIteamMap = new HashMap<>();
List<SysIteam> sysIteamList = sysIteamMapper.selectList();
for (SysIteam sysIteam : sysIteamList) {
  sysIteamMap.put(sysIteam.getId(), sysIteam);}
HashMap<Integer,SysIteam> sysIteamMap;
List<SysIteam> sysIteamList;
gameDatas.setSysIteamList(sysIteamList);
gameDatas.setSysIteamMap(sysIteamMap);
SysIteamMapper sysIteamMapper;
*/
SysRolelevelMapper.java
package com.maoxiaolu.gamex1.dao.mapper;



import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysRolelevel;

public interface SysRolelevelMapper {
	@Select("select * from sys_rolelevel")
    public List<SysRolelevel> selectList();
}
/*
sys_rolelevel
private int id ;
private int roleExp ;
sysRolelevel
SysRolelevel
SysRolelevelMapper
select * from sys_rolelevel
insert into  sys_rolelevel set
update sys_rolelevel set where
delete from sys_rolelevel where
id=#{id},roleExp=#{roleExp},
public List<SysRolelevel> selectList();
public int insertOne(SysRolelevel sysRolelevel);
public int updateOne(SysRolelevel sysRolelevel);
 */
SysRobotMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysRobot;

public interface SysRobotMapper {
	@Select("select * from sys_robot")
	public List<SysRobot> selectList();
}
/*
sys_robot
private int id ;
private String robotName ;
private int robotLevel ;
private int robotHp ;
private int robotAttk ;
private int attkCoefficient ;
private int hpCoefficient ;
private int robotUnlock ;
private int robotGold ;
private int robotDiamond ;
private int levelCost ;
private int levelCoefficient ;
this.writeInt(send,sysRobot.getId());
this.writeUTF(send,sysRobot.getRobotName());
this.writeInt(send,sysRobot.getRobotLevel());
this.writeInt(send,sysRobot.getRobotHp());
this.writeInt(send,sysRobot.getRobotAttk());
this.writeInt(send,sysRobot.getAttkCoefficient());
this.writeInt(send,sysRobot.getHpCoefficient());
this.writeInt(send,sysRobot.getRobotUnlock());
this.writeInt(send,sysRobot.getRobotGold());
this.writeInt(send,sysRobot.getRobotDiamond());
this.writeInt(send,sysRobot.getLevelCost());
this.writeInt(send,sysRobot.getLevelCoefficient());
sysRobot
SysRobot
SysRobotMapper
select * from sys_robot
insert into  sys_robot set 
update sys_robot set where 
delete from sys_robot where 
id=#{id},robotName=#{robotName},robotLevel=#{robotLevel},robotHp=#{robotHp},robotAttk=#{robotAttk},attkCoefficient=#{attkCoefficient},hpCoefficient=#{hpCoefficient},robotUnlock=#{robotUnlock},robotGold=#{robotGold},robotDiamond=#{robotDiamond},levelCost=#{levelCost},levelCoefficient=#{levelCoefficient},
public List<SysRobot> selectList();
public int insertOne(SysRobot sysRobot);
public int updateOne(SysRobot sysRobot);
---
HashMap<Integer,SysRobot> sysRobotMap = new HashMap<>();
List<SysRobot> sysRobotList = sysRobotMapper.selectList();
for (SysRobot sysRobot : sysRobotList) {
  sysRobotMap.put(sysRobot.getId(), sysRobot);}
HashMap<Integer,SysRobot> sysRobotMap;
List<SysRobot> sysRobotList;
gameDatas.setSysRobotList(sysRobotList);
gameDatas.setSysRobotMap(sysRobotMap);
SysRobotMapper sysRobotMapper;
*/
SysPlantMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysPlant;

public interface SysPlantMapper {
	
	@Select("select * from sys_plant")
	public List<SysPlant> selectList();
}
/*
sys_plant
private int id ;
private int plantId ;
this.writeInt(send,sysPlant.getId());
this.writeInt(send,sysPlant.getPlantId());
sysPlant
SysPlant
SysPlantMapper
select * from sys_plant
insert into  sys_plant set 
update sys_plant set where 
delete from sys_plant where 
id=#{id},plantId=#{plantId},
public List<SysPlant> selectList();
public int insertOne(SysPlant sysPlant);
public int updateOne(SysPlant sysPlant);
>>> 
 */
TWandaMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TWanda;

public interface TWandaMapper {
	
	@Update("update t_wanda set uid=#{uid},cid=#{cid} where uid='0' and cid='0' and wandaType=#{wandaType} ")
	public int updateOne(TWanda tWanda);
	
	@Select("select count(uid) from t_wanda where uid='0' ")
	public int selectCountBy0();
	
	@Select("select * from t_wanda where uid=#{uid} and cid=#{cid} ")
	public TWanda selectOneByCid(int cid,int uid);
	
	@Select("select * from t_wanda ")
	public List<TWanda> selectList();
	
	
}
/*
t_wanda
private int uid ;
private int cid ;
private String wandaType ;
private int wandaNumber ;
this.writeInt(send,tWanda.getUid());
this.writeInt(send,tWanda.getCid());
this.writeUTF(send,tWanda.getWandaType());
this.writeInt(send,tWanda.getWandaNumber());
tWanda
TWanda
TWandaMapper
select * from t_wanda
insert into  t_wanda set 
update t_wanda set where 
delete from t_wanda where 
uid=#{uid},cid=#{cid},wandaType=#{wandaType},wandaNumber=#{wandaNumber},
public List<TWanda> selectList();
public int insertOne(TWanda tWanda);
public int updateOne(TWanda tWanda);
*/
SysSoilMapper.java
package com.maoxiaolu.gamex1.dao.mapper;



import java.util.List;

import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.SysSoil;

public interface SysSoilMapper {
	@Select("select * from sys_soil")
    public List<SysSoil> selectList();
}
TStagelogMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TStagelog;

public interface TStagelogMapper {
	@Select("select * from t_stagelog where uid=#{uid} order by mid")
	public List<TStagelog> selectList(int uid);
	
	@Select("select * from t_stagelog where uid=#{uid} and mid=#{mid} ")
	public TStagelog selectOne(int uid , int mid);
	
	@Insert("insert into  t_stagelog set uid=#{uid},mid=#{mid},monsterLogs=#{monsterLogs},itemsLogs=#{itemsLogs} ")
	public int insertOne(TStagelog tStagelog);
	
	@Update("update t_stagelog set monsterLogs=#{monsterLogs},itemsLogs=#{itemsLogs} where uid=#{uid} and mid=#{mid}")
	public int updateOne(TStagelog tStagelog);
}
/*
t_stagelog
private int uid ;
private int mid ;
private String monsterLogs ;
private String itemsLogs ;
this.writeInt(send,tStagelog.getUid());
this.writeInt(send,tStagelog.getMid());
this.writeUTF(send,tStagelog.getMonsterLogs());
this.writeUTF(send,tStagelog.getItemsLogs());
tStagelog
TStagelog
TStagelogMapper
select * from t_stagelog
insert into  t_stagelog set 
update t_stagelog set where 
delete from t_stagelog where 
uid=#{uid},mid=#{mid},monsterLogs=#{monsterLogs},itemsLogs=#{itemsLogs},
public List<TStagelog> selectList();
public int insertOne(TStagelog tStagelog);
public int updateOne(TStagelog tStagelog);
*/
TBattleMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;

import com.maoxiaolu.gamex1.dao.tables.TBattle;

public interface TBattleMapper {
	@Insert("insert into  t_battle set uid=#{uid},eid=#{eid},"
			+ "battle=#{battle},goldEx=#{goldEx},"
			+ "unickName=#{unickName},uavatarUrl=#{uavatarUrl},ugender=#{ugender},ulv=#{ulv},"
			+ "enickName=#{enickName},eavatarUrl=#{eavatarUrl},egender=#{egender},elv=#{elv},"
			+ "showid=#{showid}")
	public int insertOne(TBattle tBattle);
	
	//" select * from t_battle where showid = 28282828 order by id desc limit 10 ;"
	@Select(" select * from t_battle where showid=#{showid} order by id desc limit 10 ; ")
	public List<TBattle> selectListByShowid(int showid);
	
	@Select(" select * from t_battle where id=#{id}; ")
	public TBattle selectListById(int id);
	
}
/*
t_battle
private int id ;
private int uid ;
private int eid ;
private String battle ;
private int goldEx ;
private int ctime ;
private String unickName ;
private String uavatarUrl ;
private int ugender ;
private int ulv ;
private String enickName ;
private String eavatarUrl ;
private int egender ;
private int elv ;
private int showid ;
this.writeInt(send,tBattle.getId());
this.writeInt(send,tBattle.getUid());
this.writeInt(send,tBattle.getEid());
this.writeUTF(send,tBattle.getBattle());
this.writeInt(send,tBattle.getGoldEx());
this.writeInt(send,tBattle.getCtime());
this.writeUTF(send,tBattle.getUnickName());
this.writeUTF(send,tBattle.getUavatarUrl());
this.writeInt(send,tBattle.getUgender());
this.writeInt(send,tBattle.getUlv());
this.writeUTF(send,tBattle.getEnickName());
this.writeUTF(send,tBattle.getEavatarUrl());
this.writeInt(send,tBattle.getEgender());
this.writeInt(send,tBattle.getElv());
this.writeInt(send,tBattle.getShowid());
tBattle
TBattle
TBattleMapper
select * from t_battle
insert into  t_battle set 
update t_battle set where 
delete from t_battle where 
id=#{id},uid=#{uid},eid=#{eid},battle=#{battle},goldEx=#{goldEx},ctime=#{ctime},unickName=#{unickName},uavatarUrl=#{uavatarUrl},ugender=#{ugender},ulv=#{ulv},enickName=#{enickName},eavatarUrl=#{eavatarUrl},egender=#{egender},elv=#{elv},showid=#{showid},
public List<TBattle> selectList();
public int insertOne(TBattle tBattle);
public int updateOne(TBattle tBattle);
*/
TFactoryMapper.java
package com.maoxiaolu.gamex1.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import com.maoxiaolu.gamex1.dao.tables.TFactory;

public interface TFactoryMapper {
	@Insert("insert into  t_factory set uid=#{uid},fid=#{fid},itemId=#{itemId},stept=#{stept}") 
	public int insertOne(TFactory tFactory);
	
	@Select("select * from t_factory where uid=#{uid} ")
	public List<TFactory> selectListByUid(int uid);
	

	@Update("update t_factory set "
			+ "itemId=#{itemId},cd=#{cd},et=#{et},"
			+ "stept=#{stept},stopt=#{stopt},lv=#{lv},"
			+ "status=#{status},stopInt=#{stopInt},itemCd=#{itemCd},itemEt=#{itemEt}"
			+ ",speedId=#{speedId},itemSt=#{itemSt} "
			+ "where uid=#{uid} and fid=#{fid} ")
	public int updateOne(TFactory tFactory);
}
/*
t_factory
private int uid ;
private int fid ;
private int itemId ;
private int cd ;
private int et ;
private int stept ;
private int stopt ;
private int lv ;
private int status ;
private int stopInt ;
private int itemCd ;
private int itemEt ;
private int speedId ;
private int itemSt ;
this.writeInt(send,tFactory.getUid());
this.writeInt(send,tFactory.getFid());
this.writeInt(send,tFactory.getItemId());
this.writeInt(send,tFactory.getCd());
this.writeInt(send,tFactory.getEt());
this.writeInt(send,tFactory.getStept());
this.writeInt(send,tFactory.getStopt());
this.writeInt(send,tFactory.getLv());
this.writeInt(send,tFactory.getStatus());
this.writeInt(send,tFactory.getStopInt());
this.writeInt(send,tFactory.getItemCd());
this.writeInt(send,tFactory.getItemEt());
this.writeInt(send,tFactory.getSpeedId());
this.writeInt(send,tFactory.getItemSt());
tFactory
TFactory
TFactoryMapper
select * from t_factory
insert into  t_factory set 
update t_factory set where 
delete from t_factory where 
uid=#{uid},fid=#{fid},itemId=#{itemId},cd=#{cd},et=#{et},stept=#{stept},stopt=#{stopt},lv=#{lv},status=#{status},stopInt=#{stopInt},itemCd=#{itemCd},itemEt=#{itemEt},speedId=#{speedId},itemSt=#{itemSt},
public List<TFactory> selectList();
public int insertOne(TFactory tFactory);
public int updateOne(TFactory tFactory);
*/
GameX1Application.java
package com.maoxiaolu.gamex1;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

import com.maoxiaolu.gamex1.config.ServerApplication;

@MapperScan("com.maoxiaolu.gamex1.dao.mapper")
@SpringBootApplication
public class GameX1Application {
	
	public static ConfigurableApplicationContext cox;
	
	public static void main(String[] args) throws Exception{
		cox = SpringApplication.run(GameX1Application.class, args);
		ServerApplication serverApplication = cox.getBean(ServerApplication.class);
		serverApplication.start();
	}

}
BaseAction.java
package com.maoxiaolu.gamex1.abteam;


import java.io.UnsupportedEncodingException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.maoxiaolu.gamex1.abteam.Actions.StaticActionID;
import com.maoxiaolu.gamex1.abteam.Actions.StaticErrorID;
import com.maoxiaolu.gamex1.dao.tables.TUser;


import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
//import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;

public abstract class BaseAction {//implements GameEventListener
	Logger log = LoggerFactory.getLogger(BaseAction.class.getName());
//	public void doEvent(GameEvent gameEvent,GameEventDispatcherIf despatcher) {
//		if(despatcher instanceof MesSession)
//			doEvent(gameEvent,((MesSession)despatcher).getChannel());
//	}
	
//	public void doEvent(GameEvent event,Channel c) {}
	
	public TUser getUser(Channel c) {
		return MesSession.getSessionBy(c).getUser();
	}
	
	public MesSession getSession(Channel c) {
		return MesSession.getSessionBy(c);
	}
	
	public boolean  hasSession(Channel c) {
		MesSession session = MesSession.getSessionBy(c);
		if(session==null) {
			this.SendError(StaticErrorID.UserSessionIsNull,c);
			return false;
		}
		TUser user = session.getUser();
		if(user==null) {
			this.SendError(StaticErrorID.UserSessionIsNull,c);
			return false;
		}
		return true;
	}
	
	
	
	public abstract  void exe(int key , ByteBuf readbf,Channel c) throws Exception;
	
//	public void exe(Channel c) {}
//	
//	
//	public void exe(Channel c,Object...args) {}
	
	protected void SendError(int ErrorID,String ErrorMsg, Channel c) {
		log.info(" SendError : ["+ErrorID+"] ["+ ErrorMsg + "].");
		ByteBuf send = startSend(StaticActionID.GameError);
		this.writeInt(send, ErrorID);
		if(ErrorMsg!=null) {
			this.writeUTF(send, ErrorMsg);
		}else {
			this.writeUTF(send, "");
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
	public void SendError(int ErrorID,Channel c) {
		SendError(ErrorID,null,c);
	}
	
	protected ByteBuf startSend() {
		return startSend(this.getKey());
	}
	
	protected ByteBuf startSend(int key) {
		ByteBuf send = Unpooled.buffer();
		send.writeInt(0);
		send.writeInt(key);
		return send;
	}
	
	protected ByteBuf endSend(ByteBuf send) {
		int index = send.writerIndex();
		send.writerIndex(0);
		send.writeInt(index-4);
		send.writerIndex(index);
		return send;	
	}
	
	protected ByteBuf writeInt(ByteBuf send,int value) {
		send.writeInt(value);
		return send;
	}
	
	protected ByteBuf writeUTF(ByteBuf send,String value) {
		byte[] bb = value.getBytes();
		send.writeShort(bb.length);
		send.writeBytes(bb);
		return send;
	}
	
	protected String getUTF(ByteBuf readbf) {
		short len =  readbf.readShort();
		byte[] dst = new byte[len];
		readbf.readBytes(dst);
		String str = "";
		try {
			str = new String(dst, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return str;
	}
	
	
	
	
	/**
	 * 
	 * @param key
	 * @param readbf
	 * @param ctx
	 */
	public void exeSend(int key , ByteBuf readbf,Channel c) {
		byte[] des = null;
		MesSession session = MesSession.getSessionBy(c);
		int intlen = session.getIntlen()-4;
		if(intlen>0) {
			des = new byte[intlen];
			readbf.readBytes(des);
		}
		int len = 4 + (des==null?0:des.length);
		ByteBuf send = Unpooled.buffer();
		send.writeInt(len);
		send.writeInt(key);
		if(des!=null)send.writeBytes(des);
		c.write(new BinaryWebSocketFrame(send));
		c.flush();		
	}
	
	protected void sendData(ByteBuf send,Channel c) {
		c.write(new BinaryWebSocketFrame(send));
		c.flush();	
	}
	
	protected void sendDataAll(ByteBuf send) {
		MesSession.SendAll(send);
	}
	
	private int key;
	
	public int getKey() {
		return key;
	}
	public void setKey(int key) {
		this.key = key;
	}
}
SessionAction.java
package com.maoxiaolu.gamex1.abteam;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

public abstract class SessionAction extends BaseAction {

	@Override
	public void exe(int key, ByteBuf readbf, Channel c) throws Exception {
		if(hasSession(c)) {
			this.exec(key, readbf, c);
		}
	}
	
	
	public void init(Channel c){
		if(hasSession(c)) {
			this.init(this.getSession(c));
		}
	}

	protected abstract void init(MesSession session);


	protected abstract void exec(int key, ByteBuf readbf, Channel c) throws Exception;

}
BaseExeAction.java
package com.maoxiaolu.gamex1.abteam;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.Actions.GameAdActions;
import com.maoxiaolu.gamex1.abteam.Actions.GameBattleAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameCardsAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameExploreAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameFactoryAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameFriendsAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameGuideAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameInfoAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameItemsAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameRobotAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameRollAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameSign30Action;
import com.maoxiaolu.gamex1.abteam.Actions.GameSoilAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameWeChatAction;
import com.maoxiaolu.gamex1.abteam.Actions.LoginAction;
import com.maoxiaolu.gamex1.abteam.Actions.SellItemsAction;
import com.maoxiaolu.gamex1.abteam.Actions.StaticActionID;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;


@Component
public  class BaseExeAction extends BaseAction {
	
	Logger log = LoggerFactory.getLogger(BaseExeAction.class.getName());
	
	private final Map<Integer, BaseAction> map = new HashMap<Integer, BaseAction>();
	
	@Autowired
	LoginAction loginAction;
	@Autowired
	GameSoilAction gameSoilAction;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	SellItemsAction sellItemsAction;
	@Autowired
	GameExploreAction gameExploreAction;
	@Autowired
	GameGuideAction gameGuideAction;
	@Autowired
	GameSign30Action gameSign30Action;
	@Autowired
	GameCardsAction gameCardsAction;
	@Autowired
	GameRollAction gameRollAction;
	@Autowired
	GameRobotAction gameRobotAction;
	@Autowired
	GameWeChatAction gameWeChatAction;
	@Autowired
	GameFriendsAction gameFriendsAction;
	@Autowired
	GameBattleAction gameBattleAction;
	@Autowired
	GameAdActions gameAdActions;
	
	public void initActions() {
		map.clear();
		regAction(StaticActionID.Login, loginAction);
		regAction(StaticActionID.GameSoil, gameSoilAction);
		regAction(StaticActionID.GameInfo, gameInfoAction);
		regAction(StaticActionID.GameItems, gameItemsAction);
		regAction(StaticActionID.GameFactory, gameFactoryAction);
		regAction(StaticActionID.GameSell, sellItemsAction);
		regAction(StaticActionID.GameExplore, gameExploreAction);
		regAction(StaticActionID.GameGuide, gameGuideAction);
		regAction(StaticActionID.GameSign30, gameSign30Action);
		regAction(StaticActionID.GameCard,gameCardsAction);
		regAction(StaticActionID.GameRoll,gameRollAction);
		regAction(StaticActionID.GameRobot, gameRobotAction);
		regAction(StaticActionID.GameWeChat, gameWeChatAction);
		regAction(StaticActionID.GameFriends,gameFriendsAction);
		regAction(StaticActionID.GameSellAndBattle,gameBattleAction);
		regAction(StaticActionID.GameAds,gameAdActions);
	}
	
	private HashSet<BaseAction> set = new HashSet<>();
	
	private BaseAction regAction(Integer key,BaseAction ba) {
		
		if(map.containsKey(key)) {
			try {
				throw new Exception(" key EXISTS : " + key);
			} catch (Exception e) {
				log.warn(e.getMessage(), e);
			}
		}
		
		if(set.contains(ba) || ba==null) {
			try {
				throw new Exception(" BaseAction EXISTS : " + key);
			} catch (Exception e) {
				log.warn(e.getMessage(), e);
			}
		}
		
		map.put(key, ba);
		set.add(ba);
		ba.setKey(key);
		return ba;
	}
	
	public BaseAction getAction(Integer key) {
		return map.get(key);
	}
	
	public void exeAndSend(int key , ByteBuf readbf,Channel c) {
		if(map.containsKey(key)) {
			try {
				map.get(key).exe(key, readbf, c);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return;
		}
		exeSend(key,readbf,c);
	}
	
	@Override
	public  void exe(int key , ByteBuf readbf,Channel c) throws Exception {
		this.exeAndSend(key, readbf, c);
	}
}
TItemsSession.java
package com.maoxiaolu.gamex1.abteam;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TItemsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TSeedandmetMapper;
import com.maoxiaolu.gamex1.dao.tables.SysCompose;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TItems;
import com.maoxiaolu.gamex1.dao.tables.TSeedandmet;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.sub.NumItem;
import com.maoxiaolu.gamex1.util.StaticValues;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class TItemsSession {
	
	protected MesSession mesSession;
	@Autowired
	TSeedandmetMapper tSeedandMetMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TItemsMapper tItemsMapper;
	@Autowired
	TActionMapper tActionMapper;
	
	private final Map<Integer	, TItems> iItemsMap = new HashMap<Integer, TItems>();
	
	private final Map<Integer	, TSeedandmet> tSeedAndMetsMap = new HashMap<Integer, TSeedandmet>();
	
	public Map<Integer,TSeedandmet> getTSeedsAndMets() {
		return tSeedAndMetsMap;
	}
	
	/**物品仓库*/
	private List<TItems> itemsList = null;
	/**商品仓库*/
	private List<TItems> goodsList = null;
	/**物品当前量*/
	private TItems itemsV= null;
	/**物品上限*/
	private TItems itemsMax = null;
	/**商品当前量*/
	private TItems goodsV = null;
	/**商品上限*/
	private TItems goodsMax = null;

	private int uid;
	private List<TSeedandmet> seedsAndMets;
	
	public int getItemsV() {
		init();
		return this.itemsV.getNum();
	}
	
	public int getItemsMax() {
		init();
		return this.itemsMax.getNum();
	}
	
	public int getGoodsV() {
		init();
		return this.goodsV.getNum();
	}
	
	public int getGoodsMax() {
		init();
		return this.goodsMax.getNum();
	}
	
	public void setItemsMAX(int max) {
		if(max<1000)return;
		this.itemsMax.setNum(max);
		tItemsMapper.updateOneNum(this.itemsMax);
	}
	
	public void setGoodsMAX(TUser user) {
		int max = 40 + ((user.getLv()-1) * 8);
		if(max!=goodsMax.getNum()) {
			goodsMax.setNum(max);
			tItemsMapper.updateOneNum(goodsMax);
		}
	}
	
	private void init() {
		if(itemsList==null) {
			this.uid = mesSession.getUser().getId();
			itemsList = tItemsMapper.selectItemsList(uid);
			goodsList = tItemsMapper.selectGoodsList(uid);
			List<TItems> list = tItemsMapper.selectValuesList(uid);
			for (TItems tItems : list) {
				iItemsMap.put(tItems.getItemId(), tItems);
				if(tItems.getItemId()==-1) {
					itemsV = tItems;
				}
				else if(tItems.getItemId()==-2) {
					itemsMax = tItems;
				}
				else if(tItems.getItemId()==-3) {
					goodsV = tItems;
				}
				else if(tItems.getItemId()==-4) {
					goodsMax = tItems;
				}
			}
			
			int gvn = 0;
			list = this.goodsList;
			for (TItems tItems : list) {
				iItemsMap.put(tItems.getItemId(), tItems);
				gvn += tItems.getNum();
			}
			if(gvn!=goodsV.getNum()) {
				goodsV.setNum(gvn);
			}
			
			int ivn = 0;
			list = this.itemsList;
			for (TItems tItems : list) {
				iItemsMap.put(tItems.getItemId(), tItems);
				ivn += tItems.getNum();
			}
			if(ivn!=itemsV.getNum()) {
				itemsV.setNum(ivn);
			}
			
			this.seedsAndMets = tSeedandMetMapper.selectListByUid(uid);
			int seedi = 0;
			int dmeti = 0;
			for (TSeedandmet seed : this.seedsAndMets) {
				tSeedAndMetsMap.put(seed.getItemId(), seed);
				if(seed.getType()==5) {
					seedi++;
				}else if(seed.getType()==6) {
					dmeti++;
				}
			}
			TAction ta = this.mesSession.getTaction();
			if(ta.getUseed()!=seedi || ta.getUdmet()!=dmeti) {
				ta.setUseed(seedi);
				ta.setUdmet(dmeti);
				tActionMapper.updateTimeSeedAndDmet(ta);
			}
		}
	}
	
	public boolean checkUpSeeds(int itemid) {
		init();
		return this.tSeedAndMetsMap.containsKey(itemid);
	}
	
	
	
	public TItemsSession(MesSession mesSession) {
		this.mesSession = mesSession;
	}

	public Map<Integer	, TItems> getiItemsMap() {
		init();
		return iItemsMap;
	}

	public List<TItems> getGoodsList() {
		init();
		return goodsList;
	}
	
	public List<TItems> getItemsList() {
		init();
		return itemsList;
	}
	
	public List<TSeedandmet> getSeedsAndMets() {
		init();
		return this.seedsAndMets;
	}
	
	public TItems getTItems(int itemsId) {
		if(!this.getiItemsMap().containsKey(itemsId)) {
			SysIteam sysIteam =  gameDatas.getSysIteamMap().get(itemsId);
			if(sysIteam!=null) {
				TItems item = new TItems();//仓库
				item.setUid(this.mesSession.getUser().getId());
				item.setItemId(sysIteam.getId());
				item.setItemType(sysIteam.getType());
				item.setType(sysIteam.getType());
				tItemsMapper.insertOne(item);
				this.getiItemsMap().put(item.getItemId(), item);
				this.itemsList.add(item);
			}
		}
		return this.getiItemsMap().get(itemsId);
	}
	
	public int itemsCapacity() {
		init();
		int num_ = itemsV.getNum();//仓库储量
		int max_ = itemsMax.getNum();//仓库max储量
		return max_ - num_;
	}
	
	public int goodsCapacity() {
		init();
		int num_ = goodsV.getNum();//仓库储量
		int max_ = goodsMax.getNum();//仓库max储量
		return max_ - num_;
	}
	
	public boolean useItemOrGoods(int itemid , int num) {
		init();
		if(num<1)return false;
		
		TItems is_it = getTItems(itemid);//得到种子数量
		if(is_it.getNum()<num)return false;
		
		if(is_it.getType()==2) {
			//仓库储量
			itemsV.setNum(itemsV.getNum() - num);
			tItemsMapper.updateOneNum(itemsV);
		}
		else if(is_it.getType()==3) {
			//商品储量
			goodsV.setNum(goodsV.getNum() - num);
			tItemsMapper.updateOneNum(goodsV);
		}else {
			return false;
		}
		is_it.setNum(is_it.getNum() - num);
		tItemsMapper.updateOneNum(is_it);
		return true;
	}
	
	
	
	
	public boolean addItem(int itemid , int num ) {//, TItemsMapper tItemsMapper
		if(num<1)return false;
		TItems is_it = getTItems(itemid);//得到种子数量
		
		if(is_it.getType()==2) {
			if(this.itemsCapacity()<num)
				return false;
			//仓库储量
			itemsV.setNum(itemsV.getNum() + num);
			tItemsMapper.updateOneNum(itemsV);
		}
		else if(is_it.getType()==3) {
			if(this.goodsCapacity()<num)
				return false;
			//仓库储量
			goodsV.setNum(goodsV.getNum() + num);
			tItemsMapper.updateOneNum(goodsV);
		}else {
			return false;
		}
		is_it.setNum(is_it.getNum() + num);
		tItemsMapper.updateOneNum(is_it);
		return true;
	}

	public int[] sellAndClear() {
		int gold = 0;
		int exp  = 0;
		//for (TItems tItems : itemsList) {
		for (TItems tItems : goodsList) {
			if(tItems.getItemId()>0 && tItems.getNum()>0) {
				//System.out.println("tItems " + tItems.getItemId() );
				SysIteam sysItem = gameDatas.getSysIteamMap().get(tItems.getItemId());
				if(sysItem.getType()==2 || sysItem.getType()==3) {
					int num = tItems.getNum();
					if(this.useItemOrGoods(tItems.getItemId(), tItems.getNum())) {
						gold += sysItem.getSellPrice() * num;
						exp += sysItem.getCollectExp() * num;
					}
				}
			}
		}
		if(this.goodsCapacity()>0) {
			this.mesSession.getFactorySession().star2All(StaticValues.getGameNow());
		}
		return new int[] {gold,exp};
	}
	
	public boolean checkUp(SysCompose compose) {
		Collection<NumItem> value = compose.getMap().values();
		for (NumItem composeItem : value) {
			int num = composeItem.getNum();
			TItems is_it = getTItems(composeItem.getItemid());
			if(is_it==null)return false;
			if(is_it.getType()!=2 && is_it.getType()!=3)return false;
			if(is_it.getNum()<num)return false;
		}
		return true;
	}
	
	public boolean useItem(SysCompose compose) {
		if(!this.checkUp(compose))return false;
		Collection<NumItem> value = compose.getMap().values();
		for (NumItem composeItem : value) {
			int num = composeItem.getNum();
			int itemid = composeItem.getItemid();
			this.useItemOrGoods(itemid, num);
		}
		return true;
	}
}
StaticActionID.java
package com.maoxiaolu.gamex1.abteam.Actions;

public class StaticActionID {
	
	public static final int Login             =  1;
	public static final int GameSoil          =  2;
	public static final int GameInfo          =  3;
	public static final int GameItems         =  4;
	public static final int GameFactory       =  5;
	public static final int GameSell          =  6;
	public static final int GameExplore       =  7;
	public static final int GameGuide         =  8;
	public static final int GameSign30        =  9;
	public static final int GameCard          = 10;
	public static final int GameRoll          = 11;
	public static final int GameRobot         = 12;
	public static final int GameWeChat        = 13;
	public static final int GameFriends       = 14;
	public static final int GameSellAndBattle = 15;
	//Advertisement
	public static final int GameAds = 16;
	
	public static final int GameError = 10001;
}
GameErrorAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.BaseAction;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameErrorAction extends BaseAction {
	
	public GameErrorAction() {
		super();
		setKey(StaticActionID.GameError);
	}
	

	@Override
	public void exe(int key, ByteBuf readbf, Channel c) throws Exception {
		// TODO Auto-generated method stub

	}

}
GameFactoryAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.FactorySession;
import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TFactoryMapper;
import com.maoxiaolu.gamex1.dao.tables.SysCompose;
import com.maoxiaolu.gamex1.dao.tables.SysFactorybase;
import com.maoxiaolu.gamex1.dao.tables.TFactory;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameFactoryAction extends SessionAction {
	
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TFactoryMapper tFactoryMapper;
	@Autowired
	GameItemsAction gameItemsAction;
	
	@Override
	public void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		this.getSession(c).getFactorySession().runFactory();
		int subid = readbf.readInt();
		System.out.println("subid " + subid);
		if(subid==0) {
			//sendFactorys(c);
		}
		else if(subid==1) {
			int fid = readbf.readInt();
			int itemId = readbf.readInt();
			SysCompose sc = gameDatas.getSysComposeMap().get(itemId);
			
			if ( this.getSession(c).getFactorySession().checkIteam(itemId) >=1  ) {
				this.SendError(StaticErrorID.TFactory_Only, this.getSession(c).getChannel());
				return;
			}
			
			int metid = sc.getMeterialID();
			if(!this.getSession(c).gettItemsSession().checkUpSeeds(metid)) {
				this.SendError(StaticErrorID.TFactory_No_MET, c);
				return;
			}
			
			this.getSession(c).getFactorySession().startWork(fid, itemId);
			
		}
		else if(subid==2) {
			int fid = readbf.readInt();
			if( this.getSession(c).getFactorySession().addSpeed(fid) ) {
				this.getSession(c).getFactorySession().runFactory();
				//sendFactorys(c);
			}
		}
		else if(subid==3) {
			int fid = readbf.readInt();
			this.getSession(c).getFactorySession().shutDown(fid);
			//sendFactorys(c);
		}
		else if(subid==4) {
			int fid = readbf.readInt();
			this.getSession(c).getFactorySession().lvup(fid);//.shutDown(fid);
			//sendFactorys(c);
//			ByteBuf send = this.startSend();
//			this.writeInt(send, subid);
//			this.endSend(send);
//			this.sendData(send, c);
		}
		//this.getSession(c).getFactorySession().runFactory();
		sendFactorys(c);
		if(subid==0) {
			gameItemsAction.sendGoods(c);
			gameItemsAction.sendItems(c);
		}
	}
	
	public void sendFactorys(Channel c) {
		if(!this.hasSession(c))return;
		int now = StaticValues.getGameNow();
		MesSession session = this.getSession(c);
		FactorySession fsession = session.getFactorySession();
		List<TFactory> list = fsession.getList();
		fsession.runFactory();
		
		
		ByteBuf send = this.startSend();
		this.writeInt(send, 0);
		this.writeInt(send, list.size());
		for (int i = 0; i < list.size(); i++) {
			TFactory tFactory = list.get(i);
			//this.writeInt(send,tFactory.getUid());
			this.writeInt(send,tFactory.getFid());//生产线ID
			this.writeInt(send,tFactory.getLv());//当前等级
			this.writeInt(send,tFactory.getItemId());//-1未解锁 0没开始 >0开始制造物品ID
			this.writeInt(send,tFactory.getCd());//进度总秒数
			
			int et = tFactory.getEt() - now;
			if(tFactory.getStopt()>0) {
				et = tFactory.getEt() - tFactory.getStopt();
			}
			
			if(et<0)et=0;
			this.writeInt(send,et);//生产剩余秒数
			
			
			this.writeInt(send,tFactory.getItemCd());//物品剩总秒数
			et = tFactory.getItemEt() - now;//tFactory.getStopt()
			if(tFactory.getStopt()>0) {
				et = tFactory.getItemEt() - tFactory.getStopt();
			}
			
			if(et<0)et=0;
//			System.out.println("------"+tFactory.getFid());
//			System.out.println(""+tFactory.getItemCd());
//			System.out.println(""+et);
			
			this.writeInt(send,et);//物品剩余秒数
			this.writeInt(send,tFactory.getStatus());//0正常 1没材料暂停 2仓库满暂停
			this.writeInt(send,tFactory.getSpeedId());//0不加
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
	protected  void init(MesSession session) {
		TUser user = session.getUser();
		List<TFactory> list = tFactoryMapper.selectListByUid(user.getId());
		if(list!=null && list.size()>0) {
			return;
		}
		
		int lv = user.getLv();
		List<SysFactorybase> sysFactorybaseList = gameDatas.getSysFactorybaseList();
		TFactory tFactory = new TFactory();
		tFactory.setUid(user.getId());
		tFactory.setStept(Integer.MAX_VALUE);
		for (int i = 0; i < sysFactorybaseList.size(); i++) {
			SysFactorybase f = sysFactorybaseList.get(i);
			tFactory.setFid(f.getId());
			if(f.getUnlocklevel()<=lv) {
				tFactory.setItemId(0);
			}else {
				tFactory.setItemId(-1);
			}
			tFactoryMapper.insertOne(tFactory);
		}
	}

}
GameRollAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TRlogMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.SysDraw;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TRlog;
import com.maoxiaolu.gamex1.dao.tables.TWanda;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;
import com.maoxiaolu.gamex1.dao.tables.sub.DrawItem;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyUtil;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameRollAction extends SessionAction {

	@Autowired
	GameDatas gamedatas;

	@Autowired
	GameSign30Action gameSign30Action;

	@Autowired
	UWxuserMapper uWxuserMapper;

	@Autowired
	TRlogMapper tRlogMapper;

	@Autowired
	GameInfoAction gameInfoAction;

	@Autowired
	TActionMapper tActionMapper;
	
	private int oneTimes = 200;

	@Override
	protected void init(MesSession session) {
	}

	private int count() {
		int k = 0;
		List<TWanda> list = gamedatas.getTwandalist();
		for (TWanda tWanda : list) {
			if (tWanda.getCid() == 0 && tWanda.getUid() == 0) {
				k++;
			}
		}
		return k;
	}

	private void adduid(int uid) {
		List<TWanda> list = gamedatas.getTwandalist();
		for (TWanda tWanda : list) {
			if (tWanda.getCid() == 0 && tWanda.getUid() == 0) {
				tWanda.setUid(uid);
				return;
			}
		}
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {

		MesSession msession = this.getSession(c);
		int uid = msession.getUser().getId();

		int subid = readbf.readInt();
		int cs = 1;
		int diamond = 0;

		if (subid == 2) {
			TAction ta = msession.getTaction();
			if (ta.getRcd0() < StaticValues.getGameNow()) {
				ta.setRcd0(StaticValues.getGameTomorrow());
				tActionMapper.updateRollcd(ta);
				diamond = 0;
			}else {
				return;
			}
		} else if (subid == 1) {
			cs = readbf.readInt();
			

			if (cs == 1) {
				TAction ta = msession.getTaction();
				int t = ta.getRollcd() - StaticValues.getGameNow();
				if (t < 0)
					t = 0;
				if (t == 0) {
					ta.setRollcd(StaticValues.getGameTomorrow());
					tActionMapper.updateRollcd(ta);
					diamond = 0;
				} else {
					diamond = oneTimes * cs;
					if (!gameInfoAction.subDiamonds(diamond, c)) {
						return;
					}
				}
			} else {
				diamond = oneTimes * cs;
				if (!gameInfoAction.subDiamonds(diamond, c)) {
					return;
				}
			}
		} else {
			return;
		}

		UWxuser uwx = uWxuserMapper.selectOne(uid);

		int[] arr = roll(cs, uid, diamond);
		this.addItems(arr, c, uwx, msession);

		ByteBuf send = this.startSend();
		this.writeInt(send, 1);
		this.writeInt(send, cs);
		for (int i = 0; i < arr.length; i++) {
			this.writeInt(send, arr[i] - 1);
		}
		this.endSend(send);
		this.sendData(send, c);

		sendLogs(c);

	}

	public void sendLogs(Channel c) {
		if (!this.hasSession(c)) {
			return;
		}
		MesSession session = this.getSession(c);

		// long tomorrow = MyUtil.Tomorrow();
		// StaticValues.getGameTomorrow();
		TAction ta = session.getTaction();
		

		List<TRlog> list = tRlogMapper.selectList(session.getUser().getId());
		ByteBuf send = this.startSend();
		this.writeInt(send, 0);
		
		int t = ta.getRollcd() - StaticValues.getGameNow();
		if (t < 0)
			t = 0;
		this.writeInt(send, t);
		
		t = ta.getRcd0() - StaticValues.getGameNow();
		if (t < 0)
			t = 0;
		this.writeInt(send, t);
		
		
		this.writeInt(send, list.size());
		for (int i = 0; i < list.size(); i++) {
			TRlog rlog = list.get(i);
			this.writeInt(send, rlog.getItemid());
			this.writeInt(send, rlog.getNum());
			this.writeUTF(send, rlog.getLogtime());
		}
		this.endSend(send);
		this.sendData(send, c);
	}

	private void addItems(int[] arr, Channel c, UWxuser uwx, MesSession session) {
		TRlog tRlog = new TRlog();
		String sdf1 = MyUtil.SDF1.format(new Date());

		for (int i = 0; i < arr.length; i++) {
			int id = arr[i];
			SysDraw sysd = gamedatas.getSysDrawMap().get(id);
			int itemid = sysd.getDrawType();
			int num = sysd.getDrawNumber();
			gameSign30Action.addItems(itemid, num, this.getSession(c), uwx);

			tRlog.setUid(session.getUser().getId());
			tRlog.setItemid(itemid);
			tRlog.setNum(num);
			tRlog.setLogtime(sdf1);
			tRlogMapper.insertOne(tRlog);
		}

	}

	private int[] roll(int num, int uid , int diamond) {
		int[] arr = new int[num];
		List<TWanda> list = gamedatas.getTwandalist();
		synchronized (list) {
			for (int j = 0; j < arr.length; j++) {
				
				DrawItem[] darr;
				int allRate;
				if(diamond==0) {
					darr = gamedatas.getDrawItemArr_0();
					allRate = gamedatas.getAllRate_0();
				}else {
					darr = gamedatas.getDrawItemArr_1();
					allRate = gamedatas.getAllRate_1();
				}
				
				int rate = (int) (Math.random() * allRate);
				DrawItem rs = darr[0];
				for (int i = 0; i < darr.length; i++) {
					rs = darr[i];
					if (rate < rs.getMax() && rs.getDrawRate() > 0) {
						break;
					}
				}
				SysDraw sysDraw = (SysDraw) rs.getO();
				arr[j] = sysDraw.getId();

				if (sysDraw.getDrawType() == 700002) {
					if (this.count() <= 0) {
						arr[j] = 1;
					} else {
						this.adduid(uid);
					}
				}

			}
		}
		return arr;
	}

}
GameMapAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

public class GameMapAction extends SessionAction {

	@Override
	protected void init(MesSession session) {
		// TODO Auto-generated method stub

	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		// TODO Auto-generated method stub

	}

}
StaticErrorID.java
package com.maoxiaolu.gamex1.abteam.Actions;

public class StaticErrorID {
	/**用户未登陆*/
	public static final int UserSessionIsNull = 404;
	/**用户正在线上*/
	public static final int UserSessionIsOnline = 405;
	
	/**仓库没容量*/
	public static final int Items_Capacity = 4001;
	
	/**工厂ID null*/
	public static final int TFactory_Null = 5001;
	/**工厂未解锁*/
	public static final int TFactory_lcok = 5002;
	/**工厂仓库没有容量了*/
	public static final int TFactory_Capacity = 5003;
	/**合成物不存在*/
	public static final int TFactory_Compose_Null = 5004;
	/**工厂材料不足*/
	public static final int TFactory_Compose = 5005;
	/**工厂繁忙中*/
	public static final int TFactory_Busy = 5006;
	/**没有图谱*/
	public static final int TFactory_No_MET = 5007;
	/**生产线等级不足*/
	public static final int TFactory_No_LV = 5008;
	
	/**机器人等级大于农场等级*/
	public static final int RobotLvError = 5009;
	
	public static final int FriendsExistsError = 5010;
	
	public static final int FriendOfflineError = 5012;
	
	/**一条生产线只能生产一中产品*/
	public static final int TFactory_Only = 5013;
	
}
GameRobotAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TRobotMapper;
import com.maoxiaolu.gamex1.dao.tables.SysRobot;
import com.maoxiaolu.gamex1.dao.tables.TRobot;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameRobotAction extends SessionAction {
	
	@Autowired
	TRobotMapper tRobotMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameErrorAction error;
	
	@Override
	protected void init(MesSession session) {
//		int uid = session.getUser().getId();
//		//SysRobot sysr = GameDatas.getSysRobot(1, 1);
//		TRobot tRobot = new TRobot();
//		tRobot.setUid(uid);
//		tRobot.setRid(1001);
//		tRobot.setIsAc(1);
//		tRobot.setLv(1);
//		tRobotMapper.insertOne(tRobot);
//		tRobotMapper.updateOne(tRobot);
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession session = this.getSession(c);
		int uid = session.getUser().getId();
		
		int subid = readbf.readInt();
		if(subid==1) {
			int rid = readbf.readInt();
			int type = readbf.readInt();
			SysRobot sysr = gameDatas.getSysRobotMap().get(rid);
			if(sysr==null) {
				return;
			}
			
			TRobot tr = tRobotMapper.selectOne(uid, rid);
			if(tr!=null) {
				return;
			}
			
			if(type==0) {
				int gold_ = sysr.getRobotGold();
				if(gold_>0 && ! gameInfoAction.subGold(gold_, c) ) {
					return;
				}
			}else {
				int dia = sysr.getRobotDiamond();
				if(dia>0 && ! gameInfoAction.subDiamonds(dia, c) ) {
					return;
				}
			}
			
			TRobot tRobot = new TRobot();
			tRobot.setUid(uid);
			tRobot.setRid(sysr.getId());
			tRobot.setIsAc(1);
			tRobot.setLv(1);
			tRobotMapper.insertOne(tRobot);
			tRobotMapper.updateOne(tRobot);
			
			List<TRobot> list = tRobotMapper.selectList(uid);
			for (TRobot tRobot2 : list) {
				if(tRobot2.getRid() != tRobot.getRid()) {
					tRobot2.setIsAc(0);
					tRobotMapper.updateOne(tRobot2);
				}
			}
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, rid);
			this.endSend(send);
			this.sendData(send, session.getChannel());
		}
		else if(subid==2) {
			int rid = readbf.readInt();
			TRobot tr = tRobotMapper.selectOne(uid, rid);
			if(tr==null) {
				return;
			}
			if(tr.getLv()+1 > session.getUser().getLv()) {
				error.SendError(StaticErrorID.RobotLvError, session.getChannel());
				return;
			}
			
			
			//升级费用:升级基础费用+（机器人等级-1）*升级费用调整系数
			SysRobot sysr = gameDatas.getSysRobotMap().get(rid);
			int gold_ = sysr.getLevelCost() + ( (tr.getLv()-1)*sysr.getLevelCoefficient() );
			if(gold_<1)gold_= 1;
			if( ! gameInfoAction.subGold(gold_, c) ) {
				return;
			}
			
			tr.setLv(tr.getLv()+1);
			tRobotMapper.updateOne(tr);
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, rid);
			this.endSend(send);
			this.sendData(send, session.getChannel());
		}
		else if(subid==3) {
			int rid = readbf.readInt();
			TRobot tr = tRobotMapper.selectOne(uid, rid);
			if(tr==null) {
				return;
			}
			
			List<TRobot> list = tRobotMapper.selectList(uid);
			for (TRobot tRobot2 : list) {
				if(tRobot2.getRid() != tr.getRid()) {
					tRobot2.setIsAc(0);
				}else {
					tRobot2.setIsAc(1);
				}
				tRobotMapper.updateOne(tRobot2);
			}
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, rid);
			this.endSend(send);
			this.sendData(send, session.getChannel());
		}
		
		
		
		this.sendRobotList(session);
	}
	
	public void sendRobotList(MesSession session) {
		
		int uid = session .getUser().getId();
		List<TRobot> list = tRobotMapper.selectList(uid);
		ByteBuf send = this.startSend();
		this.writeInt(send, 0);
		this.writeInt(send, list.size());
		
		session.setRobot(null);
		for (int i = 0; i < list.size(); i++) {
			TRobot tr = list.get(i);
			this.writeInt(send, tr.getRid());
			this.writeInt(send, tr.getLv());
			this.writeInt(send, tr.getIsAc());
			if(tr.getIsAc()==1) {
				session.setRobot(tr);;
			}
			
		}
		this.endSend(send);
		this.sendData(send, session.getChannel());
	}
	
}
GameSign30Action.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.config.MyConfig;
import com.maoxiaolu.gamex1.dao.mapper.TCardsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TGuideMapper;
import com.maoxiaolu.gamex1.dao.mapper.TWandaMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.SysEveryday;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.TGuide;
import com.maoxiaolu.gamex1.dao.tables.TWanda;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyUtil;
import com.maoxiaolu.utils.maoutils.game01.Game01Exuter;
import com.maoxiaolu.utils.maoutils.game01.SysCard;
import com.maoxiaolu.utils.maoutils.game01.TCards;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameSign30Action extends SessionAction {

	@Autowired
	TGuideMapper tGuideMapper_;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TCardsMapper tCardsMapper;
	@Autowired
	UWxuserMapper uWxuserMapper;
	@Autowired
	GameExploreAction gameExploreAction;
//	@Autowired
//	GameInfoAction gameInfoAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	MyConfig config;
	@Autowired
	TWandaMapper tWandaMapper;
	
	//private Game01Exuter ge = new Game01Exuter();
	
	@Override
	protected void init(MesSession session) {
		int uid = session.getUser().getId();
		TGuide tg = tGuideMapper_.selectOne(uid,1);
		if(tg==null) {
			tGuideMapper_.insertOne(uid,1);
			tg = tGuideMapper_.selectOne(uid,1);
			String ss = ""+StaticValues.getGameNow();
			for (int i = 0; i < 30; i++) {
				ss += ",0";
			}
			tg.setGameText(ss);
			tGuideMapper_.updateOne(tg);
		}
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession msession = this.getSession(c);
		int uid = msession.getUser().getId();
		UWxuser uwx = uWxuserMapper.selectOne(uid);
		
		int subid = readbf.readInt();
		if(subid==1) {
			TGuide tg = tGuideMapper_.selectOne(uid,1);
			//String gameText = this.getUTF(readbf);
			String gameText = tg.getGameText();
			int[] ints = MyUtil.Str2Ints(gameText);
			int now = StaticValues.getGameNow();
			if(now>=ints[0]) {//时间！可以领奖；
				for (int i = 1; i < ints.length; i++) {
					if(ints[i]==0) {//可以领奖
						ints[0] = StaticValues.getGameTomorrow();
						//ints[0] = StaticValues.getGameNow() + 10;
//						
//						System.out.println( ints[0] );
//						System.out.println( now);
//						System.out.println(( ints[0] - now )/60/60);
						
						ints[i] = 1;
						doSign(i,msession,uwx);
						gameText = MyUtil.Ints2Str(ints);
						tg.setGameText(gameText);
						tGuideMapper_.updateOne(tg);
						sendSign(c,tg , subid, i);
						sendSign(c,tg);
						break;
					}
				}
			}
			
			
		}
	}

	private void doSign(int i, MesSession msession, UWxuser uwx) {
		SysEveryday sysd = gameDatas.getSysEverydayMap().get(i);
		int[] drops = MyUtil.Str2Ints(sysd.getDropID());
		for (int j = 0; j < drops.length; j+=2) {
			
			int itemid = drops[j];
			int num    = drops[j+1];
			addItems(itemid, num, msession, uwx);
		}
	}
	
	public void  addItems(int itemid,int num,MesSession msession , UWxuser uwx) {
		SysIteam sysi = gameDatas.getSysIteamMap().get(itemid);
		if(sysi!=null) {
			//msession.gettItemsSession().addItem(drops[j], drops[j+1]);
			int rs = gameExploreAction.additems_(itemid, num, msession);
			if((rs&1)!=0) {
				msession.getFactorySession().star1All(StaticValues.getGameNow());
				gameFactoryAction.sendFactorys(msession.getChannel());
				gameItemsAction.sendGoods(msession.getChannel());
				gameItemsAction.sendItems(msession.getChannel());
			}
			if((rs&2)!=0) {
				gameItemsAction.sendSeeds(msession.getChannel());
			}
			if((rs&8)!=0) {
				gameItemsAction.sendBuildingM(msession.getChannel());
			}
		}else {
			SysCard sysc = gameDatas.getSysCardMap().get(itemid);
			if(sysc!=null && uwx!=null) {
				TCards c = new TCards();
				c.setAid(0);
				c.setUid(msession.getUser().getId());
				c.setCtime(new Timestamp(System.currentTimeMillis()));
				c.setStime(sysc.getBegin());
				c.setEtime(sysc.getEnd());
				
				c.setItemid(sysc.getId());
				c.setOpenid(uwx.getOpenid());
				
				if(sysc.getUseType()==4) {
					c.setNum(num);
				}else {
					if(sysc.getCardNum()<=0) {
						c.setNum(sysc.getPrice());
					}else {
						c.setNum(sysc.getCardNum());
					}
				}
				tCardsMapper.insertOne(c);
				this.postTo(uwx.getId());
			}
		}
	}
	
	
	
	public void postTo(int uid) {
		List<TCards> nos = tCardsMapper.selectByUidNoSend(uid);
		for (TCards tc : nos) {
			SysCard sysc = gameDatas.getSysCardMap().get(tc.getItemid());
			if(sysc.getUseType()==1 || sysc.getUseType()==4) {
				tc.setCardcode(MyUtil.CreaetCardCode(tc.getId(), config.getGappId()));
				if( Game01Exuter.SendCard_(tc.getItemid(), tc.getNum(), tc.getId(), tc.getCardcode() , config.getGappId(), config.getWurl()) ) {
					tc.setUseTxt("send:"+MyUtil.SDF0.format(new Date()));
				}
				tCardsMapper.updateOne(tc);
			}
			else if(sysc.getUseType()==3) {
				int cid = tc.getId();
				List<TWanda> list = gameDatas.getTwandalist();
				for (int j = 0; j < list.size(); j++) {
					TWanda twc = list.get(j);
					if(twc.getCid()==0 && twc.getUid()==uid) {
						twc.setCid(cid);
						tWandaMapper.updateOne(twc);
						tc.setUseTxt("creat:"+MyUtil.SDF0.format(new Date()));
						tCardsMapper.updateOne(tc);
						break;
					}
				}
				
				
			}
		}
	}
	
	

	public void sendSign(Channel c) {
		int uid = this.getSession(c).getUser().getId();
		TGuide tg = tGuideMapper_.selectOne(uid,1);
		sendSign(c,tg);
	}
	
	private void sendSign(Channel c,TGuide tg,int...args ) {
		ByteBuf send = this.startSend();
		if(args!=null && args.length==2) {
			this.writeInt(send, args[0]);//subid
			this.writeInt(send, args[1]);//index
		}else {
			this.writeInt(send, 0);
			String[] ss = tg.getGameText().split(",");
			int t = Integer.parseInt(ss[0]);
			int now = StaticValues.getGameNow();
			this.writeInt(send, (now>=t)?0:1);
			
			String str = tg.getGameText();
			if(now>=t) {
				String st = str.substring(str.length()-1);
				if(st.equals("1")) {
					st = ""+now;
					for (int i = 0; i < 30; i++) {
						st += ",0";
					}
					tg.setGameText(st);
					tGuideMapper_.updateOne(tg);
				}
			}
			
			this.writeUTF(send, tg.getGameText());
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
//	public static void main(String args[]) {
//		String str = "0,0,2";
//		String st = str.substring(str.length()-1);
//		System.out.println(st);
//	}

}
SellItemsAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.abteam.TItemsSession;
import com.maoxiaolu.gamex1.dao.mapper.TTransportMapper;
import com.maoxiaolu.gamex1.dao.tables.TTransport;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class SellItemsAction extends SessionAction {
	
	@Autowired
	TTransportMapper tTransportMapper;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	
	@Override
	protected void init(MesSession session) {
		TUser user = session.getUser();
		TTransport tTransport = tTransportMapper.selectOne(user.getId());
		if(tTransport==null) {
			tTransportMapper.insertOne(user.getId());
		}
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		TTransport tTransport = tTransportMapper.selectOne(user.getId());
		
		int subid = readbf.readInt();
		if(subid==1) {
			if(StaticValues.getGameNow() >= tTransport.getCd() && tTransport.getGold()==0) {
				TItemsSession items = session.gettItemsSession();
				int[] arr = items.sellAndClear();
				int gold = arr[0];
				int exp  = arr[1]; 
				tTransport.setGold(gold);
				tTransport.setExp(exp);
				tTransport.setCd(StaticValues.getGameNow() + (600));
				tTransportMapper.updateOne(tTransport);
				this.sendTransport(c,1);
				//gameItemsAction.sendItems(c);
				gameItemsAction.sendGoods(c);
				gameFactoryAction.sendFactorys(c);
			}
		}
		else if(subid==2) {
			if(StaticValues.getGameNow() >= tTransport.getCd() && tTransport.getGold()>=0) {
				gameInfoAction.addGold(tTransport.getGold(), c);
				gameInfoAction.addExp(tTransport.getExp(), c);
				tTransport.setGold(0);
				tTransport.setExp(0);
				tTransport.setCd(0);
				tTransportMapper.updateOne(tTransport);
				this.sendTransport(c,2);
			}
		}

	}
	
	public void sendTransport(Channel c) {
		this.sendTransport(c, 0);
	}

	protected void sendTransport(Channel c,int subid) {
		if(!hasSession(c))return;
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		TTransport tTransport = tTransportMapper.selectOne(user.getId());
		ByteBuf send = this.startSend();
		int t = tTransport.getCd() - StaticValues.getGameNow();
		if(t<0)t=0;
		
		this.writeInt(send, subid);
		this.writeInt(send, t);
		this.writeInt(send, tTransport.getGold());
		this.endSend(send);
		this.sendData(send, c);
	}

}
GameItemsAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.abteam.TItemsSession;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TItemsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TSeedandmetMapper;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TItems;
import com.maoxiaolu.gamex1.dao.tables.TSeedandmet;
import com.maoxiaolu.gamex1.dao.tables.TUser;
//import com.nekomajinj.event.GameEvent;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
@Component
public class GameItemsAction extends SessionAction {
	
	@Autowired
	TItemsMapper tItemsMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TSeedandmetMapper tSeedMapper;
	@Autowired
	TActionMapper tActionMapper;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameSign30Action gameSign30Action;

	@Override
	public void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		 MesSession session = this.getSession(c);
		
		int subid = readbf.readInt();
		if(subid==6) {
			int itemid = readbf.readInt();
			SysIteam sysi = gameDatas.getSysIteamMap().get(itemid);
			if(sysi!=null && sysi.getType() == 5) {
				TSeedandmet seed = session.gettItemsSession().getTSeedsAndMets().get(itemid);
				int now = StaticValues.getGameNow();
				if(seed!=null && now >= seed.getCd()) {
					int lv = seed.getLv();
					int pay = sysi.getDnaCost() + ((lv-1) * sysi.getDnaCostadd() );
					
					int dnanum = sysi.getDnaNum();
					dnanum = dnanum +  ((lv-1) * sysi.getDnaNumadd() );
					int num = seed.getNum();
					if(num >= dnanum && gameInfoAction.subGold(pay, c)) {
						seed.setLv(lv+1);
						seed.setNum( num - dnanum);
						int time = sysi.getDnaTime() + ((lv-1) * sysi.getDnaTimeadd() );
						seed.setCd(now + time);
						tSeedMapper.updateOne(seed);
						this.sendSeeds(c);
					}
					
					
				}
			}
		}
		else if(subid==5) {
			int itemid = readbf.readInt();
			
			int max = this.getSession(c).gettItemsSession().getItemsMax();
			int lv = ((max - 1000) / 50) + 1;
			int num = 1 +(lv - 1)*2 ;
			
			TAction ta = session.getTaction();
			if(itemid==400001) {
				num -= ta.getItem0();
			}
			else if(itemid==400002) {
				num -= ta.getItem1();
			}
			else if(itemid==400003) {
				num -= ta.getItem2();
			}
			if(num<=0) {
				return;
			}
			int dem = num*8;
			if(! gameInfoAction.subDiamonds(dem, session.getChannel()) ) {
				return;
			}
			gameSign30Action.addItems(itemid, num, this.getSession(c), null);
			
		}
		else if(subid==4) {
			int max = this.getSession(c).gettItemsSession().getItemsMax();
			int lv = ((max - 1000) / 50) + 1;
			
			int num = 1 +(lv - 1)*2 ;
			
			TAction ta = session.getTaction();
			if(ta.getItem0() < num) {
				return;
			}
			if(ta.getItem1() < num) {
				return;
			}
			if(ta.getItem2() < num) {
				return;
			}
			
			ta.setItem0(ta.getItem0() - num);
			ta.setItem1(ta.getItem1() - num);
			ta.setItem2(ta.getItem2() - num);
			tActionMapper.updateBuilding(ta);
			session.gettItemsSession().setItemsMAX(max+50);
			this.sendBuildingM(session.getChannel());
		}
		
		
	}
	
	public void exec0(int key, ByteBuf readbf, Channel c) throws Exception {
		int subid = readbf.readInt();
		if(subid==4) {
			//1 + （level - 1）* 2
			//50
			int max = this.getSession(c).gettItemsSession().getItemsMax();
			int lv = ((max - 1000) / 50) + 1;
			
			int num = 1 +(lv - 1)*2 ;
			MesSession session = this.getSession(c);
			TAction ta = session.getTaction();
			
			int dem0 = num - ta.getItem0();
			if(dem0<0)dem0 = 0;
			
			int dem1 = num - ta.getItem1();
			if(dem1<0)dem1 = 0;
			
			int dem2 = num - ta.getItem2();
			if(dem2<0)dem2 = 0;
			
			int dem = (dem0 + dem1 + dem2)*8;
			if(dem>0) {
				if(! gameInfoAction.subDiamonds(dem, session.getChannel()) ) {
					return;
				}
			}
			
			int itemm = 0;
			itemm = ta.getItem0() - num;
			if(itemm<0)itemm = 0;
			ta.setItem0(itemm);
			
			itemm = ta.getItem1() - num;
			if(itemm<0)itemm = 0;
			ta.setItem1(itemm);
			
			itemm = ta.getItem2() - num;
			if(itemm<0)itemm = 0;
			ta.setItem2(itemm);
			
			tActionMapper.updateBuilding(ta);
			session.gettItemsSession().setItemsMAX(max+50);
			this.sendBuildingM(session.getChannel());
			
		}
	}
	
	
	
//	@Override
//	public void doEvent(GameEvent event, Channel c) {
//		exe(c);
//	}
	
	public void sendSeeds(Channel c) {
		if(!this.hasSession(c)) {return;}
		MesSession session = this.getSession(c);
		//List<TSeedandmet> list = tSeedMapper.selectListByUid(session.getUser().getId(),5);
		int seedi=0;
		int dmeti=0;
		
		List<TSeedandmet> list = session.gettItemsSession().getSeedsAndMets();
		ByteBuf send = this.startSend();
		send.writeInt(1);//subid
		send.writeInt(list.size());//subid
		int now = StaticValues.getGameNow();
		for (int i = 0; i < list.size(); i++) {
			TSeedandmet seed = list.get(i);
			send.writeInt(seed.getItemId());
			send.writeInt(seed.getType());
			send.writeInt(seed.getLv());
			send.writeInt(seed.getNum());
			
			int t = seed.getCd() - now;
			if(t<0)t=0;
			send.writeInt(t);
			
			
			if(seed.getType()==5) {
				seedi++;
			}else if(seed.getType()==6) {
				dmeti++;
			}
		}
		this.endSend(send);
		this.sendData(send, c);
		
		TAction ta = session.getTaction();
		if(ta.getUseed()!=seedi || ta.getUdmet()!=dmeti) {
			ta.setUseed(seedi);
			ta.setUdmet(dmeti);
			tActionMapper.updateTimeSeedAndDmet(ta);
		}
		
	}
	
	public void sendItems(Channel c) {
		if(!this.hasSession(c)) {return;}
		
		MesSession session = this.getSession(c);
		TItemsSession isession = session.gettItemsSession();
		
		ByteBuf send = this.startSend();
		send.writeInt(0);//subid
		TItems tItems;
		this.writeInt(send,isession.getItemsMax());//最大数量
		this.writeInt(send,isession.getItemsV());//当前数量
		List<TItems> list = isession.getItemsList();
		send.writeInt(list.size());//物品种类数
		for (int i = 0; i < list.size(); i++) {
			tItems = list.get(i);
			this.writeInt(send,tItems.getItemId());//物品ID
			this.writeInt(send,tItems.getNum());//物品数量
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
	
	public void sendGoods(Channel c) {
		if(!this.hasSession(c)) {return;}
		
		MesSession session = this.getSession(c);
		TItemsSession isession = session.gettItemsSession();
		
		ByteBuf send = this.startSend();
		send.writeInt(2);//subid
		TItems tItems;
		this.writeInt(send,isession.getGoodsMax());//最大数量
		this.writeInt(send,isession.getGoodsV());//当前数量
		List<TItems> list = isession.getGoodsList();
		send.writeInt(list.size());//物品种类数
		for (int i = 0; i < list.size(); i++) {
			tItems = list.get(i);
			this.writeInt(send,tItems.getItemId());//物品ID
			this.writeInt(send,tItems.getNum());//物品数量
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
	public void sendBuildingM(Channel c) {
		if(!this.hasSession(c)) {return;}
		
		MesSession session = this.getSession(c);
		TAction ta = session.getTaction();
		ByteBuf send = this.startSend();
		send.writeInt(3);//subid
		
		send.writeInt(ta.getItem0());
		send.writeInt(ta.getItem1());
		send.writeInt(ta.getItem2());
		this.writeInt(send,session.gettItemsSession().getItemsMax());//最大数量
		
		this.endSend(send);
		this.sendData(send, c);
	}
	
	@Override
	protected  void init(MesSession session) {
		TUser user = session.getUser();
		int count = tItemsMapper.selectCount(user.getId());
		if(count!=0)return;
		
//		List<TItems> list = tItemsMapper.selectList(user.getId());
//		if(list==null || list.size()==0) {
			TSeedandmet tSeed = new TSeedandmet();//种子
			
			TItems item = new TItems();//仓库
			item.setUid(user.getId());
			
			item.setItemId(-1);
			item.setNum(0);
			item.setType(0);
			item.setItemType(0);
			tItemsMapper.insertOne(item);
			item.setItemId(-2);
			item.setNum(1000);
			item.setType(0);
			item.setItemType(0);
			tItemsMapper.insertOne(item);
			
			item.setItemId(-3);
			item.setNum(0);
			item.setType(1);
			item.setItemType(0);
			tItemsMapper.insertOne(item);
			item.setItemId(-4);
			item.setNum(40);
			item.setType(1);
			item.setItemType(0);
			tItemsMapper.insertOne(item);
			
			item.setNum(0);
			List<SysIteam> sysIteamList = gameDatas.getSysIteamList();
			for (SysIteam sysIteam : sysIteamList) {
				if(sysIteam.getType()==6) {
					if( sysIteam.getIteamUnlock()==1 ) {
						tSeed.setUid(user.getId());
						tSeed.setItemId(sysIteam.getId());
						tSeed.setType(sysIteam.getType());
						tSeedMapper.insertOne(tSeed);
					}
				}
				else if(sysIteam.getType()==5) {
					if( sysIteam.getIteamUnlock()==1 ) {
						tSeed.setUid(user.getId());
						tSeed.setItemId(sysIteam.getId());
						tSeed.setType(sysIteam.getType());
						tSeedMapper.insertOne(tSeed);
					}
				}
				else if(sysIteam.getType()==3) {
					item.setItemId(sysIteam.getId());
					item.setItemType(sysIteam.getType());
					item.setType(3);
					tItemsMapper.insertOne(item);
				}
				else if(sysIteam.getType()!=1) {
					item.setItemId(sysIteam.getId());
					item.setItemType(sysIteam.getType());
					item.setType(2);
					tItemsMapper.insertOne(item);
				}
			}
			
			item.setItemId(200001);
			item.setNum(4);
			tItemsMapper.updateOneNum(item);
			
			item.setItemId(-1);
			item.setNum(4);
			tItemsMapper.updateOneNum(item);
			
			//list = tItemsMapper.selectList(uid);
		//}
		//return list;
	}

}
GameFriendsAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.dao.mapper.TFriendsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TUserMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.TFriends;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameFriendsAction extends SessionAction {
	
	@Autowired
	TFriendsMapper tFriendsMapper;
	@Autowired
	TUserMapper tUserMapper;
	@Autowired
	UWxuserMapper uWxuserMapper;
	
	@Override
	protected void init(MesSession session) {

	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession session = this.getSession(c);
		TUser user = session.getUser();		
		int uid = user.getId();
		
		int subid = readbf.readInt();
		if(subid==0) {
			int p = readbf.readInt();
			this.sendFriends(session, p);
		}
		else if(subid==1) {
			//int p = readbf.readInt();
			String nickName = this.getUTF(readbf);
			selectFriendsLike(session,nickName,0);
		}
		else if(subid==2) {
			int fid = readbf.readInt();
			if(uid==fid) {
				this.SendError(StaticErrorID.FriendsExistsError, c);
				return;
			}
			
			UWxuser uwx = uWxuserMapper.selectOne(fid);
			TUser fuser = tUserMapper.selectOne_(fid);
			if(uwx!=null && fuser!=null) {
				uwx.setLv(user.getLv());
				uWxuserMapper.updateLv(uwx);
				TFriends tf = tFriendsMapper.selectOne(uid, fid);
				if(tf!=null) {
					this.SendError(StaticErrorID.FriendsExistsError, c);
					return;
				}
				TFriends tFriends = new TFriends();
				tFriends.setAvatarUrl(uwx.getAvatarUrl());
				tFriends.setFid(fid);
				tFriends.setGender(uwx.getGender());
				tFriends.setNickName(uwx.getNickName());
				tFriends.setNum(uwx.getLv());
				tFriends.setUid(uid);
				tFriendsMapper.insertOne(tFriends );
				
				tFriendsMapper.updateOne(tFriends);
				
				ByteBuf send = this.startSend();
				this.writeInt(send, subid);
				this.endSend(send);
				this.sendData(send, c);
				
			}
		}
		else if(subid==3) {
			int fid = readbf.readInt();
			tFriendsMapper.delete(uid, fid);
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.endSend(send);
			this.sendData(send, c);
		}
	}
	
	
	public void selectFriendsLike(MesSession session,String nickName,int p) {
		
//		TUser user = session.getUser();		
//		int uid = user.getId();
		int max = uWxuserMapper.selectFriendsLikenameCount(nickName+"%");
		int size = 10;
		int page = (max / size);
		
		if(p>page)p = page;
		if(p<0   )p = 0   ;
		
		List<UWxuser> flist = uWxuserMapper.selectFriendsLikename(nickName+"%" , p*size);
		
		ByteBuf send = this.startSend();
		this.writeInt(send, 1);
//		this.writeInt(send, max);
//		this.writeInt(send, p);
		this.writeInt(send, flist.size());
		for (int i = 0; i < flist.size(); i++) {
			UWxuser fr = flist.get(i);
			this.writeInt(send, fr.getId());
			this.writeInt(send,fr.getGender());
			this.writeUTF(send, fr.getNickName());
			this.writeUTF(send, fr.getAvatarUrl());
			this.writeInt(send, fr.getLv());
			boolean onlene = (MesSession.GetMessionByUid(fr.getId())!=null);
			this.writeInt(send, onlene?1:0);
		}
		this.endSend(send);
		this.sendData(send, session.getChannel());
	}
	
	public void sendFriends(MesSession session) {
		sendFriends(session,0);
	}
	
	public void sendFriends(MesSession session,int p) {
		
		TUser user = session.getUser();		
		int uid = user.getId();
		
		int size = 10;
		int max = tFriendsMapper.selectCount(uid);
		int page = (max / size);
		
		if(p>page)p = page;
		if(p<0   )p = 0   ;
		
		List<TFriends> flist = tFriendsMapper.selectList(uid , p*size);
		
		ByteBuf send = this.startSend();
		this.writeInt(send, 0);
		this.writeInt(send, max);
		this.writeInt(send, p);
		this.writeInt(send, flist.size());
		for (int i = 0; i < flist.size(); i++) {
			TFriends fr = flist.get(i);
			this.writeInt(send, fr.getFid());
			this.writeInt(send,fr.getGender());
			this.writeUTF(send, fr.getNickName());
			this.writeUTF(send, fr.getAvatarUrl());
			this.writeInt(send, fr.getNum()<1?1:fr.getNum());
			boolean onlene = (MesSession.GetMessionByUid(fr.getFid())!=null);
			this.writeInt(send, onlene?1:0);
		}
		this.endSend(send);
		this.sendData(send, session.getChannel());
		
	}

}
GameWeChatAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.Date;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.sub.WeCat;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyUtil;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameWeChatAction extends SessionAction {
	
	private final ConcurrentLinkedQueue<WeCat> q = new ConcurrentLinkedQueue<WeCat>();
 
	@Override
	protected void init(MesSession session) {
		
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		int subid = readbf.readInt();
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		if(subid==1) {
			
			if( StaticValues.getGameNow() < session.chatCD ) {
				this.SendError(StaticErrorID.FriendOfflineError, c);			
				return;
			}
			session.chatCD = StaticValues.getGameNow() + 19;
			
			int sex = readbf.readInt();
			String name  = this.getUTF(readbf);
			String avata = this.getUTF(readbf);
			String chat  = this.getUTF(readbf);
			String time = MyUtil.SDF0.format(new Date());
			
			WeCat cat = null;
			while(q.size()>=30) {
				//q.peek();
				cat = q.poll();
			}
			if(cat==null)cat = new WeCat();
			cat.setUid(user.getId());
			cat.setAvata(avata);
			cat.setSex(sex);
			cat.setName(name);
			cat.setTime(time);
			cat.setChat(chat);
			q.add(cat);
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, cat.getUid());
			this.writeInt(send, cat.getSex());
			this.writeUTF(send, cat.getName());
			this.writeUTF(send, cat.getAvata());
			this.writeUTF(send, cat.getTime());
			this.writeUTF(send, cat.getChat());
			this.endSend(send);
			this.sendDataAll(send);
		}
		
		else if(subid==2) {
			int fid  = readbf.readInt();
			MesSession fsession = MesSession.GetMessionByUid(fid);
			if(fsession==null) {
				return;
			}
			
			
			int sex = readbf.readInt();
			String name  = this.getUTF(readbf);
			String avata = this.getUTF(readbf);
			String chat  = this.getUTF(readbf);
			String time = MyUtil.SDF0.format(new Date());
			
			WeCat cat = new WeCat();
			cat.setUid(user.getId());
			cat.setAvata(avata);
			cat.setSex(sex);
			cat.setName(name);
			cat.setTime(time);
			cat.setChat(chat);
			
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, cat.getUid());
			this.writeInt(send, cat.getSex());
			this.writeUTF(send, cat.getName());
			this.writeUTF(send, cat.getAvata());
			this.writeUTF(send, cat.getTime());
			this.writeUTF(send, cat.getChat());
			this.writeInt(send, user.getLv());
			this.endSend(send);
			this.sendData(send, fsession.getChannel());
			
			
			
		}
		
	}
	
	public void sendAllChat(MesSession messession) {
		for (WeCat weCat : q) {
			sendAllChat(weCat,messession.getChannel());
		}
	}
	
	private void sendAllChat(WeCat cat, Channel c) {
		ByteBuf send = this.startSend();
		this.writeInt(send, 1);
		this.writeInt(send, cat.getUid());
		this.writeInt(send, cat.getSex());
		this.writeUTF(send, cat.getName());
		this.writeUTF(send, cat.getAvata());
		this.writeUTF(send, cat.getTime());
		this.writeUTF(send, cat.getChat());
		this.endSend(send);
		this.sendData(send, c);
	}

}
GameExploreAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.abteam.TItemsSession;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TSeedandmetMapper;
import com.maoxiaolu.gamex1.dao.mapper.TStagelogMapper;
import com.maoxiaolu.gamex1.dao.mapper.TStagemapMapper;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.SysStagemap;
import com.maoxiaolu.gamex1.dao.tables.SysStarinfo;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TSeedandmet;
import com.maoxiaolu.gamex1.dao.tables.TStagelog;
import com.maoxiaolu.gamex1.dao.tables.TStagemap;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.sub.NumItem;
import com.maoxiaolu.gamex1.dao.tables.sub.StageItem;
import com.maoxiaolu.gamex1.dao.tables.sub.StarInfoArr;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameExploreAction extends SessionAction {

	@Autowired
	GameDatas gameDatas;
	@Autowired
	TStagemapMapper tStagemapMapper_;
	@Autowired
	TStagelogMapper logMapper;
	@Autowired
	TSeedandmetMapper tSeedandmetMapper;
	@Autowired
	TActionMapper tActionMapper;

	private int collectProb = 3;
	private int monsterProb = 7;
	private int maxProb = collectProb + monsterProb;
	Logger warn = LoggerFactory.getLogger(GameExploreAction.class.getName());


	@Override
	protected void init(MesSession session) {
		if( session.getStagemap()==null ) {
			TUser user = session.getUser();
			tStagemapMapper_.insertOne(user.getId(),1001,1001);
		}
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession mession = this.getSession(c);
		TStagemap tStagemap = mession.getStagemap();
		StageItem[] items = tStagemap.getItems();
		
		int subid = readbf.readInt();
		int mid = readbf.readInt();
		SysStagemap stage = gameDatas.getSysStagemapMap().get(mid);
		if (stage == null)
			return;

		if (subid == 1) {
			if (tStagemap.getStatus() < mid)
				return;

			tStagemap.setMid(mid);
			this.creatStage(tStagemap,mession);
			tStagemapMapper_.updateOne(tStagemap);
			this.sendStage(c, subid);
		}
		else if (subid == 2) {//看见怪/采集物 发星球id  位置id
			int index = readbf.readInt();
			if (tStagemap.getMid() != mid)
				return;
			if(index<0 || index>= items.length)
				return;
			
			StageItem item = items[index];
			
			int uid = tStagemap.getUid();
			TStagelog logs = logMapper.selectOne(uid,mid);
			if(logs==null) {
				 logs = new TStagelog();
				 logs.setMid(mid);
				 logs.setUid(uid);
				 logMapper.insertOne(logs);
			}
			if(item.getId()!=0) {
				logs.addMonster(item.getId());
			}
			logs.addItemid(item.getItemid());
			logMapper.updateOne(logs);
			
			this.sendStageLos(c);
		}
		else if (subid == 3) {//杀死怪/采集完成 发星球id  位置id
			int index = readbf.readInt();
			if (tStagemap.getMid() != mid)
				return;
			if(index<0 || index>= items.length)
				return;
			if( tStagemap.setStatus(index, 1) )	
				tStagemapMapper_.updateOne(tStagemap);
			
		}
		else if (subid == 4) {//撤退/完成 结算
			if (tStagemap.getMid() != mid)
				return;
			int winOrRun = readbf.readInt();
			int bu = readbf.readInt();
			if(bu!=2)bu=1;
			
			int rs = 0;
			String ss = "";
			//int count = 0;
			for (int i = 0; i < items.length; i++) {
				StageItem item = items[i];
				if( item.getStatus() == 1 ) {
					//count++;
					//mession.gettItemsSession().addItem(item.getItemid(), item.getNum());
					rs |= this.additems_(item.getItemid() , item.getNum()*bu , mession);
					ss += item.getItemid()+","+(item.getNum()*bu)+",";
				}
			}
//			boolean isClear = count==items.length;
//			if(isClear) {
//				//SysStagemap nstage;// = gameDatas.getSysStagemapMap().get(mid);
//				List<SysStagemap> list = gameDatas.getSysStagemapList();
//				for (SysStagemap sysStagemap : list) {
//					if(sysStagemap.getBeforeId() == stage.getId()) {
//						tStagemap.setStatus(sysStagemap.getId());
//						tStagemap.setMid(sysStagemap.getId());
//						break;
//					}
//				}
//			}
			this.creatStage(tStagemap,mession);
			tStagemapMapper_.updateOne(tStagemap);
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeInt(send, winOrRun);
			this.writeUTF(send, ss);
			//this.writeInt(send, isClear?1:0);
			this.endSend(send);
			this.sendData(send, c);
			
			if((rs&1)!=0) {
				mession.getFactorySession().star1All(StaticValues.getGameNow());
				gameFactoryAction.sendFactorys(c);
				gameItemsAction.sendGoods(c);
				gameItemsAction.sendItems(c);
			}
			
			if((rs&2)!=0) {
				gameItemsAction.sendSeeds(c);
			}
			
			if(mession.getUser().getExp()==0) {
				gameInfoAction.addExp(1, c);
			}
		}

	}
	
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	GameItemsAction gameItemsAction;
	
	protected int additems_(int itemid, int num,MesSession mession) {
		SysIteam item = gameDatas.getSysIteamMap().get(itemid);
		if(item==null) {
			warn.warn("itemid : " + itemid + " is null ! ");
			return 0;
		}
		
		if (item.getType() == 1) {// gameinfo
			if(item.getId()==1001) {
				gameInfoAction.addGold(num, mession.getChannel());
			}
			else if(item.getId()==1002) {
				gameInfoAction.addDiamonds(num, mession.getChannel());
			}
			if(item.getId()==1003) {
				gameInfoAction.addExp(num, mession.getChannel());
			}
			return 4;
		} else if (item.getType() == 5 || item.getType() == 6) {// gemeseed
			if( !mession.gettItemsSession().checkUpSeeds(item.getId()) ) {
				TUser user = mession.getUser();
				TSeedandmet tSeed = new TSeedandmet();//种子
				tSeed.setUid(user.getId());
				tSeed.setItemId(item.getId());
				tSeed.setType(item.getType());
				tSeedandmetMapper.insertOne(tSeed);
				
				mession.gettItemsSession().getSeedsAndMets().add(tSeed);
				mession.gettItemsSession().getTSeedsAndMets().put(tSeed.getItemId(), tSeed);
			}else {
				TSeedandmet tSeed = mession.gettItemsSession().getTSeedsAndMets().get(item.getId());
				tSeed.setNum(tSeed.getNum() + 1);
				tSeedandmetMapper.updateOne(tSeed);
				
			}
			return 2;
		} 
		else if (item.getType() == 4) {
			TAction ta = mession.getTaction();
			if(item.getId()==400001) {
				ta.setItem0(ta.getItem0()+num);
			}
			else if(item.getId()==400002) {
				ta.setItem1(ta.getItem1()+num);
			}
			else if(item.getId()==400003) {
				ta.setItem2(ta.getItem2()+num);
			}
			tActionMapper.updateBuilding(ta);
			return 8;
		}
		else {
			mession.gettItemsSession().addItem(itemid, num);
			return 1;
		}
	}

	protected void creatStage(TStagemap tstage , MesSession session) {
		TUser user = session.getUser();
		TItemsSession ts = session.gettItemsSession();
		SysStagemap stage = gameDatas.getSysStagemapMap().get(tstage.getMid());
		String vstr = "";
		String key = stage.getId() + "_" + user.getLv();
		SysStarinfo sinfo = gameDatas.getSysStarinfoMap().get(key);
		
		if(sinfo==null) {
			try {
				StarInfoArr sarr = gameDatas.getSysStarInfoArr().get(stage.getId());
				if(sarr!=null) {
					int index = (int)(Math.random() * sarr.getList().size());
					sinfo = sarr.getList().get(index);
				}
			}catch(Exception e) { e.printStackTrace(); }
		}
		
		if(sinfo==null) 
			sinfo = gameDatas.getSysStarinfoMapMax().get(stage.getId());
		
		if(sinfo==null)
			sinfo = gameDatas.getSysStarinfoMap().get("1001_1");
		
		
		
		for (int i = 0; i < 10; i++) {
			double d = Math.random() * maxProb;
			if (d <= collectProb) {
				// stage.getCollect();
				NumItem[] carr = sinfo.getCollects();
				NumItem items = carr[((int) (Math.random() * carr.length))];
				vstr += "0,";
				vstr += items.getItemid() + ",";
				vstr += items.getNum() + ",";
				vstr += "0,";

			} else {
				// stage.getMonsterGroups();
				int[] marr = sinfo.getMonsters();
				int monsterid = marr[((int) (Math.random() * marr.length))];
				//monsterid = Math.random()>0.5?20001:20002;
				
				NumItem[] drops = sinfo.getDrops();
				NumItem items = drops[((int) (Math.random() * drops.length))];
				
				/* 以前的版本 如果已经有种子了 就不在掉落了 重新去 getDropItems ROLL*/
				/* 现在的版本 如果已经有配方了 就不在掉落了 重新去 getDropItems ROLL*/
				if( ts.checkUpSeeds(items.getItemid()) && 
						gameDatas.getSysIteamMap().get(items.getItemid()).getType()==6) {
					drops = sinfo.getDropItems();
					items = drops[((int) (Math.random() * drops.length))];
				}
				
				vstr += monsterid + ",";
				vstr += items.getItemid() + ",";
				vstr += items.getNum() + ",";
				vstr += "0,";
			}
		}
		vstr = vstr.substring(0, vstr.length() - 1);
		if(user.getExp() == 0 ) {//1级固定出怪 //"1001_1".equals(key)
			vstr  = "20001,500012,1,0,";
			vstr += "20002,600002,1,0";
//			vstr += "20001,600019,1,0,";
//			vstr += "0,200012,5,0";
			
//			vstr += "20002,1001,50,0,";
//			vstr += "20002,1001,100,0,";
//			vstr += "0,200012,5,0,";
//			vstr += "20002,1001,50,0,";
//			vstr += "20001,1001,100,0";
		}
		
		
		tstage.setMid(stage.getId());
		tstage.setMapvalue(vstr);

		tStagemapMapper_.updateOne(tstage);
	}

	public void sendStageLos(Channel c) {
		if (!this.hasSession(c))
			return;
		TStagemap tStagemap = this.getSession(c).getStagemap();
		TUser tuser = this.getUser(c);
		List<TStagelog> list = logMapper.selectList(tuser.getId());

		ByteBuf send = this.startSend();// 7
		this.writeInt(send, 0);// subid
		this.writeInt(send, tStagemap.getStatus());// 解锁的最大星球ID
		this.writeInt(send, list.size());// size

		for (int i = 0; i < list.size(); i++) {
			TStagelog loga = list.get(i);
			this.writeInt(send, loga.getMid());// 星球ID
			this.writeUTF(send, loga.getMonsterLogs());// monsterid,monsterid,monsterid,...
			this.writeUTF(send, loga.getItemsLogs());// itemid,itemid,itemid,...
		}

		this.endSend(send);
		this.sendData(send, c);
	}

	public void sendStage(Channel c, int subid) {
		if (!this.hasSession(c))
			return;
		MesSession session = this.getSession(c);
		TStagemap tStagemap = session.getStagemap();
		ByteBuf send = this.startSend();
		this.writeInt(send, subid);// subid
		this.writeInt(send, tStagemap.getMid());// 星球ID
		// this.writeInt(send,tStagemap.getStatus());//解锁的最大星球ID
		String ss = tStagemap.getMapvalue();
		if ("0".equals(ss)) {
			this.creatStage(tStagemap,session);
			// ss= tStagemap.getMapvalue();
		}
		// String[] arr = ss.split(",");
		StageItem[] items = tStagemap.getItems();
		this.writeInt(send, items.length);// 关卡物数量
		for (int i = 0; i < items.length; i++) {
			StageItem item = items[i];
			this.writeInt(send, item.getId());// 0 采集物 / monsterid 怪物ID
			this.writeInt(send, item.getItemid());// 采集/掉落 物品ID
			this.writeInt(send, item.getNum());// 物品数量
			this.writeInt(send, item.getStatus());// 0正常 1已经收集
		}
		this.endSend(send);
		this.sendData(send, c);
	}

}
GameCardsAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.config.MyConfig;
import com.maoxiaolu.gamex1.dao.mapper.TAddcardsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TCardsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TWandaMapper;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.TWanda;
import com.maoxiaolu.utils.maoutils.MyUtil;
import com.maoxiaolu.utils.maoutils.game01.Game01Exuter;
import com.maoxiaolu.utils.maoutils.game01.SysCard;
import com.maoxiaolu.utils.maoutils.game01.TAddcards;
import com.maoxiaolu.utils.maoutils.game01.TCards;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameCardsAction extends SessionAction {
	
	@Autowired
	TCardsMapper tCardsMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	MyConfig config;
	@Autowired
	TAddcardsMapper tAddcardsMapper;
	@Autowired
	TWandaMapper tWandaMapper;

	@Override
	protected void init(MesSession session) {
		// TODO Auto-generated method stub

	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		int subid = readbf.readInt();
		if(subid==0) {
			this.sendCard(c);
			return;
		}
		
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		int uid = user.getId();
		if(subid==1) {
			int cid = readbf.readInt();
			TCards tc = tCardsMapper.selectOne(uid, cid);
			if(tc==null)return;
			
			if(tc.getStatus()!=0)return;
			
			if(System.currentTimeMillis() > tc.getEtime().getTime()) {
				//过期了
				return;
			}
			
			
			SysCard sysc = gameDatas.getSysCardMap().get(tc.getItemid());
			if(sysc==null)return;
			
			if(sysc.getUseType()!=2)return;
			
			gameInfoAction.addDiamonds(tc.getNum(), c);
			tc.setStatus(1);
			tc.setUseTxt("use:"+MyUtil.SDF0.format(new Date()));
			tCardsMapper.updateOne(tc);
			
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.endSend(send);
			this.sendData(send, c);
			this.sendCard(c);
		}
		
		else if(subid==2) {
			String cardcode = this.getUTF(readbf);
			TAddcards taddc = tAddcardsMapper.selectByUsercode(cardcode);
			if(taddc==null) {
				return ;
			}
			String tk = MyUtil.CreaetCardCode(taddc.getProid(), config.getWappId());
			if(!tk.equals(cardcode)) {
				return ;
			}
			
			if( !Game01Exuter.SendCardStatus_(cardcode, config.getGappId(), config.getWurls()) ) {
				return;
			}
			
			taddc.setGameid(taddc.getId());//标记为已经插入
			tAddcardsMapper.updateGameid(taddc);
			
			SysCard sysc = gameDatas.getSysCardMap().get(taddc.getItemid() );
			TCards tcards = new TCards();
			tcards.setUid( uid );
			tcards.setItemid(taddc.getItemid());
			tcards.setNum( taddc.getNum() );
			tcards.setOpenid( "" );
			tcards.setCardcode( cardcode );
			tcards.setCtime(new Timestamp(System.currentTimeMillis()));
			tcards.setStime(sysc.getBegin());
			tcards.setEtime(sysc.getEnd());
			tCardsMapper.insertOne(tcards);
			
			sendCard(c);
		}
		
		else if(subid==3) {
			int cid = readbf.readInt();
			TWanda twanda = tWandaMapper.selectOneByCid(cid, uid);
			ByteBuf send = this.startSend();
			this.writeInt(send, subid);
			this.writeUTF(send, twanda.getWandaType());
			this.writeUTF(send,twanda.getWandaNumber());
			this.endSend(send);
			this.sendData(send, c);
			
		}

	}
	
	public void sendCard(Channel c) {
		if(!this.hasSession(c)) {
			return;
		}
		MesSession session = this.getSession(c);
		int uid = session.getUser().getId();
		List<TCards> list = tCardsMapper.selectByUid(uid);
		ByteBuf send = this.startSend();
		this.writeInt(send, 0);
		int size = list!=null?list.size():0;
		this.writeInt(send, size);
		if(size>0) {
			for (int i = 0; i < list.size(); i++) {
				TCards card = list.get(i);
				this.writeInt(send, card.getId());
				this.writeInt(send, card.getItemid());
				this.writeInt(send, card.getNum());
				this.writeInt(send, card.getStatus());
				if(card.getCardcode().equals("")) {
					card.setCardcode(MyUtil.CreaetCardCode(card.getId(), config.getGappId()));
					tCardsMapper.updateOne(card);
				}
				this.writeUTF(send, card.getCardcode());
			}
		}
		this.endSend(send);
		this.sendData(send, c);
	}

}
GameGuideAction.java
package com.maoxiaolu.gamex1.abteam.Actions;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.dao.mapper.TGuideMapper;
import com.maoxiaolu.gamex1.dao.tables.TGuide;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameGuideAction extends SessionAction {
	@Autowired
	TGuideMapper tGuideMapper;
	
	@Override
	protected void init(MesSession session) {
		int uid = session.getUser().getId();
		TGuide tg = tGuideMapper.selectOne(uid,0);
		if(tg==null) {
			tGuideMapper.insertOne(uid,0);
		}
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		int uid = this.getSession(c).getUser().getId();
		TGuide tg = tGuideMapper.selectOne(uid,0);
		String gameText = this.getUTF(readbf);
		tg.setGameText(gameText);
		tGuideMapper.updateOne(tg);
		sendGuide(c,tg);
	}
	
	public void sendGuide(Channel c) {
		int uid = this.getSession(c).getUser().getId();
		TGuide tg = tGuideMapper.selectOne(uid,0);
		sendGuide(c,tg);
	}
	
	private void sendGuide(Channel c,TGuide tg) {
		ByteBuf send = this.startSend();
		this.writeUTF(send, tg.getGameText());
		this.endSend(send);
		this.sendData(send, c);
	}
	
	
	
//	public void sendFactorys(Channel c) {
//		if(!this.hasSession(c))return;
//		ByteBuf send = this.startSend();
//		this.writeInt(send, 0);
//		this.writeInt(send, list.size());
//		for (int i = 0; i < list.size(); i++) {
//			TFactory tFactory = list.get(i);
//			//this.writeInt(send,tFactory.getUid());
//			this.writeInt(send,tFactory.getFid());//生产线ID
//			this.writeInt(send,tFactory.getLv());//当前等级
//			this.writeInt(send,tFactory.getItemId());//-1未解锁 0没开始 >0开始制造物品ID
//			this.writeInt(send,tFactory.getCd());//进度总秒数
//			
//			int et = tFactory.getEt() - now;
//			if(tFactory.getStopt()>0) {
//				et = tFactory.getEt() - tFactory.getStopt();
//			}
//			
//			if(et<0)et=0;
//			this.writeInt(send,et);//生产剩余秒数
//			
//			
//			this.writeInt(send,tFactory.getItemCd());//物品剩总秒数
//			et = tFactory.getItemEt() - now;//tFactory.getStopt()
//			if(tFactory.getStopt()>0) {
//				et = tFactory.getItemEt() - tFactory.getStopt();
//			}
//			
//			if(et<0)et=0;
////			System.out.println("------"+tFactory.getFid());
////			System.out.println(""+tFactory.getItemCd());
////			System.out.println(""+et);
//			
//			this.writeInt(send,et);//物品剩余秒数
//			this.writeInt(send,tFactory.getStatus());//0正常 1没材料暂停 2仓库满暂停
//			this.writeInt(send,tFactory.getSpeedId());//0不加
//		}
//		this.endSend(send);
//		this.sendData(send, c);
//	}
	
	

}
GameAdActions.java
package com.maoxiaolu.gamex1.abteam.Actions;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameAdActions extends SessionAction {
	
	@Autowired
	GameInfoAction gameAdActions;
	@Autowired
	TActionMapper tActionMapper;
	
	private int cd = 60*60 *2;

	@Override
	protected void init(MesSession session) {
	}
	
	public void sendRcd(MesSession session) {
		this.sendRcd(session, 0);
		this.sendRcd(session, 2);
	}
	
	public void sendRcd(MesSession session,int subid) {
		int now = StaticValues.getGameNow();
		TAction ta = session.getTaction();
		
		
		ByteBuf send = this.startSend();
		this.writeInt(send, subid);
		
		int t;
		if(subid==0 || subid==1) {
			t = ta.getRcd1() - now;
			if(t<0)t=0;
			this.writeInt(send, t);
		}
		else if(subid==2) {
			t = ta.getRcd2() - now;
			if(t<0)t=0;
			this.writeInt(send, t);
		}
		
		this.endSend(send);
		this.sendData(send, session.getChannel());
		
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession session = this.getSession(c);
		int now = StaticValues.getGameNow();
		int subid = readbf.readInt();
		TAction ta = session.getTaction();
		if(subid==1) {
			if( ta.getRcd1() < now ) {
				gameAdActions.addDiamonds(10, c);
				ta.setRcd1( now + this.cd);
				tActionMapper.updateRollcd(ta);
				sendRcd(session,subid);
			}
		}
		else if(subid==2) {
			if( ta.getRcd2() < now ) {
				//ta.setRcd2( StaticValues.getGameTomorrow());
				tActionMapper.updateRollcd(ta);
				sendRcd(session,subid);
			}
		}
		
	}

}
LoginAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.BaseAction;
import com.maoxiaolu.gamex1.abteam.BaseExeAction;
import com.maoxiaolu.gamex1.abteam.MesSession;
//import com.maoxiaolu.gamex1.abteam.event.ActionsGameEvent;
import com.maoxiaolu.gamex1.dao.mapper.TUserMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;
import com.maoxiaolu.gamex1.util.LockedUID;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class LoginAction extends BaseAction {
	
	Logger log = LoggerFactory.getLogger(LoginAction.class.getName());
	
	@Autowired
	BaseExeAction bea;
	
	@Autowired
	TUserMapper mapper;
	
	@Autowired
	UWxuserMapper UWxuserMapper;
	
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameSoilAction gameSoilAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	SellItemsAction sellItemsAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	GameExploreAction gameExploreAction;
	@Autowired
	GameGuideAction gameGuideAction;
	@Autowired
	GameSign30Action gameSign30Action;
	@Autowired
	GameCardsAction gameCardsAction;
	@Autowired
	GameRollAction gameRollAction;
	@Autowired
	GameRobotAction gameRobotAction;
	@Autowired
	GameWeChatAction gameWeChatAction;
	@Autowired
	GameFriendsAction gameFriendsAction;
	@Autowired
	GameBattleAction gameBattleAction;
	@Autowired
	GameAdActions gameAdActions;
	

	@Override
	public void exe(int key, ByteBuf readbf, Channel c) throws Exception {
		
		MesSession session;
		int uid = readbf.readInt();
		session = MesSession.GetMessionByUid(uid);
		if(session!=null) {
			if(session.getChannel().equals(c)) {
				//this.SendError(StaticErrorID.UserSessionIsOnline, c);
				//return;
			}else {
				session.getChannel().close();
				session.setUser(null);
				this.SendError(StaticErrorID.UserSessionIsOnline, c);
				return;
			}
		}
		
		
		String skey = getUTF(readbf);
		log.info("uid = " + uid);
		log.info("name = " + skey);
		//System.out.println(bea);
		
		TUser tUser;
		session = MesSession.getSessionBy(c);
		boolean isInit = false;
		synchronized (LockedUID.getLocked(uid)) {
			tUser = mapper.selectOne_(uid);
			if(tUser!=null) {
				session.setUser(tUser);
				gameInfoAction.sendTuser(tUser, c);
			}
			else {
				isInit = true;
				gameInfoAction.sendCreatAndTUser(c,uid,skey);
				tUser = session.getUser();
			}
			
			UWxuser uwx = UWxuserMapper.selectOne(uid);
			session.setUwx(uwx);
		}
		
		
		if(isInit || tUser.getExp()<100) {
			init(tUser.getId(),c);
		}
		
		gameSoilAction.sendSoil(c,uid);
		gameItemsAction.sendSeeds(c);
		
		sellItemsAction.sendTransport(c);
		gameBattleAction.sendTransport(c);
		
		gameRobotAction.sendRobotList(session);
		gameFactoryAction.sendFactorys(c);
		gameExploreAction.sendStageLos(c);
		
		gameItemsAction.sendItems(c);
		gameItemsAction.sendGoods(c);
		gameItemsAction.sendBuildingM(c);
		
		gameGuideAction.sendGuide(c);
		gameSign30Action.postTo(uid);
		gameSign30Action.sendSign(c);
		gameCardsAction.sendCard(c);
		gameRollAction.sendLogs(c);
		gameWeChatAction.sendAllChat(session);
		gameFriendsAction.sendFriends(session);
		gameAdActions.sendRcd(session);
		
		if(isInit) {
			gameInfoAction.addDiamonds(10, c);
			gameInfoAction.addGold(500, c);
		}
		
	}

	private void init(int uid, Channel c ) {
		gameSoilAction .init(c);
		gameItemsAction.init(c);
		sellItemsAction.init(c);
		gameFactoryAction.init(c);
		gameExploreAction.init(c);
		gameGuideAction.init(c);
		gameSign30Action.init(c);
	}

	
}
GameSoilAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.HashMap;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.abteam.TItemsSession;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TItemsMapper;
import com.maoxiaolu.gamex1.dao.mapper.TSoilMapper;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.SysSoil;
import com.maoxiaolu.gamex1.dao.tables.TSeedandmet;
import com.maoxiaolu.gamex1.dao.tables.TSoil;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameSoilAction extends SessionAction {
	
	Logger log = LoggerFactory.getLogger(GameSoilAction.class.getCanonicalName());
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TSoilMapper tSoilMapper;
	@Autowired
	TItemsMapper tItemsMapper;
//	@Autowired
//	TSeedMapper tSeedMapper;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	GameFactoryAction gameFactoryAction;

	private void snedOne(int subid, TSoil soil, Channel c,Object...args) {
		ByteBuf send = this.startSend();
		send.writeInt(subid);
		send.writeInt(soil.getId());//地的
		send.writeInt(soil.getItemid());//-1 未解锁 0 空地 >0 作物id
		int end = soil.getEndSecond() - StaticValues.getGameNow() ; 
		if(end<0)end=0;
		send.writeInt(end);//剩余的时间秒数
		if(subid==2) {
			send.writeInt((int)args[0]);
			send.writeInt((int)args[1]);
		}
		this.endSend(send);
		this.sendData(send, c);
	}
	
	@Override
	public void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		
		HashMap<Integer, SysIteam> sysIteamMap = gameDatas.getSysIteamMap();
		MesSession messession = this.getSession(c);
		TItemsSession is = messession.gettItemsSession();//得到仓库
		
		
		int subid = readbf.readInt();
		if(subid==0) {
			int uid = readbf.readInt();
			//this.exe(c,uid);
			this.sendSoil(c, uid);
		}
		else if(subid==1) {
			
			
			TUser user = this.getUser(c);
			
			int soilid = readbf.readInt();
//			int itemid = readbf.readInt();
			int seedid = readbf.readInt();
			if(!is.checkUpSeeds(seedid)) {//如果种子没解锁
				return;
			}
			int now = StaticValues.getGameNow();

			TSeedandmet seed = messession.gettItemsSession().getTSeedsAndMets().get(seedid);
			if(now < seed.getCd()) {//种子升级中
				//return;
			}
			
			int itemid = gameDatas.getSysPlantMap().get(seedid).getPlantId();
			
			SysIteam sysIteam = sysIteamMap.get(itemid);
			if(sysIteam==null || sysIteam.getType()!=2)return;
			
			TSoil soil = tSoilMapper.selectOne(user.getId(), soilid);
			if(soil==null || soil.getItemid()!=0)return;
			
			
//			if(!is.useItem(sysIteam.getId(), 1, tItemsMapper)) {
//				return;
//			}
			soil.setItemid(sysIteam.getId());
			int itemcd = sysIteam.getIteamCd();
			int skillv = messession.useSkill(1);//超级种植
			if(skillv>0 && skillv<1000) {
				itemcd = itemcd * (1000-skillv) / 1000;
			}
			soil.setEndSecond(now + itemcd);
			
			int cn = sysIteam.getCollectNum();
			
			skillv = messession.useSkill(3);//种植能手
			if(skillv>0) {
				if ( (Math.random() * 1000) < skillv ) {
					cn = cn + 1;
				}
			}
			skillv = seed.getLv();//种子等级 每5级加产量
			skillv = (skillv / 5 );
			if(skillv>0) {
				sysIteam = sysIteamMap.get(seedid);
				cn = cn + (sysIteam.getCollectNumadd()*skillv);
			}
			soil.setCollect(cn);
			tSoilMapper.updateOne(soil);
			
			snedOne(subid, soil, c);
		}
		else if(subid==2) {
			int soilid = readbf.readInt();
			TUser user = this.getUser(c);
			
			TSoil soil = tSoilMapper.selectOne(user.getId(), soilid);
			if(soil==null || soil.getItemid()<=0)return;
			
			int itemid = soil.getItemid();
			SysIteam sysIteam = sysIteamMap.get(itemid);
			
			if(sysIteam==null || sysIteam.getType()!=2)return;
			
			int end = soil.getEndSecond() - StaticValues.getGameNow() ; 
			if(end<0)end=0;
			
			if(end==0) {
				int cn = soil.getCollect();
				if(cn<=0) {
					cn = sysIteam.getCollectNum();
				}
				
				if(is.itemsCapacity()<cn) {
					this.SendError(StaticErrorID.Items_Capacity, c);
				}
				
				if(is.addItem(itemid,cn)) {
					soil.setItemid(0);
					soil.setEndSecond(0);
					tSoilMapper.updateOne(soil);
					int exp_ = sysIteam.getCollectExp();
					//int gold_ = sysIteam.getCollectGold();
					snedOne(subid, soil, c, exp_,itemid);
					gameInfoAction.addExp(exp_, c);
					//gameInfoAction.addGold(gold_, c);
					gameItemsAction.sendItems(c);
					//messession.getFactorySession().
					messession.getFactorySession().star1All(StaticValues.getGameNow());
					gameFactoryAction.sendFactorys(c);
				}
			}
		}
		else if(subid==3) {
			int soilid = readbf.readInt();
			TUser user = this.getUser(c);
			TSoil soil = tSoilMapper.selectOne(user.getId(), soilid);
			SysIteam sysitem = gameDatas.getSysIteamMap().get(soil.getItemid());
			int t = StaticValues.getGameNow();
			t = soil.getEndSecond() - t;
			if(t<=0) {
				return;
			}
			t = t / 60;
			int diamond = sysitem.getLevelDiamond() +  (t*sysitem.getGrowDiamond());
			if( gameInfoAction.subDiamonds(diamond, c) ) {
				soil.setEndSecond(0);
				tSoilMapper.updateOne(soil);
				snedOne(subid, soil, c);
			}
		}
	}
	
	protected void lvSoilUnlock(SysSoil sysSoil, Channel c) {
		if( !this.hasSession(c) ) {
			return;
		}
		TUser user = this.getUser(c);
		TSoil soil = tSoilMapper.selectOne(this.getUser(c).getId(),sysSoil.getId());
		if(user.getLv() >= sysSoil.getRoleLevel() && soil.getItemid()<0) {
			if(sysSoil.getGold()==0 && sysSoil.getDiamond()==0) {
				soil.setItemid(0);
				tSoilMapper.updateOne(soil);
				snedOne(4, soil, c);
			}
		}
	}
	
	protected  void init(MesSession session) {
		int uid = session.getUser().getId();
		List<TSoil> list = tSoilMapper.selectList(uid);
		if(list==null || list.size()<=0) {
			List<SysSoil> sysSoilList = gameDatas.getSysSoilList();
			TSoil tSoil = new TSoil();
			tSoil.setEndSecond(0);
			tSoil.setUid(uid);
			for (SysSoil sysSoil : sysSoilList) {
				tSoil.setId(sysSoil.getId());
				tSoil.setItemid(sysSoil.getUnlockType()==0?0:-1);
				tSoilMapper.insertOne(tSoil);
			}
		}
	}
	
	
	public void sendSoil(Channel c,int uid) {
		List<TSoil> list = tSoilMapper.selectList(uid);
		if(list==null || list.size()<=0) {
			return;
		}
		ByteBuf send = this.startSend();
		int len = list.size();
		send.writeInt(0);
		send.writeInt(uid);
		send.writeInt(len);
		for (int i = 0; i < len; i++) {
			TSoil tsoil = list.get(i);
			send.writeInt(tsoil.getId());//地的
			send.writeInt(tsoil.getItemid());//-1 未解锁 0 空地 >0 作物id
			int end = tsoil.getEndSecond() - StaticValues.getGameNow() ; 
			if(end<0)end=0;
			send.writeInt(end);//剩余的时间秒数
		}
		this.endSend(send);
		sendData(send,c);
	}


}
GameInfoAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.BaseAction;
import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TStagemapMapper;
import com.maoxiaolu.gamex1.dao.mapper.TUserMapper;
import com.maoxiaolu.gamex1.dao.tables.SysRolelevel;
import com.maoxiaolu.gamex1.dao.tables.SysSoil;
import com.maoxiaolu.gamex1.dao.tables.SysStagemap;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TStagemap;
import com.maoxiaolu.gamex1.dao.tables.TUser;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameInfoAction extends BaseAction {
	
	@Autowired
	TUserMapper mapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	GameSoilAction gameSoilAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	TStagemapMapper tStagemapMapper;
	@Autowired
	TActionMapper tActionMapper;

	@Override
	public void exe(int key, ByteBuf readbf, Channel c) throws Exception {
		int subid = readbf.readInt();
		if(subid==0) {
			int uid = readbf.readInt();
			TUser tUser = mapper.selectOne_(uid);
			if(tUser!=null) {
				sendTuser(tUser,c);
			}
		}
	}
	
	
	public void sendCreatAndTUser(Channel c,Object...args) {
		int uid = (int)args[0];
		String skey = args[1]+"";
		mapper.insertOne(uid, skey);
		TUser tUser = mapper.selectOne_(uid);
		this.getSession(c).setUser(tUser);
		sendTuser(tUser,c);
	}
	
	protected void sendTuser(TUser tUser, Channel c) {
		ByteBuf send = this.startSend();
		
		this.writeInt(send,0);
		this.writeInt(send,tUser.getId());
		//this.writeUTF(send,tUser.getSkey());
		this.writeUTF(send,tUser.getNickName());
		this.writeUTF(send,tUser.getAvatarUrl());
		this.writeInt(send,tUser.getGender());
		this.writeInt(send,tUser.getLv());
		this.writeInt(send,tUser.getExp());
		this.writeInt(send,tUser.getGold());
		this.writeInt(send,tUser.getDiamonds());
		this.writeInt(send,tUser.getVip());
		
		TAction ta = this.getSession(c).getTaction();
		this.writeInt(send, ta.getUplayt());
		this.writeInt(send, ta.getUplayg());
		
		this.endSend(send);
		this.sendData(send, c);
	}
	
	/**
	 * 减少金钱
	 * @param gold_
	 * @param c
	 * @return
	 */
	public boolean subGold(int gold_, Channel c) {
		if(gold_<=0) {
			return false;
		}
		if( !this.hasSession(c) ) {
			return false;
		}
		TUser user = this.getUser(c);
		if(user.getGold()<gold_) {
			return false;
		}	
		user.setGold(user.getGold() - gold_);
		mapper.updateOne(user);
		this.sendGolds(c, user.getGold(), -1*gold_);
		return true;
	}
	/**
	 * 增加金钱
	 * @param gold_
	 * @param c
	 * @return
	 */
	protected boolean addGold(int gold_, Channel c) {
		if(gold_<=0) {
			return false;
		}
		if( !this.hasSession(c) ) {
			return false;
		}
		TUser user = this.getUser(c);
		user.setGold(user.getGold() + gold_);
		mapper.updateOne(user);
		this.sendGolds(c, user.getGold(), gold_);
		
		TAction ta = this.getSession(c).getTaction();
		ta.setUplayg(ta.getUplayg() + gold_);
		tActionMapper.updateTimeGold(ta);
		
		return true;
	}
	
	/**
	 * 减少宝石
	 * @param dia
	 * @param c
	 * @return
	 */
	public boolean subDiamonds(int dia,Channel c) {
		if(dia<1) {
			return false;
		}
		if(!this.hasSession(c)) {
			return false;
		}
		MesSession session = this.getSession(c);
		TUser tuser = session.getUser();
		int udia = tuser.getDiamonds();
		if(udia<dia) {
			return false;
		}
		
		tuser.setDiamonds(udia-dia);
		mapper.updateOne(tuser);
		sendDiamonds(c,tuser.getDiamonds(),-1*dia);
		return true;
	}
	
	/**
	 * 增加宝石
	 * @param dia
	 * @param c
	 * @return
	 */
	protected boolean addDiamonds(int dia,Channel c) {
		if(dia<1) {
			return false;
		}
		if(!this.hasSession(c)) {
			return false;
		}
		MesSession session = this.getSession(c);
		TUser tuser = session.getUser();
		int udia = tuser.getDiamonds();
		tuser.setDiamonds(udia+dia);
		mapper.updateOne(tuser);
		sendDiamonds(c,tuser.getDiamonds(),dia);
		return true;
	}
	
	/**
	 * 宝石变化
	 * @param c
	 * @param diamonds 现有宝石
	 * @param dia 变化量 +/-
	 */
	private void sendDiamonds(Channel c,int diamonds,int dia) {
		ByteBuf send = this.startSend();
		this.writeInt(send,3);
		this.writeInt(send,diamonds);
		this.writeInt(send,dia);
		this.endSend(send);
		this.sendData(send, c);
	}
	
	/**
	 * 金钱变化
	 * @param c
	 * @param golds 现有金钱
	 * @param gol 变化量 +/-
	 */
	private void sendGolds(Channel c,int golds,int gol) {
		ByteBuf send = this.startSend();
		this.writeInt(send,2);
		this.writeInt(send,golds);
		this.writeInt(send,gol);
		this.endSend(send);
		this.sendData(send, c);
	}
	
	protected void addExp(int exp_,Channel c) {
		if(exp_<=0) {
			return;
		}
		if( !this.hasSession(c) ) {
			return;
		}
		//List<SysRolelevel> explsit = gameDatas.getSysRolelevellist();
		TUser user = this.getUser(c);
		int exp = user.getExp() + exp_;
		user.setExp(exp);
		
		SysRolelevel lv = gameDatas.getSysRolelevelMap().get(user.getLv());
		
		boolean update = false;
		while(exp>=lv.getAllExp() && user.getLv()<gameDatas.getMaxlv()) {//可以升级
			user.setLv(user.getLv()+1);
			lv = gameDatas.getSysRolelevelMap().get(user.getLv());
			SysSoil soil = lv.getUnlockSoil();
			if(soil!=null ) {
				gameSoilAction.lvSoilUnlock(soil, c);
			}
			if( this.getSession(c).getFactorySession().unLock(user.getLv()) ) {
				gameFactoryAction.sendFactorys(c);
			}
			update = true;
		}
		
		if(update) {
			this.getSession(c).gettItemsSession().setGoodsMAX(user);
		}
		
		mapper.updateOne(user);
		ByteBuf send = this.startSend();
		this.writeInt(send,1);
		this.writeInt(send,user.getLv());
		this.writeInt(send,user.getExp());
		this.endSend(send);
		this.sendData(send, c);
		
		TStagemap tStagemap = this.getSession(c).getStagemap();
		List<SysStagemap> list = gameDatas.getSysStagemapList();
		for (SysStagemap sysStagemap : list) {
			if(sysStagemap.getBeforeId() <= user.getLv() ){
				tStagemap.setStatus(sysStagemap.getId());
				tStagemap.setMid(sysStagemap.getId());
				tStagemapMapper.updateOne(tStagemap);
			}else {
				break;
			}
		}
		
//		boolean isClear = count==items.length;
//		if(isClear) {
//			//SysStagemap nstage;// = gameDatas.getSysStagemapMap().get(mid);
//			List<SysStagemap> list = gameDatas.getSysStagemapList();
//			for (SysStagemap sysStagemap : list) {
//				if(sysStagemap.getBeforeId() == stage.getId()) {
//					tStagemap.setStatus(sysStagemap.getId());
//					tStagemap.setMid(sysStagemap.getId());
//					break;
//				}
//			}
//		}
	}
}
GameBattleAction.java
package com.maoxiaolu.gamex1.abteam.Actions;

import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.maoxiaolu.gamex1.abteam.MesSession;
import com.maoxiaolu.gamex1.abteam.SessionAction;
import com.maoxiaolu.gamex1.abteam.TItemsSession;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TBattleMapper;
import com.maoxiaolu.gamex1.dao.mapper.TRobotMapper;
import com.maoxiaolu.gamex1.dao.mapper.TTransportMapper;
import com.maoxiaolu.gamex1.dao.mapper.UWxuserMapper;
import com.maoxiaolu.gamex1.dao.tables.SysRobot;
import com.maoxiaolu.gamex1.dao.tables.TBattle;
import com.maoxiaolu.gamex1.dao.tables.TRobot;
import com.maoxiaolu.gamex1.dao.tables.TTransport;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.sub.PkRobot;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyUtil;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

@Component
public class GameBattleAction extends SessionAction {
	@Autowired
	TTransportMapper tTransportMapper;
	@Autowired
	GameInfoAction gameInfoAction;
	@Autowired
	GameItemsAction gameItemsAction;
	@Autowired
	GameFactoryAction gameFactoryAction;
	@Autowired
	UWxuserMapper uWxuserMapper;
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TRobotMapper tRobotMapper;
	@Autowired
	TBattleMapper tBattleMapper;
	
	private int ttime = 60*60 * 1;
	private int ptime = 20*60;

	@Override
	protected void init(MesSession session) {
	}

	@Override
	protected void exec(int key, ByteBuf readbf, Channel c) throws Exception {
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		int uid = user.getId();
		TTransport tTransport = tTransportMapper.selectOne(user.getId());
		
		int subid = readbf.readInt();
		if(subid==7) {//保护罩
			int now = StaticValues.getGameNow();
			TTransport tp = tTransportMapper.selectOne(uid);
			if(now >= tp.getProcd()) {
				tp.setProcd(now + ptime);
				tTransportMapper.updateProcd(tp);
				ByteBuf send = this.startSend();
				this.writeInt(send, subid);
				this.writeInt(send, tp.getUid());
				int t = tp.getProcd() - now;
				this.writeInt(send, t);
				this.endSend(send);
				this.sendData(send, c);
			}
		}
		else if(subid==6) {//单条战报
			int id = readbf.readInt();
			TBattle tb = tBattleMapper.selectListById(id);
			ByteBuf send = this.startSend();			
			this.writeInt(send, subid);
			this.writeUTF(send, tb.getUavatarUrl());
			this.writeUTF(send, tb.getUnickName());
			this.writeInt(send, tb.getUlv());
			this.writeUTF(send, tb.getEavatarUrl());
			this.writeUTF(send, tb.getEnickName());
			this.writeInt(send, tb.getElv());
			this.writeUTF(send, tb.getBattle());
			this.endSend(send);
			this.sendData(send, c);
		}
		else if(subid==5) {//战报列表
			List<TBattle> list = tBattleMapper.selectListByShowid(uid);
			ByteBuf send = startSend();
			this.writeInt(send, subid);
			this.writeInt(send, list.size());
			for (int i = 0; i < list.size(); i++) {
				TBattle tb = list.get(i);
				String time = MyUtil.SDF0.format(new Date(tb.getCtime().getTime()));
				
				
				String[] arr = tb.getBattle().split(",");
				int addgole = Integer.parseInt(arr[0]);
				int winer   = Integer.parseInt(arr[1]);
				
				this.writeInt(send, tb.getId());
				this.writeInt(send, winer);
				this.writeInt(send, addgole);
				this.writeInt(send, tb.getUid());
				this.writeInt(send, tb.getEid());
				
				if(tb.getUid()!=uid) {
					this.writeInt(send, tb.getUgender());
					this.writeUTF(send, tb.getUavatarUrl());
					this.writeUTF(send, tb.getUnickName());
					this.writeInt(send, tb.getUlv());
				}else {
					this.writeInt(send, tb.getEgender());
					this.writeUTF(send, tb.getEavatarUrl());
					this.writeUTF(send, tb.getEnickName());
					this.writeInt(send, tb.getElv());
				}			
				this.writeUTF(send, time);
			}
			this.endSend(send);
			this.sendData(send, c);
			
		}
		else if(subid == 4) {//发起拦截
			int eid = readbf.readInt();
			TTransport my = tTransportMapper.selectOne(uid);
			TRobot myrobot = tRobotMapper.selectOneByUid(uid);
			
			TTransport em = tTransportMapper.selectOne(eid);
			TRobot enrobot = tRobotMapper.selectOneByUid(eid);
			
			int now = StaticValues.getGameNow();
			if(now < em.getProcd()) {
				ByteBuf send = this.startSend();
				this.writeInt(send, subid);
				this.writeInt(send, em.getUid());
				int t = em.getProcd() - now;
				this.writeInt(send, t);
				this.endSend(send);
				this.sendData(send, c);
				return;
			}
			
			
			TBattle tb = new TBattle();
			Object[] rs = this.getBattle(myrobot,enrobot);
			
			int winer = (int )rs[0];
			String battle = (String)rs[1];
			
			tb.setEid(eid);
			tb.setUid(uid);
			
			
			int addgole = 0;
			tb.setGoldEx(addgole);
			
			my.setNum(my.getNum()+1);
			if(winer == my.getUid()) {//拦截成功
				addgole = (int)(em.getAddgold() * Math.random());
				em.setAddgold(em.getAddgold() - addgole );
				my.setAddgold(my.getAddgold() + addgole );
			}
			tTransportMapper.updateOne(em);
			tTransportMapper.updateOne(my);
			
			tb.setUavatarUrl(my.getAvatarUrl());
			tb.setUgender(my.getGender());
			tb.setUlv(my.getLv());
			tb.setUnickName(my.getNickName());
			
			tb.setEavatarUrl(em.getAvatarUrl());
			tb.setEgender(em.getGender());
			tb.setElv(em.getLv());
			tb.setEnickName(em.getNickName());
			
			
			
			ByteBuf send = this.startSend();			
			this.writeInt(send, subid);
			
			this.writeUTF(send, my.getAvatarUrl());
			this.writeUTF(send, my.getNickName());
			this.writeInt(send, my.getLv());
			
			this.writeUTF(send, em.getAvatarUrl());
			this.writeUTF(send, em.getNickName());
			this.writeInt(send, em.getLv());
			
//			this.writeInt(send, winer);
//			this.writeInt(send, addgole);
			battle = addgole + "," + battle;
			tb.setBattle(battle);
			this.writeUTF(send, battle);
			this.endSend(send);
			this.sendData(send, c);
			
			tb.setShowid(my.getUid());
			tBattleMapper.insertOne(tb);
			tb.setShowid(em.getUid());
			tBattleMapper.insertOne(tb);
			
		}
		else if(subid==3) {//拦截场景列表
			ByteBuf send = this.startSend();
			List<TTransport> list = tTransportMapper.getListTran(uid, StaticValues.getGameNow());
			TTransport tp = tTransportMapper.selectOne(uid);
			this.writeInt(send, subid);
			this.writeInt(send, tp.getNum());
			this.writeInt(send, list.size()+1);
			sendTListOne(tp,send);
			for (int i = 0; i < list.size(); i++) {
				tp = list.get(i);
				tp.setScount(tp.getScount()+1);
				tTransportMapper.updateScount(tp);
				sendTListOne(tp,send);
			}
			this.endSend(send);
			this.sendData(send, c);
		}
		else if(subid==1) {//起飞运输
			int aid = readbf.readInt();
			if(aid!=1 && aid!=2) {
				return;
			}
			
			TItemsSession items = session.gettItemsSession();
			if(items.getGoodsV()<=0) {//没装货不要发车
				return;
			}
			
			if(StaticValues.getGameNow() >= tTransport.getCd() && tTransport.getGold()==0) {
				int cd  = ttime;//飞行6小时
				int cri = 1;  //售卖倍数
				
				if(aid==2) {//大型运输机 100钻
					cd = ttime/3;
					cri = 2;
					if( !gameInfoAction.subDiamonds(100, c) ) {
						return;
					}
				}
				
				int[] arr = items.sellAndClear();
				int gold = arr[0] * cri;
				int exp  = arr[1];
				
				int g1 = gold * 70 / 100;
				int g2 = gold - g1;
				if(g1<1)g1=1;
				if(g2<1)g2=1;
				
				tTransport.setGold(g1);
				tTransport.setAddgold(g2);
				
				tTransport.setExp(exp);
				
				
				tTransport.setCd(StaticValues.getGameNow() + (cd));
				
				tTransport.setNum(0);
				tTransport.setAid(aid);
				tTransport.setBid(0);				
				tTransport.setScount(0);
				tTransportMapper.updateOne(tTransport);
				this.sendTransport(c,1);
				//gameItemsAction.sendItems(c);
				tTransport.setAvatarUrl( session.getAvatarUrl() );
				tTransport.setNickName( session.getNickName() );
				tTransport.setGender(  session.getGender() );
				tTransport.setLv( session.getUser().getLv() );
				tTransportMapper.updateInfo(tTransport);
				
				
				gameItemsAction.sendGoods(c);
				gameFactoryAction.sendFactorys(c);
				
				
			}
		}
		else if(subid==2) {//收取货款
			if(StaticValues.getGameNow() >= tTransport.getCd() && tTransport.getGold()>=0) {
				gameInfoAction.addGold(tTransport.getGold() + tTransport.getAddgold(), c);
				gameInfoAction.addExp(tTransport.getExp(), c);
				tTransport.setAddgold(0);
				tTransport.setGold(0);
				tTransport.setExp(0);
				tTransport.setCd(0);
				
				tTransport.setAid(0);
				tTransport.setNum(0);
				tTransport.setBid(0);
				tTransportMapper.updateOne(tTransport);
				this.sendTransport(c,2);
			}
		}
	}
	
	private Object[] getBattle(TRobot myrobot, TRobot enrobot) {
		int k[] = new int[10];
		for (int i = 0; i < k.length; i++) {
			k[i] = (int)(Math.random()*10);
		}
		
		SysRobot sysr = gameDatas.getSysRobotMap().get(myrobot.getRid());
		int atk = sysr.getRobotAttk() +  ( (myrobot.getLv() - 1) * sysr.getAttkCoefficient() );
		int hp = sysr.getRobotHp() + ( (myrobot.getLv() - 1) * sysr.getHpCoefficient() );
		PkRobot mr = new PkRobot(myrobot.getUid(),atk,hp);
		
		sysr = gameDatas.getSysRobotMap().get(enrobot.getRid());
		atk = sysr.getRobotAttk() +  ( (enrobot.getLv() - 1) * sysr.getAttkCoefficient() );
		hp = sysr.getRobotHp() + ( (enrobot.getLv() - 1) * sysr.getHpCoefficient() );
		PkRobot er = new PkRobot(enrobot.getUid(),atk,hp);
		
		String 
		ss = myrobot.getUid() + "," + myrobot.getRid() + "," + myrobot.getLv() + ",";
		ss +=enrobot.getUid() + "," + enrobot.getRid() + "," + enrobot.getLv() + ",";
		ss += this.pk(er,mr,k);
		ss = ( mr.getHp()>0?mr.getUid():er.getUid() ) + "," + ss;
		
		return new Object[] {mr.getHp()>0?mr.getUid():er.getUid(),ss};
	}
	/**
	 * 
	 * @param ar 攻击者
	 * @param dr 防御者
	 * @param k  
	 * @return
	 */
	private String pk(PkRobot ar, PkRobot dr, int[] k) {
		int i = 0;
		PkRobot tr;
		String ss = "";
		while(ar.getHp()>0 && dr.getHp()>0) {
			int atk = ar.getAtk() + k[i++];
			dr.setHp(dr.getHp() - atk);
			if(i>=k.length)i=0;
			tr = ar;
			ar = dr;
			dr = tr;
			ss += atk + ",";
		}
		return ss.substring(0, ss.length()-1);
	}

	public void sendTListOne(TTransport tTransport , ByteBuf send) {
		int now = StaticValues.getGameNow();
		this.writeInt(send, tTransport.getUid());
		int t = tTransport.getCd() - now;
		if(t<0)t=0;
		this.writeInt(send, t);
		this.writeInt(send, tTransport.getAid());
		this.writeInt(send, tTransport.getGender());
		this.writeUTF(send, tTransport.getAvatarUrl());
		this.writeUTF(send, tTransport.getNickName());
		this.writeInt(send, tTransport.getLv());
		
		
		t = (tTransport.getProcd() - now);
		if(t<0)t=0;
		this.writeInt(send, t);
		
		
	}
	
	public void sendTransport(Channel c) {
		this.sendTransport(c, 0);
	}

	protected void sendTransport(Channel c,int subid) {
		if(!hasSession(c))return;
		MesSession session = this.getSession(c);
		TUser user = session.getUser();
		TTransport tTransport = tTransportMapper.selectOne(user.getId());
		ByteBuf send = this.startSend();
		int t = tTransport.getCd() - StaticValues.getGameNow();
		if(t<0)t=0;
		int cd  = ttime;//飞行600秒
		if(tTransport.getAid()==2) {//大型运输机
			cd = ttime/2;
		}
		this.writeInt(send, subid);
		this.writeInt(send, t);
		this.writeInt(send,	 cd);
		this.writeInt(send, tTransport.getGold() );
		this.writeInt(send, tTransport.getAddgold() );
		this.endSend(send);
		this.sendData(send, c);
	}
}
FactorySession.java
package com.maoxiaolu.gamex1.abteam;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.abteam.Actions.GameErrorAction;
import com.maoxiaolu.gamex1.abteam.Actions.GameInfoAction;
import com.maoxiaolu.gamex1.abteam.Actions.StaticErrorID;
import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TFactoryMapper;
import com.maoxiaolu.gamex1.dao.tables.SysCompose;
import com.maoxiaolu.gamex1.dao.tables.SysFactorybase;
import com.maoxiaolu.gamex1.dao.tables.SysIteam;
import com.maoxiaolu.gamex1.dao.tables.TFactory;
import com.maoxiaolu.gamex1.util.StaticValues;
import com.maoxiaolu.utils.maoutils.MyBinaryTree;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class FactorySession {
	
	@Autowired
	GameDatas gameDatas;
	@Autowired
	TFactoryMapper tFactoryMapper;
	@Autowired
	GameErrorAction error;
	@Autowired
	GameInfoAction gameInfoAction;
	
	private int addSpeed = 50;
	
	private final MyBinaryTree tree_ = new MyBinaryTree(20);
	
	private final HashMap<Integer,TFactory> tFactoryMap = new HashMap<Integer, TFactory>();
	
	private List<TFactory> tFactoryList;
	
	private final HashSet<TFactory> stop2set = new HashSet<>();
	//private final HashSet<TFactory> stop1set = new HashSet<>();
	
	
	protected MesSession mesSession;
	
	public FactorySession(MesSession mesSession) {
		this.mesSession = mesSession;
	}

	public List<TFactory> getList() {
		if(tFactoryList == null) {
			setList(tFactoryMapper.selectListByUid(this.mesSession.getUser().getId()));
		}
		return tFactoryList;
	}
	
	public int getItemCD(SysIteam item , TFactory f) {
		int itemcd   = item.getIteamCd();
		if(f.getSpeedId()==1) {
			itemcd  = itemcd * addSpeed / 100;
		}
		int skillv = this.mesSession.useSkill(2);//超级制作
		if(skillv>0 && skillv<1000) {
			itemcd = itemcd * (1000-skillv) / 1000;
		}
		return itemcd;
	}
	
	private void setList(List<TFactory> tFactoryList) {
		getMap().clear();
		stop2set.clear();
		this.tFactoryList = tFactoryList;
		for (TFactory tFactory : tFactoryList) {
			tFactoryMap.put(tFactory.getFid(), tFactory);
			if(tFactory.getStatus() == StaticValues.F_Pause_2_Factory) {
				stop2set.add(tFactory);
			}
			//tree.addObj(tFactory);
		}
	}
	

	public HashMap<Integer,TFactory> getMap() {
		return tFactoryMap;
	}
	
	public boolean unLock(int lv) {
		boolean rs = false;
		List<TFactory> list = this.getList();
		for (TFactory tFactory : list) {
			if( tFactory.getItemId()<0 ) {
				SysFactorybase sf = gameDatas.getSysFactorybaseMap().get(tFactory.getFid());
				if(lv >= sf.getUnlocklevel()) {
					tFactory.setItemId(0);
					tFactory.setStatus(StaticValues.F_Shutdown_Factory);
					tFactoryMapper.updateOne(tFactory);
					rs = true;
				}
			}
		}
		return rs;
	}
	
	public TFactory startWork(int fid,int itemId) {
		TFactory f = this.tFactoryMap.get(fid);
		TItemsSession items = mesSession.gettItemsSession();
		if(f==null) {
			error.SendError(StaticErrorID.TFactory_Null, this.mesSession.getChannel());
			return null;
		}
		if(f.getItemId()<0) {
			error.SendError(StaticErrorID.TFactory_lcok, this.mesSession.getChannel());
			return null;
		}
		if(f.getStatus()!=StaticValues.F_Shutdown_Factory) {
			error.SendError(StaticErrorID.TFactory_Busy, this.mesSession.getChannel());
			return null;
		}
		
		SysCompose compose = gameDatas.getSysComposeMap().get(itemId);
		if(compose==null) {
			error.SendError(StaticErrorID.TFactory_Compose_Null, this.mesSession.getChannel());
			return null;
		}
		
		int rnow = StaticValues.getGameNow();//真实时间轴
		//SysFactorylevel fl = gameDatas.getSysFactorylevelMap().get(fid);
		SysFactorybase fb = gameDatas.getSysFactorybaseMap().get(fid);
		SysIteam item = gameDatas.getSysIteamMap().get(itemId);
		
		
		/*生产线运行时间*/
		int workTime = fb.getFactoryTime()+((f.getLv()-1)*fb.getGrowFactory());
		/*物品生产时间*/
		int itemcd = getItemCD(item,f);
		int st = rnow;
		int wet = st +  workTime;
		int iet = st +  itemcd;
		if(iet>wet) {
			error.SendError(StaticErrorID.TFactory_No_LV, this.mesSession.getChannel());
			return null;
		}
		
		f.setItemId(item.getId());
		f.setEt(wet);
		f.setCd(workTime);
		f.setItemSt(st);
		f.setItemEt(iet);
		f.setItemCd(itemcd);
		
		f.setStatus(StaticValues.F_Running_Factory);
		f.setStept(f.getItemEt());
		f.setStopt(-1);
		//f.setStopInt(0);
		
		if(!items.useItem(compose)) {//没材料
//			error.SendError(StaticErrorID.TFactory_Compose, this.mesSession.getChannel());
//			return null;
			this.stopFactory(f, StaticValues.F_Pause_1_Factory, st);
		}
		
		if(items.goodsCapacity()<=0) {//没容量
//			error.SendError(StaticErrorID.TFactory_Capacity, this.mesSession.getChannel());
//			return null;
			this.stopFactory(f, StaticValues.F_Pause_2_Factory, st);
		}
		
		tFactoryMapper.updateOne(f);
		return f;
	}
	
	private boolean loopWarning(int loop) {
		if(loop>100000) {
			try {
				throw new Exception("loop > 100000 ! loop > 100000 ! loop > 100000 !");
			}catch(Exception e) {
				e.printStackTrace();
			}
			return true;
		}
		return false;
	}
	
	public int checkIteam(int iteam) {
		int i = 0;
		for (TFactory f : this.getList()) {
			if( f.getItemId() == iteam ) {
				i++;
			}
		}
		return i;
	}
	
	
	public void runFactory() {
		int now = StaticValues.getGameNow();
		int k = 0;
		int loop = 0;
		do {
			if(loopWarning(loop++))return;
			k = 0;
			
			for (TFactory f : this.getList()) {
				if(loopWarning(loop++))return;
				this.lvupOver(f);
				if(f.getStatus()==StaticValues.F_Running_Factory && now>=f.getStept()) {
					this.tree_.addObj(f);
					k++;
				}
			}
			
			while(this.tree_.getLen()>0) {
				if(loopWarning(loop++))return;
				TFactory f = (TFactory)this.tree_.getTop();
				this.addItem(f);
				if(f.getStatus()==StaticValues.F_Running_Factory && now>=f.getStept()) {
					this.tree_.addObj(f);
				}
			}
			
			
		}while(k>0);
		//System.out.println("TFactory loop " + loop);
	}
	
	// 0正常运作 1没材料暂停 2仓库满暂停 -1停止运转
	private void addItem(TFactory f) {
		TItemsSession it = mesSession.gettItemsSession();
		// int rnow = StaticValues.getGameNow();
		int stepTime = f.getStept();
		// if(rnow >= f.getStept()) {
		int itemid = f.getItemId();
		SysIteam sysIteam = gameDatas.getSysIteamMap().get(itemid);
		it.addItem(itemid, sysIteam.getCollectNum());
		
		if(it.itemsCapacity()>=1) {
			int skillv = mesSession.useSkill(4);//制造能手
			if(skillv>0) {
				if ( (Math.random() * 1000) < skillv ) {
					it.addItem(itemid, 1);
				}
			}
		}
		
		int itemcd = getItemCD(sysIteam,f);
		f.setItemCd(itemcd);
		f.setItemSt(stepTime);
		f.setItemEt(stepTime + itemcd);
		f.setStept(f.getItemEt());

		if (f.getStept() > f.getEt()) {
			f.setStatus(StaticValues.F_Shutdown_Factory);
			f.setItemId(0);
			f.setStept(Integer.MAX_VALUE);
			f.setSpeedId(0);
		}else {
			SysCompose compose = gameDatas.getSysComposeMap().get(itemid);
			if (!it.useItem(compose)) {
				this.stopFactory(f, StaticValues.F_Pause_1_Factory, stepTime);
			}
		}
		if (it.goodsCapacity() <= 0) {// 如果仓库满了停止所有生产线
			stopAllFactory(stepTime);
		}
		tFactoryMapper.updateOne(f);
//		else {
//			star2All(stepTime);
//		}
	}
	
	protected void stopAllFactory(int stopTime) {
		for (TFactory tFactory : this.tFactoryList) {
			if(tFactory.getStatus()==StaticValues.F_Running_Factory) {
				this.stopFactory(tFactory, StaticValues.F_Pause_2_Factory, stopTime);
				stop2set.add(tFactory);
			}
		}
	}
	
	/**开始爆仓生产线*/
	protected void star2All(int startT) {
		for (TFactory tFactory : this.stop2set) {
			startFactory(tFactory,startT);
		}
		this.stop2set.clear();
		this.runFactory();
	}
	
	/** 开始无材料生产线  */
	public void star1All(int startT) {
		List<TFactory> list = getList();
		for (TFactory f : list) {
			if(f.getStatus()==StaticValues.F_Pause_1_Factory) {
				SysCompose compose = gameDatas.getSysComposeMap().get(f.getItemId());
				if (this.mesSession.gettItemsSession().useItem(compose)) {
					this.startFactory(f, startT);
				}
			}
		}
//		if(this.mesSession.gettItemsSession().goodsCapacity()>=0) {
//			this.star2All(startT);
//		}
		this.runFactory();
	}

	private void startFactory(TFactory f,int startT) {
		if(f.getStatus()==StaticValues.F_Shutdown_Factory)return;
		if(f.getStatus()==StaticValues.F_Running_Factory)return;
		if(f.getStatus()==StaticValues.F_Running_Levelup)return;
				
		int stopInt=startT - f.getStopt();
		if(stopInt<0)stopInt=0;
		f.setStopt(-1);
		f.setEt(f.getEt() + stopInt);
		int st = f.getItemSt();
		if(st!=0) {
			f.setItemSt(st + stopInt);
		}
		f.setItemEt(f.getItemEt()+ stopInt);
		f.setStept(f.getItemEt());
		f.setStatus(StaticValues.F_Running_Factory);
		tFactoryMapper.updateOne(f);
	}
	
	private void stopFactory(TFactory f,int status,int stopT) {
		if(f.getStatus()==StaticValues.F_Shutdown_Factory)return;
		if(f.getStatus()==StaticValues.F_Pause_1_Factory )return;
		if(f.getStatus()==StaticValues.F_Running_Levelup )return;
		f.setStopt(stopT);
		f.setStatus(status);
		tFactoryMapper.updateOne(f);
	}
	
	public boolean addSpeed(int fid) {
		TFactory f = this.tFactoryMap.get(fid);
		if(f==null || f.getStatus()==StaticValues.F_Shutdown_Factory)return false;
		if(f.getItemId()<0)return false;
		
		SysFactorybase fb = gameDatas.getSysFactorybaseMap().get(fid);
		
		if(f.getStatus()==StaticValues.F_Running_Levelup) {
			int diamond = fb.getLevelDiamond() + (fb.getGrowDiamond() * (f.getLv()-1));
			if(!gameInfoAction.subDiamonds(diamond, this.mesSession.getChannel())) {
				return false;
			}
			f.setEt(0);
			this.lvupOver(f);
			return true;
		}else {
			if(f.getSpeedId()==1)return false;
			SysIteam sysi = gameDatas.getSysIteamMap().get(f.getItemId());
			if(sysi==null) {
				return false;
			}
			int diamond = sysi.getLevelDiamond();// + (fb.getGrowDiamond() * (f.getLv()-1));
			if(!gameInfoAction.subDiamonds(diamond, this.mesSession.getChannel())) {
				return false;
			}
			SysIteam sysIteam = gameDatas.getSysIteamMap().get(f.getItemId());
			int itemcd = f.getItemCd();
			int st = f.getItemSt();
			if(st==0) {
				st = f.getItemEt() - itemcd;
			}
			f.setSpeedId(1);
			itemcd = getItemCD(sysIteam,f);
			
			f.setItemSt(st);
			f.setItemEt(st + itemcd);
			f.setItemCd(itemcd);
			f.setStept(f.getItemEt());
			tFactoryMapper.updateOne(f);
			return true;
		}
	}

	public void shutDown(int fid) {
		TFactory f = this.tFactoryMap.get(fid);
		if(f==null || f.getStatus()==StaticValues.F_Shutdown_Factory)return;
		if(f.getStatus()==StaticValues.F_Running_Levelup)return;
		f.setStatus(StaticValues.F_Shutdown_Factory);
		f.setStept(Integer.MAX_VALUE);
		f.setItemId(0);
		f.setSpeedId(0);
		tFactoryMapper.updateOne(f);
	}
	
	

	public void lvup(int fid) {
		TFactory f = this.tFactoryMap.get(fid);
		if(f==null || f.getStatus()==StaticValues.F_Running_Levelup)return;
		if(f.getItemId()<0)return;
		SysFactorybase sf = gameDatas.getSysFactorybaseMap().get(fid);
		int gold = sf.getGrowGold() + ((f.getLv()-1)* sf.getGrowGold());
		if(!gameInfoAction.subGold(gold, this.mesSession.getChannel())) {
			return;
		}
		
		int workTime = sf.getLevelTime() + ((f.getLv()-1)* sf.getGrowTime());
		int rnow = StaticValues.getGameNow();//真实时间轴
		f.setEt(rnow + workTime);
		f.setCd(workTime);
		f.setStept(Integer.MAX_VALUE);
		f.setSpeedId(0);
		f.setItemId(0);
		f.setStatus(StaticValues.F_Running_Levelup);
		tFactoryMapper.updateOne(f);
	}
	
	protected void lvupOver(TFactory f ) {
		if(f.getStatus()==StaticValues.F_Running_Levelup) {
			int rnow = StaticValues.getGameNow();//真实时间轴
			if(rnow>=f.getEt()) {
				f.setLv(f.getLv()+1);
				f.setStatus(StaticValues.F_Shutdown_Factory);
				f.setStept(Integer.MAX_VALUE);
				f.setSpeedId(0);
				tFactoryMapper.updateOne(f);
			}
		}
	}
	
}
Maotp.java
package com.maoxiaolu.gamex1.abteam;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.Arrays;

import io.netty.buffer.ByteBuf;

/**
 * Mao Transfer Protocol
 * @author H&K
 *   
 *  /maotp /length::(int value)(content)
 *  
 */

public class Maotp {
	//maotp_header
	//public final static byte[] MAOTP_HEADER = "/maotp /length::".getBytes();
	
	public static byte[] GetByte(ByteBuffer buffer){
		buffer.flip();
		byte[] b = new byte[buffer.limit()];
		buffer.get(b);
		return b;
	}
	
	public static byte[] GetByte(ByteBuf bf){
		byte[] b = new byte[bf.readableBytes()];
		bf.readBytes(b);
		return b;
	}
	
	/**表示多字节数字的最高有效字节位于字节序列的最前面。*/
	private final static String BIG_ENDIAN = "BIG_ENDIAN";
	
	/**表示多字节数字的最低有效字节位于字节序列的最前面。*/
	private final static String LITTLE_ENDIAN = "LITTLE_ENDIAN";
	
	private static String  Endian = BIG_ENDIAN;
	
	/**
	 *  得到当前的流顺序
	 *  默认为LITTLE_ENDIAN
	 * @return BIG_ENDIAN or LITTLE_ENDIAN
	 */
	public static String MAOTP_ENDIAN (){ return Endian; }
	
	/**
	 * 设置流顺序 <br/>isBigEndian?BIG_ENDIAN:LITTLE_ENDIAN
	 * @param isBigEndian
	 */
	public static void MAOTP_BIG_ENDIAN (boolean isBigEndian){ Endian = isBigEndian?BIG_ENDIAN:LITTLE_ENDIAN; }
	
	public final static byte[] MAOTP_HEADER = "/".getBytes();
	
	
	
	/**
	 * check header
	 * @param b
	 * @return
	 */
	public static boolean checkMaotp(byte[] b){
//		System.out.println(new String(b));
//		System.out.println(new String(MAOTP_HEADER));
		return Arrays.equals(b, MAOTP_HEADER);
	}
	
	/**
	 * 
	 * @param content
	 * @return
	 */
	public static byte[] createMaotp(byte[] content){
						
		byte[] b = new byte[MAOTP_HEADER.length+4+content.length];
		
		int j = 0;
		for(; j < MAOTP_HEADER.length ; j++){
			b[j] = MAOTP_HEADER[j];
		}
		
		int i = content.length;
		//System.out.println(" ii " + i);
		if(Endian == Maotp.BIG_ENDIAN){
			b[j++] = (byte)(( i >> 24) & 0xff) ;		
			b[j++] = (byte)(( i >> 16) & 0xff) ;		
			b[j++] = (byte)(( i >> 8 ) & 0xff) ;		
			b[j++] = (byte)(  i        & 0xff) ;
		}else{
			b[j++] = (byte)(  i        & 0xff) ;
			b[j++] = (byte)(( i >> 8 ) & 0xff) ;
			b[j++] = (byte)(( i >> 16) & 0xff) ;
			b[j++] = (byte)(( i >> 24) & 0xff) ;
		}
		
		
		int k = 0;
		for(; j < b.length ; j++){
			b[j] = content[k++];
		}
		return b;		
	}
	
	public static byte[] createQiutp(byte[] content){
		byte[] b = new byte[4+content.length];
		int j = 0;
		int i = content.length;
		//System.out.println(" ii " + i);
		if(Endian == Maotp.BIG_ENDIAN){
			b[j++] = (byte)(( i >> 24) & 0xff) ;		
			b[j++] = (byte)(( i >> 16) & 0xff) ;		
			b[j++] = (byte)(( i >> 8 ) & 0xff) ;		
			b[j++] = (byte)(  i        & 0xff) ;
		}else{
			b[j++] = (byte)(  i        & 0xff) ;
			b[j++] = (byte)(( i >> 8 ) & 0xff) ;
			b[j++] = (byte)(( i >> 16) & 0xff) ;
			b[j++] = (byte)(( i >> 24) & 0xff) ;
		}
		int k = 0;
		for(; j < b.length ; j++){
			b[j] = content[k++];
		}
		return b;
	}
	
	public static String GetUtf(ByteBuffer bb){
		Short i = GetShort(bb);
		byte tem[] = new byte[i];
		bb.get(tem);
		
		try {
			return new String(tem,"UTF-8");
		} catch (UnsupportedEncodingException e) {			
			e.printStackTrace();
		}
		return new String(tem);
	}
	
	public static void putUtf(ByteBuffer bb ,String str ){
		
		byte b[];
		try {
			b = str.getBytes("UTF-8");
			Maotp.PutShort(bb,(short)b.length);		
			bb.put(b);
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}		
	}
	
	
	/**
	 * 
	 * @param bb
	 * @param content
	 * @return
	 */
	public static ByteBuffer createMaotp(ByteBuffer bb , byte[] content){		
		int i = content.length;
		bb.put(MAOTP_HEADER);
		bb.putInt(i);
		bb.put(content);		
		return bb;
	}
	
	public static void WriteInt(byte[] bb , int i , int index){
		if(Endian == Maotp.BIG_ENDIAN){
			bb[index + 3] = (byte) ( i        &0xff);
			bb[index + 2] = (byte) ((i >>  8) &0xff);
			bb[index + 1] = (byte) ((i >> 16) &0xff);
			bb[index + 0] = (byte) ((i >> 24) &0xff);
		}else{			
			bb[index + 0] = (byte) ( i        &0xff);
			bb[index + 1] = (byte) ((i >>  8) &0xff);
			bb[index + 2] = (byte) ((i >> 16) &0xff);
			bb[index + 3] = (byte) ((i >> 24) &0xff);
		}
	}
	
	public static int ActionId(byte[] dataArr  ){		
		if(Endian == Maotp.BIG_ENDIAN){
			return bytes2Int(dataArr[0], dataArr[1], dataArr[2], dataArr[3]);
		}else{
			return bytes2Int(dataArr[3], dataArr[2], dataArr[1], dataArr[0]);
		}	
	}
	
	public static void PutInt(ByteBuffer bb , int i  ){		
		if(Endian == Maotp.BIG_ENDIAN){
			bb.putInt(i);
		}else{
			byte tem[] = new byte[4];
			tem[0] = (byte) ( i        &0xff);
			tem[1] = (byte) ((i >>  8) &0xff);
			tem[2] = (byte) ((i >> 16) &0xff);
			tem[3] = (byte) ((i >> 24) &0xff);						
			bb.put(tem);
		}	
	}
	
	public static void Putlong2AS(ByteBuffer bb , long i  ){
		PutInt(bb, (int)(i / 10000000l) );
		PutInt(bb, (int)(i % 10000000l) );
	}
	
	
	public static int GetInt(ByteBuffer bb ){
		int i = 0;
		if(Endian == Maotp.BIG_ENDIAN){
			i = bb.getInt();
		}else{
			byte tem[] = new byte[4];
			tem[0] = bb.get();
			tem[1] = bb.get();
			tem[2] = bb.get();
			tem[3] = bb.get();						
			i = Maotp.bytes2Int(tem[3], tem[2], tem[1], tem[0]) ;
		}
		return i;		
	}
	
	public static void PutShort(ByteBuffer bb , short i  ){		
		if(Endian == Maotp.BIG_ENDIAN){
			bb.putShort(i);
		}else{
			byte tem[] = new byte[2];
			tem[0] = (byte) ( i        &0xff);
			tem[1] = (byte) ((i >>  8) &0xff);									
			bb.put(tem);
		}	
	}
	
	
	public static short GetShort(ByteBuffer bb ){
		short i = 0;
		if(Endian == Maotp.BIG_ENDIAN){
			i = bb.getShort();
		}else{
			byte tem[] = new byte[2];
			tem[0] = bb.get();			
			tem[1] = bb.get();			
			i = Maotp.bytes2Short(tem[1], tem[0]) ;
		}
		return i;		
	}
	
	public static void PutLong(ByteBuffer bb , long i ){		
		if(Endian == Maotp.BIG_ENDIAN){
			bb.putLong(i);
		}else{
			byte tem[] = new byte[8];
			tem[0] = (byte) ( i        &0xff);
			tem[1] = (byte) ((i >>  8) &0xff);
			tem[2] = (byte) ((i >> 16) &0xff);
			tem[3] = (byte) ((i >> 24) &0xff);
			tem[4] = (byte) ((i >> 32) &0xff);
			tem[5] = (byte) ((i >> 40) &0xff);
			tem[6] = (byte) ((i >> 48) &0xff);
			tem[7] = (byte) ((i >> 56) &0xff);
			bb.put(tem);
		}	
	}
	
	
	public static long GetLong(ByteBuffer bb){
		long i = 0;
		if(Endian == Maotp.BIG_ENDIAN){
			i = bb.getLong();
		}else{
			byte tem[] = new byte[8];
			tem[0] = bb.get();
			tem[1] = bb.get();
			tem[2] = bb.get();
			tem[3] = bb.get();						
			tem[4] = bb.get();
			tem[5] = bb.get();
			tem[6] = bb.get();
			tem[7] = bb.get();
			i = Maotp.bytes2Long(tem[7], tem[6], tem[5], tem[4],tem[3], tem[2], tem[1], tem[0]) ;
		}
		return i;		
	}
	
	
	public static int bytes2Int(byte b1, byte b2, byte b3, byte b4){
		int i =  (b1&0xff) << 24  ;
		i = i | ((b2&0xff) << 16 ); 
		i = i | ((b3&0xff) << 8  );
		i = i |  (b4&0xff)        ;				
		return i;
	}
	
	public static short bytes2Short(byte b1, byte b2){
		int i =      (b1& 0xff ) << 8 ;		
			i =  i | (b2& 0xff )      ;				
		return (short)i;
	}
	
	public static long bytes2Long(byte b1, byte b2, byte b3, byte b4 , byte b5, byte b6, byte b7, byte b8){
		long i = (b1&0xffl) << 56;		
		i = i | ((b2&0xffl) << 48); 
		i = i | ((b3&0xffl) << 40);
		i = i | ((b4&0xffl) << 32);		
		i = i | ((b5&0xffl) << 24); 
		i = i | ((b6&0xffl) << 16);
		i = i | ((b7&0xffl) << 8);
		i = i |  (b8&0xffl);		
		return i;
	}
	
}
MesSession.java
package com.maoxiaolu.gamex1.abteam;

import java.util.Enumeration;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.maoxiaolu.gamex1.config.GameDatas;
import com.maoxiaolu.gamex1.dao.mapper.TActionMapper;
import com.maoxiaolu.gamex1.dao.mapper.TStagemapMapper;
import com.maoxiaolu.gamex1.dao.tables.SysRobot;
import com.maoxiaolu.gamex1.dao.tables.SysSkill;
import com.maoxiaolu.gamex1.dao.tables.TAction;
import com.maoxiaolu.gamex1.dao.tables.TRobot;
import com.maoxiaolu.gamex1.dao.tables.TStagemap;
import com.maoxiaolu.gamex1.dao.tables.TUser;
import com.maoxiaolu.gamex1.dao.tables.UWxuser;
//import com.nekomajinj.event.GameEventDispatcher;
import com.maoxiaolu.gamex1.util.StaticValues;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
import io.netty.util.Attribute;
import io.netty.util.AttributeKey;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class MesSession {//extends GameEventDispatcher
	
	private static final java.util.concurrent.ConcurrentHashMap<Integer, MesSession> 
	MesSessionMap = new ConcurrentHashMap<>();
	
	public int chatCD = 0;
	
	public static MesSession GetMessionByUid(int uid) {
		MesSession m = MesSessionMap.get(uid);
		System.out.println(" get "+uid+ " : "+m);
		return m;
	}
	
	public static void SendAll(ByteBuf send) {
		Enumeration<MesSession> e = MesSessionMap.elements();
		
		byte[] dst = new byte[send.readableBytes()];
		send.readBytes(dst );
		send.release();
		
		while (e.hasMoreElements()) {
			send =  Unpooled.buffer();
			send.writeBytes(dst);
			Channel c = e.nextElement().getChannel();
			c.write(new BinaryWebSocketFrame(send));
			c.flush();
			
		}
	}
	
	
	
	
	@Autowired
	ApplicationContext applicationContext;
	@Autowired
	TStagemapMapper tStagemapMapper;
	@Autowired
	TActionMapper tActionMapper;
	@Autowired
	GameDatas gameDatas;
	
	public MesSession() {
	}
	
	public void init() {
		this.factorySession 
		= applicationContext.getBean(FactorySession.class,this);
		//factorySession.setMesSession(this);
		
		this.tItemsSession
		= applicationContext.getBean(TItemsSession.class,this);
		//tItemsSession.setMesSession(this);
	}
	
	/** 网络连接channel */
	private Channel channel;
	private int status = 0;
	private int intlen = 0;
	private TUser tUser ;
	
	private  TItemsSession tItemsSession;
	//private final FactorySession factorySession = new FactorySession(this);
	private  FactorySession factorySession;

	private TStagemap tStagemap;
	
	private TAction tAction;
	
	private TRobot robot;

	private UWxuser UWxuser;
	
	

	public static AttributeKey<MesSession> SESSION_KEY = AttributeKey.valueOf("session");
	/**
	 * 添加新的会话
	 * @param channel
	 * @param session
	 * @return
	 */
	public static boolean addChannelSession(Channel channel, MesSession session) {
		Attribute<MesSession> sessionAttr = channel.attr(SESSION_KEY);
		session.setChannel(channel);
		return sessionAttr.compareAndSet(null, session);
	}
	
	public static MesSession getSessionBy(Channel channel) {
		Attribute<MesSession> sessionAttr = channel.attr(SESSION_KEY);
		return sessionAttr.get() ;
	}
	
	public static void removeSessionBy(Channel channel) {
		if(channel == null)return;
		
		try {
			Attribute<MesSession> sessionAttr = channel.attr(SESSION_KEY);
			
			if(sessionAttr == null)return;
			MesSession m = sessionAttr.get();
			sessionAttr.set(null);
			if(m == null)return;
			m.setUser(null);
			//m.removeAllEventListener();
		}
		catch(Exception e) { 
			e.printStackTrace(); 
		}
		finally {
			channel.close();
		}

	}
	
	public boolean isClose() {
		if (channel == null) {
			return true;
		}
		return !channel.isActive() ||
			   !channel.isOpen();
	}


	public Channel getChannel() {
		return channel;
	}

	public void setChannel(Channel channel) {
		this.channel = channel;
	}

	public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	public int getIntlen() {
		return intlen;
	}

	public void setIntlen(int intlen) {
		this.intlen = intlen;
	}

	public TUser getUser() {
		return tUser;
	}

	public void setUser(TUser tUser) {
		if(this.tUser!=null) {
			MesSessionMap.remove(this.tUser.getId());
			//System.out.println(" remove " + this.tUser.getId());
			TAction tac = this.getTaction();
			
			int lt = tac.getUlogin(); 
			
			tac.setUlogout(StaticValues.getGameNow());
			int ot = tac.getUlogout();
			if(lt!=0 && ot-lt>0) {
				tac.setUplayt( tac.getUplayt() + (ot-lt) );
				tac.setUlogin(0);
				tActionMapper.updateTimeLog(tac);
			}
		}
		
		this.tUser = tUser;
		if(tUser!=null) {
			MesSessionMap.put(this.tUser.getId(), this);
			TAction tac = this.getTaction();
			tac.setUlogin(StaticValues.getGameNow());
		}
		
	}

	public TItemsSession gettItemsSession() {
		return tItemsSession;
	}

	public FactorySession getFactorySession() {
		return factorySession;
	}
	
	public TStagemap getStagemap() {
		if(this.tStagemap==null) {
			this.tStagemap = tStagemapMapper.selectOneByUid(this.getUser().getId());
		}
		return this.tStagemap;
	} 
	
	public TAction getTaction() {
		if(this.tUser!=null && this.tAction==null) {
			this.tAction = tActionMapper.selectOne(this.tUser.getId());
			if(this.tAction==null) {
				tActionMapper.insertOne(this.tUser.getId());
				this.tAction = tActionMapper.selectOne(this.tUser.getId());
			}
		}
		return this.tAction;
	}
	
	public void setRobot(TRobot robot) {
		this.robot = robot;
	}
	
	public TRobot getRobot() {
		return this.robot;
	}
	
	public int useSkill(int sid) {
		if(this.robot==null)return 0;
		this.robot.getRid();
		SysRobot sysr = gameDatas.getSysRobotMap().get(robot.getRid());
		int[] arr = sysr.getSkillArr();
		if(arr!=null) {
			for (int skillid : arr) {
				SysSkill skill = gameDatas.getSysSkillMap().get(skillid);
				if(skill!=null && sid == skillid) {
					int lv = (this.robot.getLv() - 1);
					if(lv<0)lv = 0;
					int v = skill.getSkillStatus() + lv * skill.getSkillCoefficient();
					return v;
				}
			}
		}
		return 0;
	}

	public void setUwx(UWxuser uwx) {
		this.UWxuser = uwx;
	}
	
	public UWxuser getUwx() {
		return this.UWxuser;
	}
	
	public String getAvatarUrl() {
		if(this.UWxuser!=null)
		return this.UWxuser.getAvatarUrl();
		
		return "";
	}
	
	public String getNickName() {
		if(this.UWxuser!=null)
		return this.UWxuser.getNickName();
		
		return "";
	}
	
	public int getGender() {
		if(this.UWxuser!=null)
		return this.UWxuser.getGender();
		
		return 0;
	}
	
	
	
	
}
