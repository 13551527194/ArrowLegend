{
  "code": "var Image = Laya.Image;\r\nvar Sprite = Laya.Sprite;\r\nimport Game from \"./Game\";\r\nimport GridType from \"./bg/GridType\";\r\nimport BitmapNumber from \"../core/display/BitmapNumber\";\r\nimport Saw from \"../main/scene/battle/saw/Saw\";\r\nimport Hero from \"./player/Hero\";\r\nimport GameThorn from \"./GameThorn\";\r\nimport GameCube from \"../main/scene/battle/GameCube\";\r\nimport BattleFlagID from \"../main/scene/BattleFlagID\";\r\nimport CoinEffect from \"./effect/CoinEffect\";\r\nexport default class GameBG extends Laya.Sprite {\r\n    constructor() {\r\n        super();\r\n        this.maskImg = new Laya.Image();\r\n        this.bottomImg = new Laya.Image();\r\n        this.bgh = 0;\r\n        this._box = new Sprite();\r\n        this._top = new Image();\r\n        this._bossImg = new Image();\r\n        this._bottom = new Image();\r\n        this._topShadow = new Image();\r\n        this._leftShadow = new Image();\r\n        this._door = new Image();\r\n        this.saw = new Saw();\r\n        this._sawInfo = {};\r\n        this._sawInfoZong = {};\r\n        this.npcId = 0;\r\n        this.npcP = new Laya.Point();\r\n        this.npcDic = {};\r\n        GameBG.gameBG = this;\r\n        this.mySp = new Sprite();\r\n        this.mySp.graphics.drawRect(0, 0, GameBG.mw, GameBG.mw, 0x00ff00);\r\n        this.doorNumber = BitmapNumber.getFontClip(0.3);\r\n    }\r\n    static get3D(xx, yy) {\r\n        if (!GameBG.v3d) {\r\n            GameBG.v3d = new Laya.Vector3(0, 0, 0);\r\n        }\r\n        GameBG.v3d.x = (xx - 6);\r\n        let rowNum = GameBG.bgHH / GameBG.ww / 2;\r\n        let delta = GameBG.bgHH % GameBG.ww;\r\n        delta = delta / GameBG.ww;\r\n        GameBG.v3d.z = (yy - rowNum + 0.5) / Game.cameraCN.cos0;\r\n        return GameBG.v3d;\r\n    }\r\n    getBgh() {\r\n        return this.bgh;\r\n    }\r\n    isHit(dx, dy) {\r\n        var dx0 = dx - GameBG.mw2;\r\n        var dy0 = dy - GameBG.mw2;\r\n        var b = false;\r\n        for (let i = 0; i < GameBG.arrsp.length; i++) {\r\n            var element = GameBG.arrsp[i];\r\n            if (this.isHit_(dx0, dy0, element)) {\r\n                b = true;\r\n            }\r\n        }\r\n        return b;\r\n    }\r\n    isHit_(dx, dy, d2) {\r\n        return dx < d2.x + GameBG.ww &&\r\n            dx + GameBG.mw > d2.x &&\r\n            dy < d2.y + GameBG.ww &&\r\n            GameBG.mw + dy > d2.y;\r\n    }\r\n    setZhuan(box) {\r\n    }\r\n    updata(x, y) {\r\n        this.mySp.x = x - GameBG.mw2;\r\n        this.mySp.y = y - GameBG.mw2;\r\n    }\r\n    clear() {\r\n        this._box.removeChildren();\r\n        this.saw.clear();\r\n        this._sawInfo = {};\r\n        this._sawInfoZong = {};\r\n        this.npcId = 0;\r\n        this._npcAni && this._npcAni.removeSelf();\r\n        this._npcAni = null;\r\n    }\r\n    drawR(hasBoss = false) {\r\n        this.npcId = 0;\r\n        var ww = GameBG.ww;\r\n        var k = 0;\r\n        let sp;\r\n        let gType = 0;\r\n        this.addChild(this._box);\r\n        this.addChild(this.saw);\r\n        this._box.cacheAs = \"bitmap\";\r\n        let index3 = 0;\r\n        let rowBox;\r\n        this._box.graphics.clear();\r\n        for (let j = 0; j < GameBG.MAP_ROW; j++) {\r\n            if (GameBG.MAP_COL % 2 == 0) {\r\n                index3++;\r\n            }\r\n            for (let i = 0; i < GameBG.MAP_COL; i++) {\r\n                let gSkin = (index3 % 2 == 0) ? GameBG.BG_TYPE + \"/10.png\" : GameBG.BG_TYPE + \"/11.png\";\r\n                this._box.graphics.drawImage(Laya.loader.getRes(gSkin), i * ww, j * ww, 64, 64);\r\n                index3++;\r\n            }\r\n        }\r\n        var k = 0;\r\n        for (let j = 0; j < GameBG.MAP_ROW; j++) {\r\n            for (let i = 0; i < GameBG.MAP_COL; i++) {\r\n                gType = GameBG.arr0[k];\r\n                if ((GridType.isWall(gType) || (gType >= 1 && gType <= 10))) {\r\n                    let shadow = BgGrid.getOne(GameBG.BG_TYPE + '/y' + GameCube.getType(gType) + '.png');\r\n                    shadow.x = i * ww;\r\n                    shadow.y = j * ww;\r\n                    this._box.addChild(shadow);\r\n                }\r\n                else if (GridType.isFence(gType)) {\r\n                    let shadow = BgGrid.getOne(\"bg/lanying.png\");\r\n                    shadow.width = 200;\r\n                    shadow.x = i * ww - 64;\r\n                    shadow.y = j * ww + 50;\r\n                    this._box.addChild(shadow);\r\n                }\r\n                k++;\r\n            }\r\n        }\r\n        k = 0;\r\n        for (let j = 0; j < GameBG.MAP_ROW; j++) {\r\n            this.bgh += GameBG.ww;\r\n            for (let i = 0; i < GameBG.MAP_COL; i++) {\r\n                if (k > GameBG.arr0.length) {\r\n                    break;\r\n                }\r\n                gType = GameBG.arr0[k];\r\n                let xx = i * GameBG.ww;\r\n                let yy = j * GameBG.ww;\r\n                var thorn;\r\n                var grid;\r\n                if (GridType.isRiverPoint(gType)) {\r\n                    grid = BgGrid.getOne(GameBG.BG_TYPE + '/100.png');\r\n                    grid.pos(xx, yy);\r\n                    this._box.addChild(grid);\r\n                }\r\n                else if (GridType.isThorn(gType)) {\r\n                    thorn = GameThorn.getOne();\r\n                    thorn.hbox.setXY(xx, yy);\r\n                    thorn.pos(xx, yy);\r\n                    this._box.addChild(thorn);\r\n                }\r\n                else if (GridType.isRiverScale9Grid(gType) || GridType.isRiverScale9Grid2(gType) || GridType.isRiverRow(gType) || GridType.isRiverCol(gType)) {\r\n                    grid = BgGrid.getOne(GameBG.BG_TYPE + '/' + gType + '.png');\r\n                    grid.pos(xx, yy);\r\n                    this._box.addChild(grid);\r\n                }\r\n                else if (GridType.isFlower(gType)) {\r\n                    grid = BgGrid.getOne(GameBG.BG_TYPE + '/' + gType + '.png');\r\n                    grid.pos(xx, yy);\r\n                    this._box.addChild(grid);\r\n                }\r\n                else if (GridType.isSawHeng(gType)) {\r\n                    if (this._sawInfo[gType] == null) {\r\n                        let hengAry = [];\r\n                        this._sawInfo[gType] = hengAry;\r\n                    }\r\n                    let p = new Laya.Point(xx, yy);\r\n                    this._sawInfo[gType].push(p);\r\n                }\r\n                else if (GridType.isSawZong(gType)) {\r\n                    if (this._sawInfoZong[gType] == null) {\r\n                        let hengAry = [];\r\n                        this._sawInfoZong[gType] = hengAry;\r\n                    }\r\n                    let p = new Laya.Point(xx, yy);\r\n                    this._sawInfoZong[gType].push(p);\r\n                }\r\n                else if (GridType.isNpc(gType)) {\r\n                    this.npcId = gType;\r\n                    this.npcP.x = xx + GameBG.ww2;\r\n                    this.npcP.y = yy;\r\n                    if (this.npcId == BattleFlagID.ANGLE) {\r\n                        this.npcId = 1001;\r\n                        if (this.npcDic[this.npcId] == null) {\r\n                            let NPC = Laya.ClassUtils.getClass(\"NPC\" + this.npcId);\r\n                            this._npcAni = new NPC();\r\n                            this.npcDic[this.npcId] = this._npcAni;\r\n                        }\r\n                        else {\r\n                            this._npcAni = this.npcDic[this.npcId];\r\n                        }\r\n                        this.showNpc();\r\n                    }\r\n                }\r\n                if (gType == BattleFlagID.DOOR) {\r\n                    this._door.pos(xx - GameBG.ww2, yy - GameBG.ww2);\r\n                    this._door.skin = 'bg/door.png';\r\n                }\r\n                else if (gType == BattleFlagID.HERO) {\r\n                    Hero.bornX = xx;\r\n                    Hero.bornY = yy;\r\n                }\r\n                k++;\r\n            }\r\n        }\r\n        this.saw.clear();\r\n        for (let key in this._sawInfo) {\r\n            let hengAry = this._sawInfo[key];\r\n            let pos = hengAry[0];\r\n            let ww = hengAry[1].x - hengAry[0].x + GameBG.ww;\r\n            this.saw.addBg(pos.x, pos.y, ww, 1);\r\n        }\r\n        for (let key in this._sawInfoZong) {\r\n            let zongAry = this._sawInfoZong[key];\r\n            let pos = zongAry[0];\r\n            let hh = zongAry[1].y - zongAry[0].y + GameBG.ww;\r\n            this.saw.addBg(pos.x, pos.y, hh, 2);\r\n        }\r\n        this._box.addChild(this._door);\r\n        this.saw.updateSaw();\r\n        this.startX = GameBG.ww2;\r\n        this.x = -this.startX;\r\n        this.y = (Laya.stage.height - GameBG.bgHH) * 0.5;\r\n        GameBG.cx = this.x;\r\n        GameBG.cy = this.y;\r\n        this.addChild(this.maskImg);\r\n        this.addChild(this.bottomImg);\r\n        this.maskImg.skin = \"battleBg/\" + GameBG.BG_TYPE_NUM + \".png\";\r\n        this.maskImg.sizeGrid = \"506,421,801,321\";\r\n        this.maskImg.width = GameBG.bgWW;\r\n        this.maskImg.height = GameBG.bgHHReal;\r\n        this.bottomImg.width = GameBG.bgWW;\r\n        this.bottomImg.height = 500;\r\n        this.bottomImg.y = this.maskImg.y + this.maskImg.height;\r\n        this.bottomImg.skin = \"battleBg/bottom_\" + GameBG.BG_TYPE_NUM + \".jpg\";\r\n    }\r\n    showGuidePointer() {\r\n    }\r\n    hideGuidePointer() {\r\n    }\r\n    showNpc() {\r\n        if (this._npcAni) {\r\n            this._npcAni.scale(1, 1);\r\n            Game.topLayer.addChild(this._npcAni);\r\n            this._npcAni.pos(this.npcP.x, this.npcP.y - 800);\r\n            Laya.Tween.to(this._npcAni, { y: this.npcP.y }, 300, Laya.Ease.circIn);\r\n        }\r\n    }\r\n    checkNpc() {\r\n        if (this.npcId <= 0) {\r\n            return;\r\n        }\r\n        if (!Game.map0.checkNpc()) {\r\n            return;\r\n        }\r\n        Game.scenneM.battle.up(null);\r\n        if (this.npcId == BattleFlagID.OTHER_NPC) {\r\n            this.npcId = 0;\r\n            let lossRate = Game.hero.lossBlood();\r\n            if (lossRate <= 0) {\r\n                this.npcId = 1002;\r\n            }\r\n            else if (lossRate <= 0.1) {\r\n                this.npcId = 1002;\r\n            }\r\n            else {\r\n                this.npcId = 1001;\r\n            }\r\n        }\r\n        else if (this.npcId == BattleFlagID.ANGLE) {\r\n            this.npcId = 1001;\r\n        }\r\n        if (this.npcId > 0) {\r\n        }\r\n    }\r\n    clearNpc() {\r\n        if (this._npcAni) {\r\n            Laya.Tween.to(this._npcAni, { scaleX: 0.3 }, 200, null, null, 100);\r\n            Laya.Tween.to(this._npcAni, { y: -300 }, 300, Laya.Ease.circIn, new Laya.Handler(this, this.clearNpcCom), 300);\r\n        }\r\n    }\r\n    clearNpcCom() {\r\n        this._npcAni && this._npcAni.removeSelf();\r\n        Game.map0.clearNpc();\r\n        this.npcId = 0;\r\n        this._npcAni = null;\r\n        if (Game.map0.Eharr.length == 0) {\r\n            CoinEffect.fly();\r\n        }\r\n    }\r\n    setDoor(state) {\r\n        this._door.visible = state == 1;\r\n    }\r\n    updateY() {\r\n        var bgy = GameBG.cy - Game.hero.pos2.z;\r\n        var u = false;\r\n        if (bgy <= 0 && bgy >= Laya.stage.height - GameBG.bgHH) {\r\n            Game.bg.y = bgy;\r\n            Game.camera.transform.localPositionZ = Game.cameraCN.z + Game.hero.z;\r\n            u = true;\r\n        }\r\n        else if (bgy < Laya.stage.height - GameBG.bgHH) {\r\n            Game.bg.y = Laya.stage.height - GameBG.bgHH;\r\n            Game.camera.transform.localPositionZ = Game.cameraCN.z + (GameBG.cy - Game.bg.y) / GameBG.ww / Game.cameraCN.cos0;\r\n        }\r\n        else {\r\n            Game.bg.y = 0;\r\n            Game.camera.transform.localPositionZ = Game.cameraCN.z + (GameBG.cy - Game.bg.y) / GameBG.ww / Game.cameraCN.cos0;\r\n        }\r\n        let ww2 = this.startX;\r\n        var bgx = GameBG.cx - Game.hero.pos2.x;\r\n        if (bgx <= -ww2 && bgx >= (Laya.stage.width - GameBG.bgWW) + ww2) {\r\n            Game.camera.transform.localPositionX = Game.hero.x;\r\n            Game.bg.x = bgx;\r\n            u = true;\r\n        }\r\n        else if (bgx > -ww2) {\r\n            Game.bg.x = -ww2;\r\n            Game.camera.transform.localPositionX = (GameBG.cx - Game.bg.x) / GameBG.ww;\r\n        }\r\n        else {\r\n            Game.bg.x = (Laya.stage.width - GameBG.bgWW) + ww2;\r\n            Game.camera.transform.localPositionX = (GameBG.cx - Game.bg.x) / GameBG.ww;\r\n        }\r\n        if (u) {\r\n        }\r\n        Game.updateMap();\r\n    }\r\n}\r\nGameBG.wnum = 12;\r\nGameBG.hnum = 49;\r\nGameBG.width = 750;\r\nGameBG.height = 1334;\r\nGameBG.ww = GameBG.width / GameBG.wnum;\r\nGameBG.ww2 = GameBG.ww / 2;\r\nGameBG.fw = GameBG.ww * 0.4;\r\nGameBG.mw = GameBG.ww - GameBG.fw;\r\nGameBG.mw2 = GameBG.mw / 2;\r\nGameBG.mw4 = GameBG.mw / 4;\r\nGameBG.orthographicVerticalSize = GameBG.wnum * GameBG.height / GameBG.width;\r\nGameBG.arrsp = [];\r\nGameBG.arr0 = [];\r\nexport class BgGrid extends Laya.Image {\r\n    constructor() {\r\n        super();\r\n        this.on(Laya.Event.UNDISPLAY, this, this.onUndis);\r\n    }\r\n    onInit(imgUrl) {\r\n        if (this.imgUrl) {\r\n            return;\r\n        }\r\n        this.skin = imgUrl;\r\n        this.imgUrl = imgUrl;\r\n    }\r\n    onUndis() {\r\n        Laya.Pool.recover(BgGrid.TAG + this.imgUrl, this);\r\n    }\r\n    static getOne(imgUrl) {\r\n        let grid = new BgGrid();\r\n        grid.onInit(imgUrl);\r\n        grid.imgUrl = imgUrl;\r\n        return grid;\r\n    }\r\n}\r\nBgGrid.TAG = \"BgGrid_\";\r\n",
  "references": [
    "D:/gitworker/GirlGunGame/src/GameConfig.ts",
    "D:/gitworker/GirlGunGame/src/game/Game.ts",
    "D:/gitworker/GirlGunGame/src/game/bg/GridType.ts",
    "D:/gitworker/GirlGunGame/src/core/display/BitmapNumber.ts",
    "D:/gitworker/GirlGunGame/src/core/App.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/battle/saw/Saw.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/battle/npc/NPC_1001.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/battle/npc/NPC_1002.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/battle/npc/NPC_1003.ts",
    "D:/gitworker/GirlGunGame/src/game/GameHitBox.ts",
    "D:/gitworker/GirlGunGame/src/game/player/Hero.ts",
    "D:/gitworker/GirlGunGame/src/game/GameThorn.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/battle/GameCube.ts",
    "D:/gitworker/GirlGunGame/src/main/scene/BattleFlagID.ts",
    "D:/gitworker/GirlGunGame/src/game/effect/CoinEffect.ts"
  ]
}
