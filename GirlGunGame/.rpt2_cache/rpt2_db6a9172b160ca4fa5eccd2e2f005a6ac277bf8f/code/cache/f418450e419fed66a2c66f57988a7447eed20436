{
  "code": "import BaseAI from \"./BaseAi\";\r\nimport { GameAI } from \"./GameAI\";\r\nimport MonsterShooting from \"./MonsterShooting\";\r\nimport Game from \"../Game\";\r\nimport GameProType from \"../GameProType\";\r\nimport AttackType from \"./AttackType\";\r\nimport GameHitBox from \"../GameHitBox\";\r\nimport MoveType from \"../move/MoveType\";\r\nexport default class FlowerAI extends BaseAI {\r\n    constructor(pro) {\r\n        super(pro);\r\n        this.shooting = new MonsterShooting();\r\n        this.nextTime = 0;\r\n        this.status = 0;\r\n        this.shooting.at = 0.4;\r\n        this.pro.setSpeed(this.sysEnemy.moveSpeed);\r\n        this.pro.on(Game.Event_Short, this, this.shootAc);\r\n        this.nextTime = Game.executor.getWorldNow() + Math.floor(Math.random() * 2000);\r\n    }\r\n    shootAc() {\r\n        let curBullet = this.shooting._sysBullet;\r\n        if (!curBullet) {\r\n            return;\r\n        }\r\n        let minNum = curBullet.mixNum;\r\n        let maxNum = curBullet.maxNum;\r\n        let bulletAngle = curBullet.bulletAngle;\r\n        this.shooting.shootCd = this.sysEnemy.enemySpeed;\r\n        if (curBullet.bulletType == 1) {\r\n            if (bulletAngle != 360) {\r\n                if (minNum % 2 == 0) {\r\n                    let angle = curBullet.bulletAngle;\r\n                    angle = angle / (minNum - 1);\r\n                    let hudu = angle / 180 * Math.PI * 0.5;\r\n                    let count = Math.floor(minNum / 2);\r\n                    for (let k = 0; k < curBullet.bulletNum; k++) {\r\n                        setTimeout(() => {\r\n                            for (var i = 1; i <= count; i++) {\r\n                                this.shooting.short_arrow(this.pro.face3d + hudu * (2 * i - 1), this.pro, GameProType.MonstorArrow);\r\n                                this.shooting.short_arrow(this.pro.face3d - hudu * (2 * i - 1), this.pro, GameProType.MonstorArrow);\r\n                            }\r\n                        }, k * 500);\r\n                    }\r\n                }\r\n                else {\r\n                    let angle = curBullet.bulletAngle;\r\n                    angle = angle / minNum;\r\n                    let hudu = angle / 180 * Math.PI;\r\n                    let count = Math.floor(minNum / 2);\r\n                    for (let k = 0; k < curBullet.bulletNum; k++) {\r\n                        setTimeout(() => {\r\n                            this.shooting.short_arrow(this.pro.face3d, this.pro, GameProType.MonstorArrow);\r\n                            for (var i = 1; i <= count; i++) {\r\n                                this.shooting.short_arrow(this.pro.face3d + hudu * i, this.pro, GameProType.MonstorArrow);\r\n                                this.shooting.short_arrow(this.pro.face3d - hudu * i, this.pro, GameProType.MonstorArrow);\r\n                            }\r\n                        }, k * 500);\r\n                    }\r\n                }\r\n            }\r\n            else if (bulletAngle == 360) {\r\n                for (let k = 0; k < curBullet.bulletNum; k++) {\r\n                    setTimeout(() => {\r\n                        for (var i = 1; i <= minNum; i++) {\r\n                            this.shooting.short_arrow(2 * Math.PI / minNum * i, this.pro, GameProType.MonstorArrow);\r\n                        }\r\n                    }, k * 500);\r\n                }\r\n            }\r\n        }\r\n        else if (curBullet.bulletType == 2) {\r\n            this.shooting.shootCd = this.sysEnemy.enemySpeed;\r\n            let angle = curBullet.bulletAngle;\r\n            angle = angle / 2;\r\n            let bulletNum = minNum + Math.ceil(Math.random() * (maxNum - minNum));\r\n            for (let i = 0; i < bulletNum; i++) {\r\n                setTimeout(() => {\r\n                    let flag = i % 2 == 0 ? 1 : -1;\r\n                    let tmp = (angle * Math.random()) / 180 * Math.PI * flag;\r\n                    this.shooting.short_arrow(this.pro.face3d + tmp, this.pro, GameProType.MonstorArrow, (Math.random() > 0.5 ? 1 : -1) * 200 * Math.random());\r\n                }, Math.random() * 1000 + 200);\r\n            }\r\n        }\r\n    }\r\n    startAttack() {\r\n        if (this.pro.gamedata.hp <= 0) {\r\n            return;\r\n        }\r\n        this.shooting._sysBullet = null;\r\n        if (this.normalSb) {\r\n            if (this.normalSb.bulletType == AttackType.NORMAL_BULLET || this.normalSb.bulletType == AttackType.RANDOM_BULLET) {\r\n                this.shooting._sysBullet = this.normalSb;\r\n            }\r\n        }\r\n        if (!this.shooting._sysBullet) {\r\n            if (this.skillISbs.length > 0) {\r\n                let rand = Math.floor(this.skillISbs.length * Math.random());\r\n                let skillBullet = this.skillISbs[rand];\r\n                if (skillBullet.bulletType == AttackType.NORMAL_BULLET || skillBullet.bulletType == AttackType.RANDOM_BULLET) {\r\n                    this.shooting._sysBullet = skillBullet;\r\n                }\r\n            }\r\n        }\r\n        if (this.shooting._sysBullet) {\r\n            if (this.now >= this.nextTime) {\r\n                this.faceToHero();\r\n                this.shooting.starAttack(this.pro, GameAI.NormalAttack);\r\n            }\r\n        }\r\n        if (this.now >= this.nextTime) {\r\n            this.faceToHero();\r\n            this.nextTime = this.now + this.sysEnemy.enemySpeed;\r\n        }\r\n    }\r\n    faceToHero() {\r\n        var a = GameHitBox.faceTo3D(this.pro.hbox, Game.hero.hbox);\r\n        this.pro.rotation(a);\r\n    }\r\n    exeAI(pro) {\r\n        if (!this.run_)\r\n            return;\r\n        super.exeAI(pro);\r\n        this.onExe();\r\n        return false;\r\n    }\r\n    onExe() {\r\n        this.checkHeroCollision();\r\n        if (this.pro.isIce) {\r\n            return;\r\n        }\r\n        if (this.status == 0 && this.now >= this.nextTime) {\r\n            this.pro.play(GameAI.Idle);\r\n            this.nextTime = this.now + this.sysEnemy.enemySpeed;\r\n            var a = GameHitBox.faceTo3D(this.pro.hbox, Game.hero.hbox);\r\n            this.pro.rotation(a);\r\n            this.status = 1;\r\n        }\r\n        else if (this.status == 1 && this.now >= this.nextTime) {\r\n            this.startAttack();\r\n            this.status = 0;\r\n            this.nextTime = this.now + this.shooting.shootCd;\r\n        }\r\n        if (this.status == 1) {\r\n            if (this.sysEnemy.moveType == MoveType.FIXED) {\r\n                return;\r\n            }\r\n            this.pro.move2D(this.pro.face2d);\r\n            this.pro.play(GameAI.Run);\r\n        }\r\n    }\r\n    hit(pro) {\r\n        super.hit(pro);\r\n    }\r\n    die() {\r\n        super.die();\r\n        this.shooting && this.shooting.cancelAttack();\r\n    }\r\n}\r\n",
  "references": [
    "D:/gitworker/GirlGunGame/src/game/ai/BaseAi.ts",
    "D:/gitworker/GirlGunGame/src/game/player/Monster.ts",
    "D:/gitworker/GirlGunGame/src/game/ai/GameAI.ts",
    "D:/gitworker/GirlGunGame/src/game/GamePro.ts",
    "D:/gitworker/GirlGunGame/src/game/ai/MonsterShooting.ts",
    "D:/gitworker/GirlGunGame/src/main/sys/SysBullet.ts",
    "D:/gitworker/GirlGunGame/src/main/sys/SysEnemy.ts",
    "D:/gitworker/GirlGunGame/src/core/App.ts",
    "D:/gitworker/GirlGunGame/src/game/Game.ts",
    "D:/gitworker/GirlGunGame/src/game/GameProType.ts",
    "D:/gitworker/GirlGunGame/src/game/ai/AttackType.ts",
    "D:/gitworker/GirlGunGame/src/game/GameHitBox.ts",
    "D:/gitworker/GirlGunGame/src/game/move/MoveType.ts"
  ]
}
